; ### x86-64 generated from AmyScript Compiler ###########################
; ========================================================================

; ========================================================================
; ### LIBRARY CODE #######################################################
; ========================================================================

; AmyScript Built-in library
; Author: Amy Burnett
; ========================================================================

        global _start
        section   .text
        extern printf, exit, getline, stdin
        extern free, malloc
        extern atoi, atof

; ========================================================================

; Exits the program with the given exit code 
; void exit(int exit_code)
; - exit_code : [rbp + 16]
; - uses external exit function from libc
__builtin__exit__int: 
        push    rbp 
        mov     rbp, rsp 
        and     rsp, -16                 ; ensure stack is 16-byte aligned
        
        mov     rdi, qword [rbp + 16]
        call exit                          ; invoke operating system to exit

        mov     rsp, rbp                 ; restore stack pointer
        pop     rbp 
        ret

; ========================================================================

; Frees memory of the given pointer
; void free()
; - exit_code : [rbp + 16]
; - uses external exit function from libc
; __builtin__free__void__: 
;         push    rbp 
;         mov     rbp, rsp 
        


;         pop     rbp 
;         ret

; ========================================================================
; Prints a given string to the screen
; void print (char[] stringToPrint);
; stringToPrint : [rbp + 16]
; *requires null at the end of the string
__builtin__print__char__1:
        push rbp
        mov rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        mov     rsi, qword [rbp + 16]
        mov     rdi, __data__print__char__1__format
        mov     eax, 0
        call    printf 

        mov     rsp, rbp                 ; restore stack pointer
        pop rbp
        ret

section .data
__data__print__char__1__format: db "%s", 0
section .text

; print__char__1:
;     // grab string
;     stackget __str 0
;     sizeof __size __str
;     // print each char
;     // init
;     assign __i 0
; __print__char__1__loop:
;     // cond
;     cmp __i __size
;     jge __print__char__1__endloop
;     // Body
;     print __str[__i]
;     // update
;     add __i __i 1
;     // repeat
;     jump __print__char__1__loop
; __print__char__1__endloop:
;     return 0

; ========================================================================

; Prints an int to the screen
; Utilizes printf "%d"
; void print (int valueToPrint);
; valueToPrint : [rbp + 16]
__builtin__print__int:
        push    rbp 
        mov     rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        mov     rsi, qword [rbp + 16]
        mov     rdi, __data__print__int__format
        mov     eax, 0
        call    printf 

        mov     rsp, rbp                 ; restore stack pointer
        pop     rbp
        ret 

section .data
__data__print__int__format: db "%ld", 0
section .text

; Prints an int to the screen
; void print (int intToPrint);
; - intToPrint : [rbp + 16] (8-bytes)
; Usage:
;        push rdx
;        call print__int
;        pop
; manual_print__int:
;         push    rbp
;         mov     rbp, rsp  
;         sub     rsp, 4                   ; num        [rbp -  4] [int 4-bytes]
;         sub     rsp, 4                   ; isNegative [rbp -  8] [int 4-bytes]
;         sub     rsp, 4                   ; digit      [rbp - 12] [int 4-bytes]
;         sub     rsp, 4                   ; char       [rbp - 16] [int 4-bytes]
;         sub     rsp, 4                   ; numDigits  [rbp - 20] [int 4-bytes]

;         ; initialize local vars
;         mov     edx, dword [rbp + 16]
;         mov     dword [rbp - 4], edx
;         mov     dword [rbp - 8], 0
;         mov     dword [rbp - 12], 0
;         mov     dword [rbp - 16], 0
;         mov     dword [rbp - 20], 0

;         ; account for negative numbers
;         ; if num < 0:
;         ;   isNegative = 1
;         ;   num = -num
;         cmp     dword [rbp - 4], 0
;         jge     positive0
;         mov     dword [rbp - 8], 1
;         neg     dword [rbp - 4]
; positive0: nop

;         ; while num > 9:
; while0:
;         cmp     dword [rbp - 4], 9 
;         jle     endwhile0 
;         ;   digit = num % 10
;         ;   num = num / 10
;         mov     edi, 10
;         mov     eax, dword [rbp - 4]
;         cdq     
;         idiv    edi
;         mov     dword [rbp - 12], edx  ; digit = num % 10
;         mov     dword [rbp - 4], eax   ; num = num / 10

;         ;   char = digit + '0'
;         mov     eax, dword [rbp - 12]
;         add     eax, '0'
;         ;   push char
;         push    rax
;         ;   numDigits++ 
;         inc     dword [rbp - 20]
;         ; repeat
;         jmp     while0
; endwhile0: 

;         ;   char = num + '0'
;         mov     eax, dword [rbp - 4]
;         add     eax, '0'
;         ;   push char
;         push    rax
;         ;   numDigits++ 
;         inc     dword [rbp - 20]
        
;         ; if isNegative == 1:
;         cmp     dword [rbp - 8], 1
;         jne     positive1
;         ;   push '-'
;         push    '-'
;         ;   numDigits++
;         inc     dword [rbp - 20]

; positive1: 
;         nop
        
;         ; while numDigits > 0:
; while1:
;         cmp     dword [rbp - 20], 0
;         jle     endwhile1
;         ;   pop char
;         pop     rdx
;         ;   printchar char
;         push    rdx   ; arg0
;         call    print__char 
;         pop     rdx    ; arg0
;         ;   numDigits--
;         dec     dword [rbp - 20]
;         ;   repeat 
;         jmp     while1
; endwhile1:

;         mov     rsp, rbp                 ; pop local vars 
;         pop     rbp
;         ret

; ========================================================================

; Prints a char to the screen
; Utilizes printf "%c"
; void print (char valueToPrint);
; valueToPrint : [rbp + 16]
__builtin__print__char:
        push    rbp 
        mov     rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        mov     rsi, qword [rbp + 16]
        mov     rdi, __data__print__char__format
        mov     eax, 0
        call    printf 

        mov     rsp, rbp                 ; restore stack pointer
        pop     rbp
        ret 

section .data
__data__print__char__format: db "%c", 0
section .text

; void print(char c)
; c : [rbp + 16] (8-bytes)
manual_print__char:
        push    rbp
        mov     rbp, rsp  
        sub     rsp, 1                   ; make space for char
        mov     dl, byte [rbp + 16]
        mov     byte [rbp - 4], dl

        mov     rax, 1                   ; system call for write
        mov     rdi, 1                   ; file handle 1 is stdout
        mov     rsi, rbp                 ; address of string to output
        sub     rsi, 4
        mov     rdx, 1                   ; number of bytes
        syscall                          ; invoke operating system to do the write

        mov     rsp, rbp                 ; restore stack pointer
        pop     rbp
        ret

; ========================================================================

; Prints a float to the screen
; Utilizes printf "%f"
; void print (float valueToPrint);
; valueToPrint : [rbp + 16]
; Usage:
;       push qword [myfloat]
;       call print__float
;       pop rdx 
;       ...
; section   .data
; myfloat: dq 3.1415926535
__builtin__print__float:
        push    rbp 
        mov     rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        movsd   xmm0, qword [rbp + 16]
        mov     rdi, __data__print__float__format
        mov     eax, 1
        call    printf 

        mov     rsp, rbp                 ; pop local vars 
        pop     rbp
        ret 

section .data
__data__print__float__format: db "%g", 0
section .text

; //========================================================================
; // Prints a given string to the screen with a newline at the end
; // void println (char[] stringToPrint);
; stringToPrint : [rbp + 16]
__builtin__println__char__1:
        push rbp
        mov rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        mov     rsi, qword [rbp + 16]
        mov     rdi, __data__println__char__1__format
        mov     eax, 0
        call    printf 

        mov     rsp, rbp                 ; pop local vars 
        pop rbp
        ret

section .data
__data__println__char__1__format: db "%s", 10, 0
section .text

; println__char__1:
;     // grab string
;     stackget __str 0
;     sizeof __size __str
;     // print each char
;     // init
;     assign __i 0
; __println__char__1__loop:
;     // cond
;     cmp __i __size
;     jge __println__char__1__endloop
;     // Body
;     print __str[__i]
;     // update
;     add __i __i 1
;     // repeat
;     jump __println__char__1__loop
; __println__char__1__endloop:
;     println
;     return 0

; ========================================================================

; Prints an int to the screen with a newline
; Utilizes printf "%d"
; void println (int valueToPrint);
; valueToPrint : [rbp + 16]
__builtin__println__int:
        push    rbp 
        mov     rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        mov     rsi, qword [rbp + 16]
        mov     rdi, __data__println__int__format
        mov     eax, 0
        call    printf

        mov     rsp, rbp                 ; pop local vars 
        pop     rbp
        ret 

section .data
__data__println__int__format: db "%ld", 10, 0
section .text

; ========================================================================
; // Prints a float to the screen with a newline
; // void println (float floatToPrint);
; valueToPrint : [rbp + 16]
__builtin__println__float:
        push    rbp 
        mov     rbp, rsp
        and     rsp, -16                 ; ensure stack is 16-byte aligned

        movsd   xmm0, qword [rbp + 16]
        mov     rdi, __data__println__float__format
        mov     eax, 1                   ; one floating point
        call    printf

        mov     rsp, rbp                 ; pop local vars 
        pop     rbp
        ret 

section .data
; g uses the shortest representation
; of f and e (scientific)
__data__println__float__format: db "%g", 10, 0
section .text

; //========================================================================
; // Prints a char to the screen with a newline
; // void println (char charToPrint);
__builtin__println__char:
        push    rbp 
        mov     rbp, rsp

        mov     rsi, qword [rbp + 16]
        mov     rdi, __data__println__char__format
        mov     eax, 0
        call    printf 

        mov     rsp, rbp                 ; pop local vars 
        pop     rbp
        ret 

section .data
__data__println__char__format: db "%c", 10, 0
section .text

; //========================================================================
; // Prints an enum's integer value with a newline
; // void println (Enum e);
; __builtin__println__Enum:
;     stackget __e 0
;     println __e
;     return 0

; //========================================================================
; // Prints a newline to the console
; // void println ();
__builtin__println:
        push    rbp 
        mov     rbp, rsp

        mov     rdi, __data__println__format
        mov     eax, 0
        call    printf 

        pop     rbp
        ret 

section .data
__data__println__format: db 10, 0
section .text

; //========================================================================
; // grabs input from the console 
; this waits for a line if there isnt one
; // char[] input ();
__builtin__input:
        ; function setup
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        ; function body 
        mov     qword [rbp-8], 0    ; char* buffer = nullptr;
        mov     qword [rbp-16], 0   ; size_t buflen = 0;
        ; num_chars = getline (&buffer, &buflen, stdin);
        mov     rdx, qword [stdin]  ; stdin
        lea     rcx, [rbp-16]
        lea     rax, [rbp-8]
        mov     rsi, rcx
        mov     rdi, rax
        call    getline
        ; check for eof
        cmp     rax, -1
        je      __builtin__input__eof
        ; return pointer to the line
        mov     rax, qword [rbp-8]
        jmp     __builtin__input__end

__builtin__input__eof:
        ; set rax to null
        mov     rax, 0

__builtin__input__end:
        add     rsp, 16
        pop     rbp
        ret 

; //========================================================================
; // returns default float value
; // float float ();
; __builtin__float:
;     return 0.0

; //========================================================================
; // converts int to float
; // float intToFloat (int value);
; value : [rbp + 16]
__builtin__intToFloat__int:
        ; function prologue
        push    rbp
        mov     rbp, rsp
        
        cvtsi2sd xmm0, qword [rbp + 16] ; xmm0 = float(value)

        ; function epilogue
        mov     rsp, rbp
        pop     rbp
        ret 

; //========================================================================
; // parses a float from a given char[]
; // float stringToFloat (char[]);
; str : [rbp + 16]
__builtin__stringToFloat__char__1:
        ; function setup
        push    rbp
        mov     rbp, rsp

        mov     rdi, qword [rbp+16]
        call    atof
        ; value stored in xmm0
        
        pop rbp
        ret

; //========================================================================
; // returns default int value
; // int int ();
; __builtin__int:
;     return 0

; //========================================================================
; // returns default char value
; // char char ();
; __builtin__char:
;     return '0'

; //========================================================================
; // converts float to int
; // int floatToInt (float);
; __builtin__floatToInt__float:
;     stackget val 0
;     ftoi res val
;     return res

; //========================================================================
; // parses an int from a given char[]
; // int stringToInt (char[] str);
; str : [rbp + 16]
__builtin__stringToInt__char__1:
        ; function setup
        push    rbp
        mov     rbp, rsp

        mov     rdi, qword [rbp+16]
        call    atoi
        ; value stored in rax

        pop rbp
        ret

; //========================================================================
; // parses an int from a given char
; // int charToInt (char);
__builtin__charToInt__char:
        ; function setup
        push    rbp
        mov     rbp, rsp

        mov     rax, qword [rbp+16]
        mov     rdx, '0'
        sub     rax, rdx

        pop rbp
        ret

; //========================================================================
; // converts int to string
; // char[] string (int);
; __builtin__string__int:
;     stackget val 0
;     string res val
;     return res

; //========================================================================
; // converts float to string
; // char[] string (float);
; __builtin__string__float:
;     stackget val 0
;     string res val
;     return res

; //========================================================================

; // returns default value for array and object (null)
; // null null ();
; __builtin__null:
;     return __null

; //========================================================================



; ========================================================================

section .data
__builtin__neg: dq -1.0
section .text; ========================================================================
; ### COMPILED CODE ######################################################
; ========================================================================

_start:
main:
         ; Main Header:
         push rbp
         mov rbp, rsp
         sub rsp, 496
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
         ; [rbp - 8] - char[] line (<unset-scope-name>)
         ; [rbp - 16] - Vector<:char[]:> lines (<unset-scope-name>)
         ; [rbp - 24] - int x (<unset-scope-name>)
         ; [rbp - 32] - int y (<unset-scope-name>)
         ; [rbp - 40] - Vector<:char[]:> board (<unset-scope-name>)
         ; [rbp - 48] - int shift_index (<unset-scope-name>)
         ; [rbp - 56] - int shift_max (<unset-scope-name>)
         ; [rbp - 64] - int iter (<unset-scope-name>)
         ; [rbp - 72] - int num_rocks (<unset-scope-name>)
         ; [rbp - 80] - int max_rocks (<unset-scope-name>)
         ; [rbp - 88] - int height (<unset-scope-name>)
         ; [rbp - 96] - int rock_height (<unset-scope-name>)
         ; [rbp - 104] - int i (<unset-scope-name>)
         ; [rbp - 112] - int j (<unset-scope-name>)
         ; [rbp - 120] - int shape_height (<unset-scope-name>)
         ; [rbp - 128] - char rock_char (<unset-scope-name>)
         ; [rbp - 136] - int desired_height (<unset-scope-name>)
         ; [rbp - 144] - int[] posx0 (<unset-scope-name>)
         ; [rbp - 152] - int posy (<unset-scope-name>)
         ; [rbp - 160] - int rock_height (<unset-scope-name>)
         ; [rbp - 168] - int i (<unset-scope-name>)
         ; [rbp - 176] - int j (<unset-scope-name>)
         ; [rbp - 184] - int shape_height (<unset-scope-name>)
         ; [rbp - 192] - char rock_char (<unset-scope-name>)
         ; [rbp - 200] - int desired_height (<unset-scope-name>)
         ; [rbp - 208] - int[] posx0 (<unset-scope-name>)
         ; [rbp - 216] - int[] posx1 (<unset-scope-name>)
         ; [rbp - 224] - int[] posx2 (<unset-scope-name>)
         ; [rbp - 232] - int posy (<unset-scope-name>)
         ; [rbp - 240] - int rock_height (<unset-scope-name>)
         ; [rbp - 248] - int i (<unset-scope-name>)
         ; [rbp - 256] - int j (<unset-scope-name>)
         ; [rbp - 264] - int shape_height (<unset-scope-name>)
         ; [rbp - 272] - char rock_char (<unset-scope-name>)
         ; [rbp - 280] - int desired_height (<unset-scope-name>)
         ; [rbp - 288] - int[] posx0 (<unset-scope-name>)
         ; [rbp - 296] - int[] posx1 (<unset-scope-name>)
         ; [rbp - 304] - int[] posx2 (<unset-scope-name>)
         ; [rbp - 312] - int posy (<unset-scope-name>)
         ; [rbp - 320] - int rock_height (<unset-scope-name>)
         ; [rbp - 328] - int i (<unset-scope-name>)
         ; [rbp - 336] - int j (<unset-scope-name>)
         ; [rbp - 344] - int shape_height (<unset-scope-name>)
         ; [rbp - 352] - char rock_char (<unset-scope-name>)
         ; [rbp - 360] - int desired_height (<unset-scope-name>)
         ; [rbp - 368] - int[] posx0 (<unset-scope-name>)
         ; [rbp - 376] - int[] posx1 (<unset-scope-name>)
         ; [rbp - 384] - int[] posx2 (<unset-scope-name>)
         ; [rbp - 392] - int[] posx3 (<unset-scope-name>)
         ; [rbp - 400] - int posy (<unset-scope-name>)
         ; [rbp - 408] - int rock_height (<unset-scope-name>)
         ; [rbp - 416] - int i (<unset-scope-name>)
         ; [rbp - 424] - int j (<unset-scope-name>)
         ; [rbp - 432] - int shape_height (<unset-scope-name>)
         ; [rbp - 440] - char rock_char (<unset-scope-name>)
         ; [rbp - 448] - int desired_height (<unset-scope-name>)
         ; [rbp - 456] - int[] posx0 (<unset-scope-name>)
         ; [rbp - 464] - int[] posx1 (<unset-scope-name>)
         ; [rbp - 472] - int posy (<unset-scope-name>)
         ; [rbp - 480] - int rock_height (<unset-scope-name>)
         ; [rbp - 488] - int i (<unset-scope-name>)
         ; [rbp - 496] - int j (<unset-scope-name>)

         ; Body
; ========================================================================
         ; Class Template - 
            ; Instances:
      ; ==================================================================
               ; Class Declaration - __main____Vector__char__1 inherits __builtin____main__Object
                  ; Class data
                  section .data
                     ; Dispatch Table - this might need to be a malloc**
                     .__dtable____main____Vector__char__1:
                     ; Dispatch Table Entries
                     dq .__method____main____Vector__char__1____pushBack__char__1 ; 0
                     dq .__method____main____Vector__char__1____popBack ; 1
                     dq .__method____main____Vector__char__1____clear ; 2
                     dq .__method____main____Vector__char__1____get__int ; 3
                     dq .__method____main____Vector__char__1____set__int__char__1 ; 4
                  section .text
         ;---------------------------------------------------------------
                  ; Field - char[][] Vector<:char[]:>::data
                  section .data
                  .__field____main____Vector__char__1____data: dq 1
                  section .text
         ;---------------------------------------------------------------
         ;---------------------------------------------------------------
                  ; Field - int Vector<:char[]:>::size
                  section .data
                  .__field____main____Vector__char__1____size: dq 2
                  section .text
         ;---------------------------------------------------------------
         ;---------------------------------------------------------------
                  ; Field - int Vector<:char[]:>::capacity
                  section .data
                  .__field____main____Vector__char__1____capacity: dq 3
                  section .text
         ;---------------------------------------------------------------
               ; skip over class methods
               jmp .__endclass____main____Vector__char__1
         ;---------------------------------------------------------------
                  ; Constructor Declaration - Vector<:char[]:>::Vector() -> Vector<:char[]:>
                  jmp .__end__ctor____main____Vector__char__1____Vector
                  .__ctor____main____Vector__char__1____Vector:
                  ; Function Header:
                     ; Setup stack frame
                        push rbp
                        mov rbp, rsp
                        ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                           sub rsp, 16 ; space for local variables (16-byte aligned)
                           ; [rbp - 8] - this - Reference to 'this' object instance
                     ; Creating Class Instance
                        mov rdi, 32 ; [dtable, field0, field1, ..., fieldN] each 8 bytes
                        call malloc
                        mov qword [rbp - 8], rax ; save class instance as 'this'
                        ; Add Dispatch Table
                        mov rax, qword [rbp - 8] ; this
                        mov qword [rax + 0], .__dtable____main____Vector__char__1 ; this[0] = &dtable
                     ; Parameters
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
                        ; Assignment - '='
                           ; RHS
                              ; Int Literal
                                 mov rax, 10
                                 push rax
                           ; LHS
                              ; Member Accessor Assignment
                                 ; LHS
                                    ; This keyword
                                       push qword [rbp - 8] ; __this
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____capacity] ; 
                                 pop rdi ; rhs
                                 pop rbx ; lhs
                           pop rdx ; rhs value
                           mov qword [rbx + 8*rdi], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Int Literal
                                 mov rax, 0
                                 push rax
                           ; LHS
                              ; Member Accessor Assignment
                                 ; LHS
                                    ; This keyword
                                       push qword [rbp - 8] ; __this
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____size] ; 
                                 pop rdi ; rhs
                                 pop rbx ; lhs
                           pop rdx ; rhs value
                           mov qword [rbx + 8*rdi], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Array Allocator
                                 ; Member Accessor
                                    ; LHS
                                       ; This keyword
                                          push qword [rbp - 8] ; __this
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____capacity] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                                 pop rdx ; num elements for dimension[0]
                                 imul rdx, 8 ; 8 bytes per element
                                 mov rdi, rdx ; num bytes to allocate
                                 call malloc ; allocates edi bytes on heap and stores pointer in rax
                                 push rax ; __ptr
                           ; LHS
                              ; Member Accessor Assignment
                                 ; LHS
                                    ; This keyword
                                       push qword [rbp - 8] ; __this
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____data] ; 
                                 pop rdi ; rhs
                                 pop rbx ; lhs
                           pop rdx ; rhs value
                           mov qword [rbx + 8*rdi], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
            ;------------------------------------------------------------
                  mov rax, qword [rbp - 8] ; __this
                  ; Function Epilogue
                  mov rsp, rbp ; remove local vars + unpopped pushes
                  pop rbp
                  ret
               .__end__ctor____main____Vector__char__1____Vector:
               ; End Constructor Declaration - __ctor____main____Vector__char__1____Vector
      ;------------------------------------------------------------------

      ;------------------------------------------------------------------
               ; Constructor Declaration - Vector<:char[]:>::Vector(int) -> Vector<:char[]:>
               jmp .__end__ctor____main____Vector__char__1____Vector__int
               .__ctor____main____Vector__char__1____Vector__int:
               ; Function Header:
                  ; Setup stack frame
                     push rbp
                     mov rbp, rsp
                     ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                        sub rsp, 16 ; space for local variables (16-byte aligned)
                        ; [rbp - 8] - this - Reference to 'this' object instance
                  ; Creating Class Instance
                     mov rdi, 32 ; [dtable, field0, field1, ..., fieldN] each 8 bytes
                     call malloc
                     mov qword [rbp - 8], rax ; save class instance as 'this'
                     ; Add Dispatch Table
                     mov rax, qword [rbp - 8] ; this
                     mov qword [rax + 0], .__dtable____main____Vector__char__1 ; this[0] = &dtable
                  ; Parameters
                     ; Param: size [rbp + 16]
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
                     ; Assignment - '='
                        ; RHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int size
                                    push qword [rbp - -16]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 10
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; LHS
                           ; Member Accessor Assignment
                              ; LHS
                                 ; This keyword
                                    push qword [rbp - 8] ; __this
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____capacity] ; 
                              pop rdi ; rhs
                              pop rbx ; lhs
                        pop rdx ; rhs value
                        mov qword [rbx + 8*rdi], rdx
                        push rdx
                     ; Statement results can be ignored
                     pop rdx
                     ; Assignment - '='
                        ; RHS
                           ; Identifier - int size
                              push qword [rbp - -16]
                        ; LHS
                           ; Member Accessor Assignment
                              ; LHS
                                 ; This keyword
                                    push qword [rbp - 8] ; __this
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____size] ; 
                              pop rdi ; rhs
                              pop rbx ; lhs
                        pop rdx ; rhs value
                        mov qword [rbx + 8*rdi], rdx
                        push rdx
                     ; Statement results can be ignored
                     pop rdx
                     ; Assignment - '='
                        ; RHS
                           ; Array Allocator
                              ; Member Accessor
                                 ; LHS
                                    ; This keyword
                                       push qword [rbp - 8] ; __this
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____capacity] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                              pop rdx ; num elements for dimension[0]
                              imul rdx, 8 ; 8 bytes per element
                              mov rdi, rdx ; num bytes to allocate
                              call malloc ; allocates edi bytes on heap and stores pointer in rax
                              push rax ; __ptr
                        ; LHS
                           ; Member Accessor Assignment
                              ; LHS
                                 ; This keyword
                                    push qword [rbp - 8] ; __this
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____data] ; 
                              pop rdi ; rhs
                              pop rbx ; lhs
                        pop rdx ; rhs value
                        mov qword [rbx + 8*rdi], rdx
                        push rdx
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               mov rax, qword [rbp - 8] ; __this
               ; Function Epilogue
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
            .__end__ctor____main____Vector__char__1____Vector__int:
            ; End Constructor Declaration - __ctor____main____Vector__char__1____Vector__int
   ;---------------------------------------------------------------------

   ;---------------------------------------------------------------------
            ; Method Declaration - Vector<:char[]:>::pushBack(char[]) -> void
            jmp .__end__method____main____Vector__char__1____pushBack__char__1
            .__method____main____Vector__char__1____pushBack__char__1:
               ; Function Header:
               ; Setup stack frame
                  push rbp
                  mov rbp, rsp
                  ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                     sub rsp, 32 ; space for local variables (16-byte aligned)
                     ; [rbp - 8] - this - Reference to 'this' object instance
                     mov rdx, qword [rbp + 16] ; param passed 'this'
                     mov qword [rbp - 8], rdx ; save this to a local
                     ; [rbp - 16] - char[][] nData (<unset-scope-name>)
                     ; [rbp - 24] - int i (<unset-scope-name>)
               ; Parameters
                  ; Param: val [rbp + 24] (__main____Vector__char__1__pushBack__val)
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; If-Statement
                        ; Condition
                           ; Greater Than or Equal to
                              ; LHS
                                 ; Addition - int, int
                                    ; LHS
                                       ; Member Accessor
                                          ; LHS
                                             ; This keyword
                                                push qword [rbp - 8] ; __this
                                          ; RHS
                                             push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          push qword [rax + 8*rdx] ; lhs.rhs
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              ; RHS
                                 ; Member Accessor
                                    ; LHS
                                       ; This keyword
                                          push qword [rbp - 8] ; __this
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____capacity] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setge al
                              movzx eax, al
                              push rax
                           pop rdx ; __cond
                           cmp rdx, 0 ; ensure condition is true
                           je .__endif__3 ; jump to end
                        ; Body
                  ;------------------------------------------------------
                           ; Code Block
                              ; Assignment - '='
                                 ; RHS
                                    ; Multiplication - int, int
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; This keyword
                                                   push qword [rbp - 8] ; __this
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____capacity] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx
                                       pop rax
                                       imul rax, rdx
                                       push rax
                                 ; LHS
                                    ; Member Accessor Assignment
                                       ; LHS
                                          ; This keyword
                                             push qword [rbp - 8] ; __this
                                       ; RHS
                                          push qword [.__field____main____Vector__char__1____capacity] ; 
                                       pop rdi ; rhs
                                       pop rbx ; lhs
                                 pop rdx ; rhs value
                                 mov qword [rbx + 8*rdi], rdx
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                              ; Assignment - '='
                                 ; RHS
                                    ; Array Allocator
                                       ; Member Accessor
                                          ; LHS
                                             ; This keyword
                                                push qword [rbp - 8] ; __this
                                          ; RHS
                                             push qword [.__field____main____Vector__char__1____capacity] ; stored index associated with field that is being accessed
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          push qword [rax + 8*rdx] ; lhs.rhs
                                       pop rdx ; num elements for dimension[0]
                                       imul rdx, 8 ; 8 bytes per element
                                       mov rdi, rdx ; num bytes to allocate
                                       call malloc ; allocates edi bytes on heap and stores pointer in rax
                                       push rax ; __ptr
                                 ; LHS
                                    ; Variable Declaration - nData
                                       mov rax, qword [rbp - 16]  ; __main____Vector__char__1__pushBack__block__2__if__3__block__4__nData
                                 pop rdx ; rhs value
                                 mov qword [rbp - 16], rdx
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; For-Loop
                              ; Init
                                 ; Assignment - '='
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 0
                                          push rax
                                    ; LHS
                                       ; Variable Declaration - i
                                          mov rax, qword [rbp - 24]  ; __main____Vector__char__1__pushBack__block__2__if__3__block__4__for__5__i
                                    pop rdx ; rhs value
                                    mov qword [rbp - 24], rdx
                                    push rdx
                                 ; Loop init result can be discarded
                                 pop rax
                              jmp .__forcond__5
.__for__5:
                                 ; Update
                                    ; Pre-Increment - int
                                       ; RHS
                                          ; Identifier - int i
                                             push qword [rbp - 24]
                                       pop rdx
                                       add qword [rbp - 24], 1
                                       mov rax, qword [rbp - 24]
                                       push rax ; push result
                                    ; Loop update result can be discarded
                                    pop rax
.__forcond__5:
                                 ; Condition
                                    ; Less Than
                                       ; LHS
                                          ; Identifier - int i
                                             push qword [rbp - 24]
                                       ; RHS
                                          ; Member Accessor
                                             ; LHS
                                                ; This keyword
                                                   push qword [rbp - 8] ; __this
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       setl al
                                       movzx eax, al
                                       push rax
                                    pop rax ; __cond
                                    cmp rax, 0 ; __cond
                                    je .__endfor__5
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '='
                                          ; RHS
                                             ; Subscript
                                                ; LHS
                                                   ; Member Accessor
                                                      ; LHS
                                                         ; This keyword
                                                            push qword [rbp - 8] ; __this
                                                      ; RHS
                                                         push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      push qword [rax + 8*rdx] ; lhs.rhs
                                                ; OFFSET
                                                   ; Identifier - int i
                                                      push qword [rbp - 24]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - char[][] nData
                                                      push qword [rbp - 16]
                                                ; OFFSET
                                                   ; Identifier - int i
                                                      push qword [rbp - 24]
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov qword [rbx + 8*rdi], rdx
                                          push rdx
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 ; Repeat
jmp .__for__5
                                 ; End of For
.__endfor__5:
                     ;---------------------------------------------------
                              ; Free Operator
                                 ; RHS
                                    ; Member Accessor
                                       ; LHS
                                          ; This keyword
                                             push qword [rbp - 8] ; __this
                                       ; RHS
                                          push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       push qword [rax + 8*rdx] ; lhs.rhs
                                 ; Free pointer
                                 pop rdi   ; pointer
                                 call free ; free the pointer
                                 push rax  ; undefined return value
                              ; Statement results can be ignored
                              pop rdx
                              ; Assignment - '='
                                 ; RHS
                                    ; Identifier - char[][] nData
                                       push qword [rbp - 16]
                                 ; LHS
                                    ; Member Accessor Assignment
                                       ; LHS
                                          ; This keyword
                                             push qword [rbp - 8] ; __this
                                       ; RHS
                                          push qword [.__field____main____Vector__char__1____data] ; 
                                       pop rdi ; rhs
                                       pop rbx ; lhs
                                 pop rdx ; rhs value
                                 mov qword [rbx + 8*rdi], rdx
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                  ;------------------------------------------------------
                        jmp .__endif__3 ; jump to end of condition chain
                        ; End of if
.__endif__3:
            ;------------------------------------------------------------
                     ; Assignment - '='
                        ; RHS
                           ; Identifier - char[] val
                              push qword [rbp - -24]
                        ; LHS
                           ; Subscript assignment
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; This keyword
                                          push qword [rbp - 8] ; __this
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Member Accessor
                                    ; LHS
                                       ; This keyword
                                          push qword [rbp - 8] ; __this
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              pop rdi ; __offset
                              pop rbx ; __pointer
                        pop rdx ; rhs value
                        mov qword [rbx + 8*rdi], rdx
                        push rdx
                     ; Statement results can be ignored
                     pop rdx
                     ; Pre-Increment - int
                        ; RHS
                           ; Member Accessor
                              ; LHS
                                 ; This keyword
                                    push qword [rbp - 8] ; __this
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                              pop rdx ; rhs
                              pop rax ; lhs
                              push qword [rax + 8*rdx] ; lhs.rhs
                        pop rdx
                        ; LHS
                           ; Member Accessor Assignment
                              ; LHS
                                 ; This keyword
                                    push qword [rbp - 8] ; __this
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____size] ; size
                              pop rdi ; rhs
                              pop rbx ; lhs
                              mov rax, qword [rbx + 8*rdi]
                              add rax, 1
                              mov qword [rbx + 8*rdi], rax
                        push rax ; push result
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               ; Function Epilogue
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
            .__end__method____main____Vector__char__1____pushBack__char__1:
            ; End Method Declaration - .__method____main____Vector__char__1____pushBack__char__1
   ;---------------------------------------------------------------------

   ;---------------------------------------------------------------------
            ; Method Declaration - Vector<:char[]:>::popBack() -> char[]
            jmp .__end__method____main____Vector__char__1____popBack
            .__method____main____Vector__char__1____popBack:
               ; Function Header:
               ; Setup stack frame
                  push rbp
                  mov rbp, rsp
                  ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                     sub rsp, 16 ; space for local variables (16-byte aligned)
                     ; [rbp - 8] - this - Reference to 'this' object instance
                     mov rdx, qword [rbp + 16] ; param passed 'this'
                     mov qword [rbp - 8], rdx ; save this to a local
               ; Parameters
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
                     ; Return
                        ; Subscript
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; This keyword
                                       push qword [rbp - 8] ; __this
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; OFFSET
                              ; Pre-Decrement - int
                                 ; RHS
                                    ; Member Accessor
                                       ; LHS
                                          ; This keyword
                                             push qword [rbp - 8] ; __this
                                       ; RHS
                                          push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       push qword [rax + 8*rdx] ; lhs.rhs
                                 pop rdx
                                 ; LHS
                                    ; Member Accessor Assignment
                                       ; LHS
                                          ; This keyword
                                             push qword [rbp - 8] ; __this
                                       ; RHS
                                          push qword [.__field____main____Vector__char__1____size] ; size
                                       pop rdi ; rhs
                                       pop rbx ; lhs
                                       mov rax, qword [rbx + 8*rdi]
                                       sub rax, 1
                                       mov qword [rbx + 8*rdi], rax
                                 push rax ; push result
                           pop rdx ; __offset
                           pop rax ; __pointer
                           push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rax ; return value (char[])
                        ; Clean up stack and return
                        mov rsp, rbp ; remove local vars + unpopped pushes
                        pop rbp
                        ret
         ;---------------------------------------------------------------
               ; Function Epilogue
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
            .__end__method____main____Vector__char__1____popBack:
            ; End Method Declaration - .__method____main____Vector__char__1____popBack
   ;---------------------------------------------------------------------

   ;---------------------------------------------------------------------
            ; Method Declaration - Vector<:char[]:>::clear() -> void
            jmp .__end__method____main____Vector__char__1____clear
            .__method____main____Vector__char__1____clear:
               ; Function Header:
               ; Setup stack frame
                  push rbp
                  mov rbp, rsp
                  ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                     sub rsp, 16 ; space for local variables (16-byte aligned)
                     ; [rbp - 8] - this - Reference to 'this' object instance
                     mov rdx, qword [rbp + 16] ; param passed 'this'
                     mov qword [rbp - 8], rdx ; save this to a local
               ; Parameters
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; While-Loop
.__while__9:
                        ; Condition
                           ; Greater Than
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; This keyword
                                          push qword [rbp - 8] ; __this
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; RHS
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setg al
                              movzx eax, al
                              push rax
                           pop rax ; __cond
                           cmp rax, 0 ; __cond
                           je .__endwhile__9
                        ; Body
                           ; Method Call - Vector<:char[]:>::popBack() -> char[]
                              ; Make space for 0 arg(s) and object parameter
                              sub rsp, 8
                              ; LHS
                                 ; This keyword
                                    push qword [rbp - 8] ; __this
                                 pop rax ; object parameter
                                 mov qword [rsp + 0], rax ; place as first parameter
                              ; RHS
                              ; Arguments
                              call .__method____main____Vector__char__1____popBack
                              ; Remove args
                              add rsp, 8
                              ; Push return value
                              push rax
                           ; Statement results can be ignored
                           pop rdx
                        jmp .__while__9
                        ; End of While
.__endwhile__9:
            ;------------------------------------------------------------
         ;---------------------------------------------------------------
               ; Function Epilogue
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
            .__end__method____main____Vector__char__1____clear:
            ; End Method Declaration - .__method____main____Vector__char__1____clear
   ;---------------------------------------------------------------------

   ;---------------------------------------------------------------------
            ; Method Declaration - Vector<:char[]:>::get(int) -> char[]
            jmp .__end__method____main____Vector__char__1____get__int
            .__method____main____Vector__char__1____get__int:
               ; Function Header:
               ; Setup stack frame
                  push rbp
                  mov rbp, rsp
                  ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                     sub rsp, 16 ; space for local variables (16-byte aligned)
                     ; [rbp - 8] - this - Reference to 'this' object instance
                     mov rdx, qword [rbp + 16] ; param passed 'this'
                     mov qword [rbp - 8], rdx ; save this to a local
               ; Parameters
                  ; Param: index [rbp + 24] (__main____Vector__char__1__get__index)
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
                     ; Return
                        ; Subscript
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; This keyword
                                       push qword [rbp - 8] ; __this
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; OFFSET
                              ; Identifier - int index
                                 push qword [rbp - -24]
                           pop rdx ; __offset
                           pop rax ; __pointer
                           push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rax ; return value (char[])
                        ; Clean up stack and return
                        mov rsp, rbp ; remove local vars + unpopped pushes
                        pop rbp
                        ret
         ;---------------------------------------------------------------
               ; Function Epilogue
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
            .__end__method____main____Vector__char__1____get__int:
            ; End Method Declaration - .__method____main____Vector__char__1____get__int
   ;---------------------------------------------------------------------

   ;---------------------------------------------------------------------
            ; Method Declaration - Vector<:char[]:>::set(int, char[]) -> void
            jmp .__end__method____main____Vector__char__1____set__int__char__1
            .__method____main____Vector__char__1____set__int__char__1:
               ; Function Header:
               ; Setup stack frame
                  push rbp
                  mov rbp, rsp
                  ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
                     sub rsp, 16 ; space for local variables (16-byte aligned)
                     ; [rbp - 8] - this - Reference to 'this' object instance
                     mov rdx, qword [rbp + 16] ; param passed 'this'
                     mov qword [rbp - 8], rdx ; save this to a local
               ; Parameters
                  ; Param: index [rbp + 24] (__main____Vector__char__1__set__index)
                  ; Param: value [rbp + 32] (__main____Vector__char__1__set__value)
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
                     ; Assignment - '='
                        ; RHS
                           ; Identifier - char[] value
                              push qword [rbp - -32]
                        ; LHS
                           ; Subscript assignment
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; This keyword
                                          push qword [rbp - 8] ; __this
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int index
                                    push qword [rbp - -24]
                              pop rdi ; __offset
                              pop rbx ; __pointer
                        pop rdx ; rhs value
                        mov qword [rbx + 8*rdi], rdx
                        push rdx
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               ; Function Epilogue
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
            .__end__method____main____Vector__char__1____set__int__char__1:
            ; End Method Declaration - .__method____main____Vector__char__1____set__int__char__1
   ;---------------------------------------------------------------------

.__endclass____main____Vector__char__1:
         ; End Class Declaration - __main____Vector__char__1
; ========================================================================

         ; End Class Template - 
; ==============================================================================

; ==============================================================================
         ; Function Template - 
         ; Instances:
         ; End Function Template - 
; ==============================================================================

; ==============================================================================
         ; Function Template - 
         ; Instances:
         ; End Function Template - 
; ==============================================================================

; ==============================================================================
         ; Function Declaration - strlen(char[]) -> int
         ; Skip over function declaration
         jmp .__end____main____strlen__char__1
.__main____strlen__char__1:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 16
         ; Parameters
            ; Param: str [rbp + 16]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - int size (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Equal
                     ; LHS
                        ; Identifier - char[] str
                           push qword [rbp - -16]
                     ; RHS
                        ; Null Literal
                           push 0
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     sete al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__13 ; jump to end
               ; Body
                  ; Return
                     ; Negative - int
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx
                        ; val = 0 - val
                        mov rax, 0
                        sub rax, rdx
                        push rax ; push result
                     pop rax ; return value (int)
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__13 ; jump to end of condition chain
               ; End of if
.__endif__13:
   ;---------------------------------------------------------------------
            ; Assignment - '='
               ; RHS
                  ; Int Literal
                     mov rax, 0
                     push rax
               ; LHS
                  ; Variable Declaration - size
                     mov rax, qword [rbp - 8]  ; __main__strlen__block__12__size
               pop rdx ; rhs value
               mov qword [rbp - 8], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; While-Loop
.__while__14:
               ; Condition
                  ; Not Equal
                     ; LHS
                        ; Subscript
                           ; LHS
                              ; Identifier - char[] str
                                 push qword [rbp - -16]
                           ; OFFSET
                              ; Post-Increment
                                 mov rax, qword [rbp - 8]
                                 add qword [rbp - 8], 1
                                 push rax
                           pop rdx ; __offset
                           pop rax ; __pointer
                           mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                           movzx rax, al ; zero extend because we need to push 64bit to stack
                           push rax ; push char onto stack
                     ; RHS
                        ; Char Literal
                           push 0 ; \0
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setne al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endwhile__14
               ; Body
               jmp .__while__14
               ; End of While
.__endwhile__14:
   ;---------------------------------------------------------------------
            ; Return
               ; Subtraction - int, int
                  ; LHS
                     ; Identifier - int size
                        push qword [rbp - 8]
                  ; RHS
                     ; Int Literal
                        mov rax, 1
                        push rax
                  pop rdx ; rhs
                  pop rax ; lhs
                  sub rax, rdx
                  push rax
               pop rax ; return value (int)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____strlen__char__1:
         ; End Function Declaration - strlen(char[]) -> int
; ==============================================================================

; ==============================================================================
         ; Function Declaration - strcmp(char[], char[]) -> int
         ; Skip over function declaration
         jmp .__end____main____strcmp__char__1__char__1
.__main____strcmp__char__1__char__1:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 32
         ; Parameters
            ; Param: a [rbp + 16]
            ; Param: b [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - int asize (<unset-scope-name>)
            ; [rbp - 16] - int bsize (<unset-scope-name>)
            ; [rbp - 24] - int i (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
            ; Assignment - '='
               ; RHS
                  ; Function Call - strlen(char[]) -> int
                     ; Make space for 1 arg(s)
                     sub rsp, 8
                     ; Arguments
                        ; Eval arg0
                           ; Identifier - char[] a
                              push qword [rbp - -16]
                        ; Move arg0's result to reverse order position on stack
                        pop rax
                        mov qword [rsp + 0], rax
                     ; Call strlen(char[])
                     call .__main____strlen__char__1
                     ; Remove args
                     add rsp, 8
                     ; Push return value
                     push rax
               ; LHS
                  ; Variable Declaration - asize
                     mov rax, qword [rbp - 8]  ; __main__strcmp__block__15__asize
               pop rdx ; rhs value
               mov qword [rbp - 8], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
            ; Assignment - '='
               ; RHS
                  ; Function Call - strlen(char[]) -> int
                     ; Make space for 1 arg(s)
                     sub rsp, 8
                     ; Arguments
                        ; Eval arg0
                           ; Identifier - char[] b
                              push qword [rbp - -24]
                        ; Move arg0's result to reverse order position on stack
                        pop rax
                        mov qword [rsp + 0], rax
                     ; Call strlen(char[])
                     call .__main____strlen__char__1
                     ; Remove args
                     add rsp, 8
                     ; Push return value
                     push rax
               ; LHS
                  ; Variable Declaration - bsize
                     mov rax, qword [rbp - 16]  ; __main__strcmp__block__15__bsize
               pop rdx ; rhs value
               mov qword [rbp - 16], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Not Equal
                     ; LHS
                        ; Identifier - int asize
                           push qword [rbp - 8]
                     ; RHS
                        ; Identifier - int bsize
                           push qword [rbp - 16]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setne al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__16 ; jump to end
               ; Body
                  ; Return
                     ; Int Literal
                        mov rax, 0
                        push rax
                     pop rax ; return value (int)
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__16 ; jump to end of condition chain
               ; End of if
.__endif__16:
   ;---------------------------------------------------------------------
   ;---------------------------------------------------------------------
            ; For-Loop
            ; Init
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - i
                        mov rax, qword [rbp - 24]  ; __main__strcmp__block__15__for__17__i
                  pop rdx ; rhs value
                  mov qword [rbp - 24], rdx
                  push rdx
               ; Loop init result can be discarded
               pop rax
            jmp .__forcond__17
.__for__17:
               ; Update
                  ; Pre-Increment - int
                     ; RHS
                        ; Identifier - int i
                           push qword [rbp - 24]
                     pop rdx
                     add qword [rbp - 24], 1
                     mov rax, qword [rbp - 24]
                     push rax ; push result
                  ; Loop update result can be discarded
                  pop rax
.__forcond__17:
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - int i
                           push qword [rbp - 24]
                     ; RHS
                        ; Identifier - int asize
                           push qword [rbp - 8]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endfor__17
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; If-Statement
                        ; Condition
                           ; Not Equal
                              ; LHS
                                 ; Subscript
                                    ; LHS
                                       ; Identifier - char[] a
                                          push qword [rbp - -16]
                                    ; OFFSET
                                       ; Identifier - int i
                                          push qword [rbp - 24]
                                    pop rdx ; __offset
                                    pop rax ; __pointer
                                    mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                    movzx rax, al ; zero extend because we need to push 64bit to stack
                                    push rax ; push char onto stack
                              ; RHS
                                 ; Subscript
                                    ; LHS
                                       ; Identifier - char[] b
                                          push qword [rbp - -24]
                                    ; OFFSET
                                       ; Identifier - int i
                                          push qword [rbp - 24]
                                    pop rdx ; __offset
                                    pop rax ; __pointer
                                    mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                    movzx rax, al ; zero extend because we need to push 64bit to stack
                                    push rax ; push char onto stack
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setne al
                              movzx eax, al
                              push rax
                           pop rdx ; __cond
                           cmp rdx, 0 ; ensure condition is true
                           je .__endif__19 ; jump to end
                        ; Body
                  ;------------------------------------------------------
                           ; Code Block
                              ; Return
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                                 pop rax ; return value (int)
                                 ; Clean up stack and return
                                 mov rsp, rbp ; remove local vars + unpopped pushes
                                 pop rbp
                                 ret
                  ;------------------------------------------------------
                        jmp .__endif__19 ; jump to end of condition chain
                        ; End of if
.__endif__19:
            ;------------------------------------------------------------
         ;---------------------------------------------------------------
               ; Repeat
jmp .__for__17
               ; End of For
.__endfor__17:
   ;---------------------------------------------------------------------
            ; Return
               ; Int Literal
                  mov rax, 1
                  push rax
               pop rax ; return value (int)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____strcmp__char__1__char__1:
         ; End Function Declaration - strcmp(char[], char[]) -> int
; ==============================================================================

; ==============================================================================
         ; Function Declaration - substr(char[], int, int) -> char[]
         ; Skip over function declaration
         jmp .__end____main____substr__char__1__int__int
.__main____substr__char__1__int__int:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 16
         ; Parameters
            ; Param: a [rbp + 16]
            ; Param: start [rbp + 24]
            ; Param: end [rbp + 32]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - char[] res (<unset-scope-name>)
            ; [rbp - 16] - int i (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
            ; Assignment - '='
               ; RHS
                  ; Array Allocator
                     ; Addition - int, int
                        ; LHS
                           ; Subtraction - int, int
                              ; LHS
                                 ; Identifier - int end
                                    push qword [rbp - -32]
                              ; RHS
                                 ; Identifier - int start
                                    push qword [rbp - -24]
                              pop rdx ; rhs
                              pop rax ; lhs
                              sub rax, rdx
                              push rax
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                     pop rdx ; num elements for dimension[0]
                     mov rdi, rdx ; num bytes to allocate (1 byte per element)
                     call malloc ; allocates edi bytes on heap and stores pointer in rax
                     push rax ; __ptr
               ; LHS
                  ; Variable Declaration - res
                     mov rax, qword [rbp - 8]  ; __main__substr__block__21__res
               pop rdx ; rhs value
               mov qword [rbp - 8], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; For-Loop
            ; Init
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - i
                        mov rax, qword [rbp - 16]  ; __main__substr__block__21__for__22__i
                  pop rdx ; rhs value
                  mov qword [rbp - 16], rdx
                  push rdx
               ; Loop init result can be discarded
               pop rax
            jmp .__forcond__22
.__for__22:
               ; Update
                  ; Pre-Increment - int
                     ; RHS
                        ; Identifier - int i
                           push qword [rbp - 16]
                     pop rdx
                     add qword [rbp - 16], 1
                     mov rax, qword [rbp - 16]
                     push rax ; push result
                  ; Loop update result can be discarded
                  pop rax
.__forcond__22:
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - int i
                           push qword [rbp - 16]
                     ; RHS
                        ; Subtraction - int, int
                           ; LHS
                              ; Identifier - int end
                                 push qword [rbp - -32]
                           ; RHS
                              ; Identifier - int start
                                 push qword [rbp - -24]
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endfor__22
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
                     ; Assignment - '='
                        ; RHS
                           ; Subscript
                              ; LHS
                                 ; Identifier - char[] a
                                    push qword [rbp - -16]
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int i
                                          push qword [rbp - 16]
                                    ; RHS
                                       ; Identifier - int start
                                          push qword [rbp - -24]
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                              movzx rax, al ; zero extend because we need to push 64bit to stack
                              push rax ; push char onto stack
                        ; LHS
                           ; Subscript assignment
                              ; LHS
                                 ; Identifier - char[] res
                                    push qword [rbp - 8]
                              ; OFFSET
                                 ; Identifier - int i
                                    push qword [rbp - 16]
                              pop rdi ; __offset
                              pop rbx ; __pointer
                        pop rdx ; rhs value
                        mov byte [rbx + rdi], dl
                        push rdx
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               ; Repeat
jmp .__for__22
               ; End of For
.__endfor__22:
   ;---------------------------------------------------------------------
            ; Assignment - '='
               ; RHS
                  ; Char Literal
                     push 0 ; \0
               ; LHS
                  ; Subscript assignment
                     ; LHS
                        ; Identifier - char[] res
                           push qword [rbp - 8]
                     ; OFFSET
                        ; Subtraction - int, int
                           ; LHS
                              ; Identifier - int end
                                 push qword [rbp - -32]
                           ; RHS
                              ; Identifier - int start
                                 push qword [rbp - -24]
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     pop rdi ; __offset
                     pop rbx ; __pointer
               pop rdx ; rhs value
               mov byte [rbx + rdi], dl
               push rdx
            ; Statement results can be ignored
            pop rdx
            ; Return
               ; Identifier - char[] res
                  push qword [rbp - 8]
               pop rax ; return value (char[])
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____substr__char__1__int__int:
         ; End Function Declaration - substr(char[], int, int) -> char[]
; ==============================================================================

; ==============================================================================
         ; Function Declaration - first_index_of(char[], char) -> int
         ; Skip over function declaration
         jmp .__end____main____first_index_of__char__1__char
.__main____first_index_of__char__1__char:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 16
         ; Parameters
            ; Param: arr [rbp + 16]
            ; Param: c [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - int size (<unset-scope-name>)
            ; [rbp - 16] - int i (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
            ; Assignment - '='
               ; RHS
                  ; Function Call - strlen(char[]) -> int
                     ; Make space for 1 arg(s)
                     sub rsp, 8
                     ; Arguments
                        ; Eval arg0
                           ; Identifier - char[] arr
                              push qword [rbp - -16]
                        ; Move arg0's result to reverse order position on stack
                        pop rax
                        mov qword [rsp + 0], rax
                     ; Call strlen(char[])
                     call .__main____strlen__char__1
                     ; Remove args
                     add rsp, 8
                     ; Push return value
                     push rax
               ; LHS
                  ; Variable Declaration - size
                     mov rax, qword [rbp - 8]  ; __main__first_index_of__block__24__size
               pop rdx ; rhs value
               mov qword [rbp - 8], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; For-Loop
            ; Init
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - i
                        mov rax, qword [rbp - 16]  ; __main__first_index_of__block__24__for__25__i
                  pop rdx ; rhs value
                  mov qword [rbp - 16], rdx
                  push rdx
               ; Loop init result can be discarded
               pop rax
            jmp .__forcond__25
.__for__25:
               ; Update
                  ; Pre-Increment - int
                     ; RHS
                        ; Identifier - int i
                           push qword [rbp - 16]
                     pop rdx
                     add qword [rbp - 16], 1
                     mov rax, qword [rbp - 16]
                     push rax ; push result
                  ; Loop update result can be discarded
                  pop rax
.__forcond__25:
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - int i
                           push qword [rbp - 16]
                     ; RHS
                        ; Identifier - int size
                           push qword [rbp - 8]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endfor__25
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; If-Statement
                        ; Condition
                           ; Equal
                              ; LHS
                                 ; Subscript
                                    ; LHS
                                       ; Identifier - char[] arr
                                          push qword [rbp - -16]
                                    ; OFFSET
                                       ; Identifier - int i
                                          push qword [rbp - 16]
                                    pop rdx ; __offset
                                    pop rax ; __pointer
                                    mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                    movzx rax, al ; zero extend because we need to push 64bit to stack
                                    push rax ; push char onto stack
                              ; RHS
                                 ; Identifier - char c
                                    mov al, byte [rbp - -24]
                                    movzx rax, al
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              sete al
                              movzx eax, al
                              push rax
                           pop rdx ; __cond
                           cmp rdx, 0 ; ensure condition is true
                           je .__endif__27 ; jump to end
                        ; Body
                           ; Return
                              ; Identifier - int i
                                 push qword [rbp - 16]
                              pop rax ; return value (int)
                              ; Clean up stack and return
                              mov rsp, rbp ; remove local vars + unpopped pushes
                              pop rbp
                              ret
                        jmp .__endif__27 ; jump to end of condition chain
                        ; End of if
.__endif__27:
            ;------------------------------------------------------------
         ;---------------------------------------------------------------
               ; Repeat
jmp .__for__25
               ; End of For
.__endfor__25:
   ;---------------------------------------------------------------------
            ; Return
               ; Negative - int
                  ; RHS
                     ; Int Literal
                        mov rax, 1
                        push rax
                  pop rdx
                  ; val = 0 - val
                  mov rax, 0
                  sub rax, rdx
                  push rax ; push result
               pop rax ; return value (int)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____first_index_of__char__1__char:
         ; End Function Declaration - first_index_of(char[], char) -> int
; ==============================================================================

; ==============================================================================
         ; Function Declaration - split(char[], char) -> Vector<:char[]:>
         ; Skip over function declaration
         jmp .__end____main____split__char__1__char
.__main____split__char__1__char:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 64
         ; Parameters
            ; Param: str [rbp + 16]
            ; Param: delim [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - Vector<:char[]:> tokens (<unset-scope-name>)
            ; [rbp - 16] - int size (<unset-scope-name>)
            ; [rbp - 24] - int i (<unset-scope-name>)
            ; [rbp - 32] - int j (<unset-scope-name>)
            ; [rbp - 40] - int count (<unset-scope-name>)
            ; [rbp - 48] - int k (<unset-scope-name>)
            ; [rbp - 56] - int k (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
            ; Assignment - '='
               ; RHS
                  ; Constructor Call - Vector<:char[]:>::Vector() -> Vector<:char[]:>
                     ; Make space for 0 arg(s)
                     sub rsp, 0
                     ; Arguments
                     ; Call Vector<:char[]:>::Vector()
                     call .__ctor____main____Vector__char__1____Vector
                     ; Remove args
                     add rsp, 0
                     ; Push return value
                     push rax
               ; LHS
                  ; Variable Declaration - tokens
                     mov rax, qword [rbp - 8]  ; __main__split__block__28__tokens
               pop rdx ; rhs value
               mov qword [rbp - 8], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
            ; Assignment - '='
               ; RHS
                  ; Function Call - strlen(char[]) -> int
                     ; Make space for 1 arg(s)
                     sub rsp, 8
                     ; Arguments
                        ; Eval arg0
                           ; Identifier - char[] str
                              push qword [rbp - -16]
                        ; Move arg0's result to reverse order position on stack
                        pop rax
                        mov qword [rsp + 0], rax
                     ; Call strlen(char[])
                     call .__main____strlen__char__1
                     ; Remove args
                     add rsp, 8
                     ; Push return value
                     push rax
               ; LHS
                  ; Variable Declaration - size
                     mov rax, qword [rbp - 16]  ; __main__split__block__28__size
               pop rdx ; rhs value
               mov qword [rbp - 16], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
            ; Assignment - '='
               ; RHS
                  ; Int Literal
                     mov rax, 0
                     push rax
               ; LHS
                  ; Variable Declaration - i
                     mov rax, qword [rbp - 24]  ; __main__split__block__28__i
               pop rdx ; rhs value
               mov qword [rbp - 24], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
            ; Assignment - '='
               ; RHS
                  ; Int Literal
                     mov rax, 0
                     push rax
               ; LHS
                  ; Variable Declaration - j
                     mov rax, qword [rbp - 32]  ; __main__split__block__28__j
               pop rdx ; rhs value
               mov qword [rbp - 32], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; While-Loop
.__while__29:
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - int i
                           push qword [rbp - 24]
                     ; RHS
                        ; Identifier - int size
                           push qword [rbp - 16]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endwhile__29
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; If-Statement
                        ; Condition
                           ; Not Equal
                              ; LHS
                                 ; Subscript
                                    ; LHS
                                       ; Identifier - char[] str
                                          push qword [rbp - -16]
                                    ; OFFSET
                                       ; Identifier - int i
                                          push qword [rbp - 24]
                                    pop rdx ; __offset
                                    pop rax ; __pointer
                                    mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                    movzx rax, al ; zero extend because we need to push 64bit to stack
                                    push rax ; push char onto stack
                              ; RHS
                                 ; Identifier - char delim
                                    mov al, byte [rbp - -24]
                                    movzx rax, al
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setne al
                              movzx eax, al
                              push rax
                           pop rdx ; __cond
                           cmp rdx, 0 ; ensure condition is true
                           je .__endif__31 ; jump to end
                        ; Body
                  ;------------------------------------------------------
                           ; Code Block
                              ; Assignment - '='
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 0
                                       push rax
                                 ; LHS
                                    ; Variable Declaration - count
                                       mov rax, qword [rbp - 40]  ; __main__split__block__28__while__29__block__30__if__31__block__32__count
                                 pop rdx ; rhs value
                                 mov qword [rbp - 40], rdx
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                              ; Assignment - '='
                                 ; RHS
                                    ; Identifier - int i
                                       push qword [rbp - 24]
                                 ; LHS
                                    ; Variable Declaration - k
                                       mov rax, qword [rbp - 48]  ; __main__split__block__28__while__29__block__30__if__31__block__32__k
                                 pop rdx ; rhs value
                                 mov qword [rbp - 48], rdx
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; While-Loop
.__while__33:
                                 ; Condition
                                    ; Less Than
                                       ; LHS
                                          ; Identifier - int k
                                             push qword [rbp - 48]
                                       ; RHS
                                          ; Identifier - int size
                                             push qword [rbp - 16]
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       setl al
                                       movzx eax, al
                                       push rax
                                    pop rax ; __cond
                                    cmp rax, 0 ; __cond
                                    je .__endwhile__33
                                 ; Body
                           ;---------------------------------------------
                                    ; If-Statement
                                       ; Condition
                                          ; Not Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Identifier - char[] str
                                                         push qword [rbp - -16]
                                                   ; OFFSET
                                                      ; Post-Increment
                                                         mov rax, qword [rbp - 48]
                                                         add qword [rbp - 48], 1
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Identifier - char delim
                                                   mov al, byte [rbp - -24]
                                                   movzx rax, al
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             setne al
                                             movzx eax, al
                                             push rax
                                          pop rdx ; __cond
                                          cmp rdx, 0 ; ensure condition is true
                                          je .__else__34 ; jump to else
                                       ; Body
                                          ; Pre-Increment - int
                                             ; RHS
                                                ; Identifier - int count
                                                   push qword [rbp - 40]
                                             pop rdx
                                             add qword [rbp - 40], 1
                                             mov rax, qword [rbp - 40]
                                             push rax ; push result
                                          ; Statement results can be ignored
                                          pop rdx
                                       jmp .__endif__34 ; jump to end of condition chain
                              ;------------------------------------------
                                       ; Else-Statement
.__else__34:
                                       ; Break out of __while__33
                                       jmp .__endwhile__33
                              ;------------------------------------------
                                       ; End of if
.__endif__34:
                           ;---------------------------------------------
                                 jmp .__while__33
                                 ; End of While
.__endwhile__33:
                     ;---------------------------------------------------
                              ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
                                 ; Make space for 1 arg(s) and object parameter
                                 sub rsp, 16
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> tokens
                                       push qword [rbp - 8]
                                    pop rax ; object parameter
                                    mov qword [rsp + 0], rax ; place as first parameter
                                 ; RHS
                                 ; Arguments
                                    ; Eval arg0
                                       ; Array Allocator
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int count
                                                   push qword [rbp - 40]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                          pop rdx ; num elements for dimension[0]
                                          mov rdi, rdx ; num bytes to allocate (1 byte per element)
                                          call malloc ; allocates edi bytes on heap and stores pointer in rax
                                          push rax ; __ptr
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 8], rax
                                 call .__method____main____Vector__char__1____pushBack__char__1
                                 ; Remove args
                                 add rsp, 16
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; For-Loop
                              ; Init
                                 ; Assignment - '='
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 0
                                          push rax
                                    ; LHS
                                       ; Variable Declaration - k
                                          mov rax, qword [rbp - 56]  ; __main__split__block__28__while__29__block__30__if__31__block__32__for__35__k
                                    pop rdx ; rhs value
                                    mov qword [rbp - 56], rdx
                                    push rdx
                                 ; Loop init result can be discarded
                                 pop rax
                              jmp .__forcond__35
.__for__35:
                                 ; Update
                                    ; Pre-Increment - int
                                       ; RHS
                                          ; Identifier - int k
                                             push qword [rbp - 56]
                                       pop rdx
                                       add qword [rbp - 56], 1
                                       mov rax, qword [rbp - 56]
                                       push rax ; push result
                                    ; Loop update result can be discarded
                                    pop rax
.__forcond__35:
                                 ; Condition
                                    ; Less Than
                                       ; LHS
                                          ; Identifier - int k
                                             push qword [rbp - 56]
                                       ; RHS
                                          ; Identifier - int count
                                             push qword [rbp - 40]
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       setl al
                                       movzx eax, al
                                       push rax
                                    pop rax ; __cond
                                    cmp rax, 0 ; __cond
                                    je .__endfor__35
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '='
                                          ; RHS
                                             ; Subscript
                                                ; LHS
                                                   ; Identifier - char[] str
                                                      push qword [rbp - -16]
                                                ; OFFSET
                                                   ; Post-Increment
                                                      mov rax, qword [rbp - 24]
                                                      add qword [rbp - 24], 1
                                                      push rax
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> tokens
                                                                  push qword [rbp - 8]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int j
                                                            push qword [rbp - 32]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Identifier - int k
                                                      push qword [rbp - 56]
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov byte [rbx + rdi], dl
                                          push rdx
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 ; Repeat
jmp .__for__35
                                 ; End of For
.__endfor__35:
                     ;---------------------------------------------------
                              ; Assignment - '='
                                 ; RHS
                                    ; Char Literal
                                       push 0 ; \0
                                 ; LHS
                                    ; Subscript assignment
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Member Accessor
                                                   ; LHS
                                                      ; Identifier - Vector<:char[]:> tokens
                                                         push qword [rbp - 8]
                                                   ; RHS
                                                      push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   push qword [rax + 8*rdx] ; lhs.rhs
                                             ; OFFSET
                                                ; Identifier - int j
                                                   push qword [rbp - 32]
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                       ; OFFSET
                                          ; Identifier - int count
                                             push qword [rbp - 40]
                                       pop rdi ; __offset
                                       pop rbx ; __pointer
                                 pop rdx ; rhs value
                                 mov byte [rbx + rdi], dl
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                              ; Pre-Increment - int
                                 ; RHS
                                    ; Identifier - int j
                                       push qword [rbp - 32]
                                 pop rdx
                                 add qword [rbp - 32], 1
                                 mov rax, qword [rbp - 32]
                                 push rax ; push result
                              ; Statement results can be ignored
                              pop rdx
                  ;------------------------------------------------------
                        jmp .__endif__31 ; jump to end of condition chain
                        ; End of if
.__endif__31:
            ;------------------------------------------------------------
                     ; Pre-Increment - int
                        ; RHS
                           ; Identifier - int i
                              push qword [rbp - 24]
                        pop rdx
                        add qword [rbp - 24], 1
                        mov rax, qword [rbp - 24]
                        push rax ; push result
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               jmp .__while__29
               ; End of While
.__endwhile__29:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - Vector<:char[]:> tokens
                  push qword [rbp - 8]
               pop rax ; return value (Vector<:char[]:>)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____split__char__1__char:
         ; End Function Declaration - split(char[], char) -> Vector<:char[]:>
; ==============================================================================

; ==============================================================================
         ; Function Declaration - max(int, int) -> int
         ; Skip over function declaration
         jmp .__end____main____max__int__int
.__main____max__int__int:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 0
         ; Parameters
            ; Param: a [rbp + 16]
            ; Param: b [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int a
                           push qword [rbp - -16]
                     ; RHS
                        ; Identifier - int b
                           push qword [rbp - -24]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__38 ; jump to end
               ; Body
                  ; Return
                     ; Identifier - int a
                        push qword [rbp - -16]
                     pop rax ; return value (int)
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__38 ; jump to end of condition chain
               ; End of if
.__endif__38:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - int b
                  push qword [rbp - -24]
               pop rax ; return value (int)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____max__int__int:
         ; End Function Declaration - max(int, int) -> int
; ==============================================================================

; ==============================================================================
         ; Function Declaration - max(float, float) -> float
         ; Skip over function declaration
         jmp .__end____main____max__float__float
.__main____max__float__float:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 0
         ; Parameters
            ; Param: a [rbp + 16]
            ; Param: b [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - float a
                           push qword [rbp - -16]
                     ; RHS
                        ; Identifier - float b
                           push qword [rbp - -24]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__40 ; jump to end
               ; Body
                  ; Return
                     ; Identifier - float a
                        push qword [rbp - -16]
                     pop rax ; return value (float)
                     movq xmm0, rax ; xmm0 is used for float return values
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__40 ; jump to end of condition chain
               ; End of if
.__endif__40:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - float b
                  push qword [rbp - -24]
               pop rax ; return value (float)
               movq xmm0, rax ; xmm0 is used for float return values
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____max__float__float:
         ; End Function Declaration - max(float, float) -> float
; ==============================================================================

; ==============================================================================
         ; Function Declaration - min(int, int) -> int
         ; Skip over function declaration
         jmp .__end____main____min__int__int
.__main____min__int__int:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 0
         ; Parameters
            ; Param: a [rbp + 16]
            ; Param: b [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Less Than or Equal to
                     ; LHS
                        ; Identifier - int a
                           push qword [rbp - -16]
                     ; RHS
                        ; Identifier - int b
                           push qword [rbp - -24]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setle al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__42 ; jump to end
               ; Body
                  ; Return
                     ; Identifier - int a
                        push qword [rbp - -16]
                     pop rax ; return value (int)
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__42 ; jump to end of condition chain
               ; End of if
.__endif__42:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - int b
                  push qword [rbp - -24]
               pop rax ; return value (int)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____min__int__int:
         ; End Function Declaration - min(int, int) -> int
; ==============================================================================

; ==============================================================================
         ; Function Declaration - min(float, float) -> float
         ; Skip over function declaration
         jmp .__end____main____min__float__float
.__main____min__float__float:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 0
         ; Parameters
            ; Param: a [rbp + 16]
            ; Param: b [rbp + 24]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Less Than or Equal to
                     ; LHS
                        ; Identifier - float a
                           push qword [rbp - -16]
                     ; RHS
                        ; Identifier - float b
                           push qword [rbp - -24]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setle al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__44 ; jump to end
               ; Body
                  ; Return
                     ; Identifier - float a
                        push qword [rbp - -16]
                     pop rax ; return value (float)
                     movq xmm0, rax ; xmm0 is used for float return values
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__44 ; jump to end of condition chain
               ; End of if
.__endif__44:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - float b
                  push qword [rbp - -24]
               pop rax ; return value (float)
               movq xmm0, rax ; xmm0 is used for float return values
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____min__float__float:
         ; End Function Declaration - min(float, float) -> float
; ==============================================================================

; ==============================================================================
         ; Function Declaration - abs(int) -> int
         ; Skip over function declaration
         jmp .__end____main____abs__int
.__main____abs__int:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 0
         ; Parameters
            ; Param: v [rbp + 16]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - int v
                           push qword [rbp - -16]
                     ; RHS
                        ; Int Literal
                           mov rax, 0
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__46 ; jump to end
               ; Body
                  ; Return
                     ; Negative - int
                        ; RHS
                           ; Identifier - int v
                              push qword [rbp - -16]
                        pop rdx
                        ; val = 0 - val
                        mov rax, 0
                        sub rax, rdx
                        push rax ; push result
                     pop rax ; return value (int)
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__46 ; jump to end of condition chain
               ; End of if
.__endif__46:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - int v
                  push qword [rbp - -16]
               pop rax ; return value (int)
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____abs__int:
         ; End Function Declaration - abs(int) -> int
; ==============================================================================

; ==============================================================================
         ; Function Declaration - abs(float) -> float
         ; Skip over function declaration
         jmp .__end____main____abs__float
.__main____abs__float:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 0
         ; Parameters
            ; Param: v [rbp + 16]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - float v
                           push qword [rbp - -16]
                     ; RHS
                        ; Float Literal
                           mov rax, qword [.float0] ; 0.0
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__48 ; jump to end
               ; Body
                  ; Return
                     ; Negative - float
                        ; RHS
                           ; Identifier - float v
                              push qword [rbp - -16]
                        pop rdx
                        ; Implemented as multiplying by -1.0
                        movsd xmm1, qword [__builtin__neg] ; -1.0
                        movq xmm0, rdx
                        mulsd xmm0, xmm1 ; v = v * -1.0
                        movq rax, xmm0
                        push rax ; push result
                     pop rax ; return value (float)
                     movq xmm0, rax ; xmm0 is used for float return values
                     ; Clean up stack and return
                     mov rsp, rbp ; remove local vars + unpopped pushes
                     pop rbp
                     ret
               jmp .__endif__48 ; jump to end of condition chain
               ; End of if
.__endif__48:
   ;---------------------------------------------------------------------
            ; Return
               ; Identifier - float v
                  push qword [rbp - -16]
               pop rax ; return value (float)
               movq xmm0, rax ; xmm0 is used for float return values
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____abs__float:
         ; End Function Declaration - abs(float) -> float
; ==============================================================================

; ==============================================================================
         ; Class Template - 
         ; Instances:
         ; End Class Template - 
; ==============================================================================

; ==============================================================================
         ; Class Template - 
         ; Instances:
         ; End Class Template - 
; ==============================================================================

; ==============================================================================
         ; Function Template - 
         ; Instances:
         ; End Function Template - 
; ==============================================================================

; ==============================================================================
         ; Function Template - 
         ; Instances:
         ; End Function Template - 
; ==============================================================================

         ; Assignment - '='
         ; RHS
         ; Function Call - input() -> char[]
            ; Make space for 0 arg(s)
            sub rsp, 0
            ; Arguments
            ; Call input()
            call __builtin__input
            ; Remove args
            add rsp, 0
            ; Push return value
            push rax
         ; LHS
         ; Variable Declaration - line
            mov rax, qword [rbp - 8]  ; __main__line
         pop rdx ; rhs value
         mov qword [rbp - 8], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Constructor Call - Vector<:char[]:>::Vector() -> Vector<:char[]:>
            ; Make space for 0 arg(s)
            sub rsp, 0
            ; Arguments
            ; Call Vector<:char[]:>::Vector()
            call .__ctor____main____Vector__char__1____Vector
            ; Remove args
            add rsp, 0
            ; Push return value
            push rax
         ; LHS
         ; Variable Declaration - lines
            mov rax, qword [rbp - 16]  ; __main__lines
         pop rdx ; rhs value
         mov qword [rbp - 16], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
;------------------------------------------------------------------------------
         ; While-Loop
.__while__49:
         ; Condition
         ; Not Equal
            ; LHS
               ; Identifier - char[] line
                  push qword [rbp - 8]
            ; RHS
               ; Null Literal
                  push 0
            pop rdx ; rhs
            pop rax ; lhs
            cmp rax, rdx
            setne al
            movzx eax, al
            push rax
         pop rax ; __cond
         cmp rax, 0 ; __cond
         je .__endwhile__49
         ; Body
;------------------------------------------------------------------------
         ; Code Block
            ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
               ; Make space for 1 arg(s) and object parameter
               sub rsp, 16
               ; LHS
                  ; Identifier - Vector<:char[]:> lines
                     push qword [rbp - 16]
                  pop rax ; object parameter
                  mov qword [rsp + 0], rax ; place as first parameter
               ; RHS
               ; Arguments
                  ; Eval arg0
                     ; Identifier - char[] line
                        push qword [rbp - 8]
                  ; Move arg0's result to reverse order position on stack
                  pop rax
                  mov qword [rsp + 8], rax
               call .__method____main____Vector__char__1____pushBack__char__1
               ; Remove args
               add rsp, 16
               ; Push return value
               push rax
            ; Statement results can be ignored
            pop rdx
            ; Assignment - '='
               ; RHS
                  ; Function Call - input() -> char[]
                     ; Make space for 0 arg(s)
                     sub rsp, 0
                     ; Arguments
                     ; Call input()
                     call __builtin__input
                     ; Remove args
                     add rsp, 0
                     ; Push return value
                     push rax
               pop rdx ; rhs value
               mov qword [rbp - 8], rdx
               push rdx
            ; Statement results can be ignored
            pop rdx
;------------------------------------------------------------------------
         jmp .__while__49
         ; End of While
.__endwhile__49:
;------------------------------------------------------------------------------
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - x
            mov rax, qword [rbp - 24]  ; __main__x
         pop rdx ; rhs value
         mov qword [rbp - 24], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - y
            mov rax, qword [rbp - 32]  ; __main__y
         pop rdx ; rhs value
         mov qword [rbp - 32], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Constructor Call - Vector<:char[]:>::Vector() -> Vector<:char[]:>
            ; Make space for 0 arg(s)
            sub rsp, 0
            ; Arguments
            ; Call Vector<:char[]:>::Vector()
            call .__ctor____main____Vector__char__1____Vector
            ; Remove args
            add rsp, 0
            ; Push return value
            push rax
         ; LHS
         ; Variable Declaration - board
            mov rax, qword [rbp - 40]  ; __main__board
         pop rdx ; rhs value
         mov qword [rbp - 40], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
         ; Make space for 1 arg(s) and object parameter
         sub rsp, 16
         ; LHS
         ; Identifier - Vector<:char[]:> board
            push qword [rbp - 40]
         pop rax ; object parameter
         mov qword [rsp + 0], rax ; place as first parameter
         ; RHS
         ; Arguments
         ; Eval arg0
            ; String Literal
               ; "+-------+"
               mov rax, .str0
               push rax
         ; Move arg0's result to reverse order position on stack
         pop rax
         mov qword [rsp + 8], rax
         call .__method____main____Vector__char__1____pushBack__char__1
         ; Remove args
         add rsp, 16
         ; Push return value
         push rax
         ; Statement results can be ignored
         pop rdx
         ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
         ; Make space for 1 arg(s) and object parameter
         sub rsp, 16
         ; LHS
         ; Identifier - Vector<:char[]:> board
            push qword [rbp - 40]
         pop rax ; object parameter
         mov qword [rsp + 0], rax ; place as first parameter
         ; RHS
         ; Arguments
         ; Eval arg0
            ; String Literal
               ; "|.......|"
               mov rax, .str1
               push rax
         ; Move arg0's result to reverse order position on stack
         pop rax
         mov qword [rsp + 8], rax
         call .__method____main____Vector__char__1____pushBack__char__1
         ; Remove args
         add rsp, 16
         ; Push return value
         push rax
         ; Statement results can be ignored
         pop rdx
         ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
         ; Make space for 1 arg(s) and object parameter
         sub rsp, 16
         ; LHS
         ; Identifier - Vector<:char[]:> board
            push qword [rbp - 40]
         pop rax ; object parameter
         mov qword [rsp + 0], rax ; place as first parameter
         ; RHS
         ; Arguments
         ; Eval arg0
            ; String Literal
               ; "|.......|"
               mov rax, .str2
               push rax
         ; Move arg0's result to reverse order position on stack
         pop rax
         mov qword [rsp + 8], rax
         call .__method____main____Vector__char__1____pushBack__char__1
         ; Remove args
         add rsp, 16
         ; Push return value
         push rax
         ; Statement results can be ignored
         pop rdx
         ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
         ; Make space for 1 arg(s) and object parameter
         sub rsp, 16
         ; LHS
         ; Identifier - Vector<:char[]:> board
            push qword [rbp - 40]
         pop rax ; object parameter
         mov qword [rsp + 0], rax ; place as first parameter
         ; RHS
         ; Arguments
         ; Eval arg0
            ; String Literal
               ; "|.......|"
               mov rax, .str3
               push rax
         ; Move arg0's result to reverse order position on stack
         pop rax
         mov qword [rsp + 8], rax
         call .__method____main____Vector__char__1____pushBack__char__1
         ; Remove args
         add rsp, 16
         ; Push return value
         push rax
         ; Statement results can be ignored
         pop rdx
; ==============================================================================
         ; Function Declaration - printboard(Vector<:char[]:>) -> void
         ; Skip over function declaration
         jmp .__end____main____printboard__Vector__tparam0__char
.__main____printboard__Vector__tparam0__char:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 16
         ; Parameters
            ; Param: board [rbp + 16]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - int i (<unset-scope-name>)
            ; [rbp - 16] - int j (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
            ; Return
               mov rax, 0
               ; Clean up stack and return
               mov rsp, rbp ; remove local vars + unpopped pushes
               pop rbp
               ret
   ;---------------------------------------------------------------------
            ; For-Loop
            ; Init
               ; Assignment - '='
                  ; RHS
                     ; Subtraction - int, int
                        ; LHS
                           ; Member Accessor
                              ; LHS
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - -16]
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                              pop rdx ; rhs
                              pop rax ; lhs
                              push qword [rax + 8*rdx] ; lhs.rhs
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        sub rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - i
                        mov rax, qword [rbp - 8]  ; __main__printboard__block__51__for__52__i
                  pop rdx ; rhs value
                  mov qword [rbp - 8], rdx
                  push rdx
               ; Loop init result can be discarded
               pop rax
            jmp .__forcond__52
.__for__52:
               ; Update
                  ; Pre-Decrement - int
                     ; RHS
                        ; Identifier - int i
                           push qword [rbp - 8]
                     pop rdx
                     sub qword [rbp - 8], 1
                     mov rax, qword [rbp - 8]
                     push rax ; push result
                  ; Loop update result can be discarded
                  pop rax
.__forcond__52:
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int i
                           push qword [rbp - 8]
                     ; RHS
                        ; Int Literal
                           mov rax, 0
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endfor__52
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; For-Loop
                     ; Init
                        ; Assignment - '='
                           ; RHS
                              ; Int Literal
                                 mov rax, 0
                                 push rax
                           ; LHS
                              ; Variable Declaration - j
                                 mov rax, qword [rbp - 16]  ; __main__printboard__block__51__for__52__block__53__for__54__j
                           pop rdx ; rhs value
                           mov qword [rbp - 16], rdx
                           push rdx
                        ; Loop init result can be discarded
                        pop rax
                     jmp .__forcond__54
.__for__54:
                        ; Update
                           ; Pre-Increment - int
                              ; RHS
                                 ; Identifier - int j
                                    push qword [rbp - 16]
                              pop rdx
                              add qword [rbp - 16], 1
                              mov rax, qword [rbp - 16]
                              push rax ; push result
                           ; Loop update result can be discarded
                           pop rax
.__forcond__54:
                        ; Condition
                           ; Less Than
                              ; LHS
                                 ; Identifier - int j
                                    push qword [rbp - 16]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 9
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setl al
                              movzx eax, al
                              push rax
                           pop rax ; __cond
                           cmp rax, 0 ; __cond
                           je .__endfor__54
                        ; Body
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - print(char) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; Subscript
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Member Accessor
                                                      ; LHS
                                                         ; Identifier - Vector<:char[]:> board
                                                            push qword [rbp - -16]
                                                      ; RHS
                                                         push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      push qword [rax + 8*rdx] ; lhs.rhs
                                                ; OFFSET
                                                   ; Identifier - int i
                                                      push qword [rbp - 8]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                          ; OFFSET
                                             ; Identifier - int j
                                                push qword [rbp - 16]
                                          pop rdx ; __offset
                                          pop rax ; __pointer
                                          mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                          movzx rax, al ; zero extend because we need to push 64bit to stack
                                          push rax ; push char onto stack
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call print(char)
                                 call __builtin__print__char
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                  ;------------------------------------------------------
                        ; Repeat
jmp .__for__54
                        ; End of For
.__endfor__54:
            ;------------------------------------------------------------
                     ; Function Call - println() -> void
                        ; Make space for 0 arg(s)
                        sub rsp, 0
                        ; Arguments
                        ; Call println()
                        call __builtin__println
                        ; Remove args
                        add rsp, 0
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               ; Repeat
jmp .__for__52
               ; End of For
.__endfor__52:
   ;---------------------------------------------------------------------
            ; Function Call - println() -> void
               ; Make space for 0 arg(s)
               sub rsp, 0
               ; Arguments
               ; Call println()
               call __builtin__println
               ; Remove args
               add rsp, 0
               ; Push return value
               push rax
            ; Statement results can be ignored
            pop rdx
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____printboard__Vector__tparam0__char:
         ; End Function Declaration - printboard(Vector<:char[]:>) -> void
; ==============================================================================

; ==============================================================================
         ; Function Declaration - printboard2(Vector<:char[]:>) -> void
         ; Skip over function declaration
         jmp .__end____main____printboard2__Vector__tparam0__char
.__main____printboard2__Vector__tparam0__char:
         ; Function Header:
         ; Setup stack frame
            push rbp
            mov rbp, rsp
            sub rsp, 16
         ; Parameters
            ; Param: board [rbp + 16]
         ; Local Variables - Each variable is currently 64-bit (sorry not sorry)
            ; [rbp - 8] - int i (<unset-scope-name>)
            ; [rbp - 16] - int j (<unset-scope-name>)

         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; For-Loop
            ; Init
               ; Assignment - '='
                  ; RHS
                     ; Subtraction - int, int
                        ; LHS
                           ; Member Accessor
                              ; LHS
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - -16]
                              ; RHS
                                 push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                              pop rdx ; rhs
                              pop rax ; lhs
                              push qword [rax + 8*rdx] ; lhs.rhs
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        sub rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - i
                        mov rax, qword [rbp - 8]  ; __main__printboard2__block__56__for__57__i
                  pop rdx ; rhs value
                  mov qword [rbp - 8], rdx
                  push rdx
               ; Loop init result can be discarded
               pop rax
            jmp .__forcond__57
.__for__57:
               ; Update
                  ; Pre-Decrement - int
                     ; RHS
                        ; Identifier - int i
                           push qword [rbp - 8]
                     pop rdx
                     sub qword [rbp - 8], 1
                     mov rax, qword [rbp - 8]
                     push rax ; push result
                  ; Loop update result can be discarded
                  pop rax
.__forcond__57:
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int i
                           push qword [rbp - 8]
                     ; RHS
                        ; Int Literal
                           mov rax, 0
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endfor__57
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; For-Loop
                     ; Init
                        ; Assignment - '='
                           ; RHS
                              ; Int Literal
                                 mov rax, 0
                                 push rax
                           ; LHS
                              ; Variable Declaration - j
                                 mov rax, qword [rbp - 16]  ; __main__printboard2__block__56__for__57__block__58__for__59__j
                           pop rdx ; rhs value
                           mov qword [rbp - 16], rdx
                           push rdx
                        ; Loop init result can be discarded
                        pop rax
                     jmp .__forcond__59
.__for__59:
                        ; Update
                           ; Pre-Increment - int
                              ; RHS
                                 ; Identifier - int j
                                    push qword [rbp - 16]
                              pop rdx
                              add qword [rbp - 16], 1
                              mov rax, qword [rbp - 16]
                              push rax ; push result
                           ; Loop update result can be discarded
                           pop rax
.__forcond__59:
                        ; Condition
                           ; Less Than
                              ; LHS
                                 ; Identifier - int j
                                    push qword [rbp - 16]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 9
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setl al
                              movzx eax, al
                              push rax
                           pop rax ; __cond
                           cmp rax, 0 ; __cond
                           je .__endfor__59
                        ; Body
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - print(char) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; Subscript
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Member Accessor
                                                      ; LHS
                                                         ; Identifier - Vector<:char[]:> board
                                                            push qword [rbp - -16]
                                                      ; RHS
                                                         push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      push qword [rax + 8*rdx] ; lhs.rhs
                                                ; OFFSET
                                                   ; Identifier - int i
                                                      push qword [rbp - 8]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                          ; OFFSET
                                             ; Identifier - int j
                                                push qword [rbp - 16]
                                          pop rdx ; __offset
                                          pop rax ; __pointer
                                          mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                          movzx rax, al ; zero extend because we need to push 64bit to stack
                                          push rax ; push char onto stack
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call print(char)
                                 call __builtin__print__char
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                  ;------------------------------------------------------
                        ; Repeat
jmp .__for__59
                        ; End of For
.__endfor__59:
            ;------------------------------------------------------------
                     ; Function Call - println(int) -> void
                        ; Make space for 1 arg(s)
                        sub rsp, 8
                        ; Arguments
                           ; Eval arg0
                              ; Identifier - int i
                                 push qword [rbp - 8]
                           ; Move arg0's result to reverse order position on stack
                           pop rax
                           mov qword [rsp + 0], rax
                        ; Call println(int)
                        call __builtin__println__int
                        ; Remove args
                        add rsp, 8
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
         ;---------------------------------------------------------------
               ; Repeat
jmp .__for__57
               ; End of For
.__endfor__57:
   ;---------------------------------------------------------------------
            ; Function Call - println() -> void
               ; Make space for 0 arg(s)
               sub rsp, 0
               ; Arguments
               ; Call println()
               call __builtin__println
               ; Remove args
               add rsp, 0
               ; Push return value
               push rax
            ; Statement results can be ignored
            pop rdx
;------------------------------------------------------------------------
         ; Function Epilogue
         mov rsp, rbp ; remove local vars + unpopped pushes
         pop rbp
         ret
.__end____main____printboard2__Vector__tparam0__char:
         ; End Function Declaration - printboard2(Vector<:char[]:>) -> void
; ==============================================================================

         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - shift_index
            mov rax, qword [rbp - 48]  ; __main__shift_index
         pop rdx ; rhs value
         mov qword [rbp - 48], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Subtraction - int, int
            ; LHS
               ; Function Call - strlen(char[]) -> int
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Subscript
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> lines
                                       push qword [rbp - 16]
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; OFFSET
                              ; Int Literal
                                 mov rax, 0
                                 push rax
                           pop rdx ; __offset
                           pop rax ; __pointer
                           push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call strlen(char[])
                  call .__main____strlen__char__1
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
            ; RHS
               ; Int Literal
                  mov rax, 1
                  push rax
            pop rdx ; rhs
            pop rax ; lhs
            sub rax, rdx
            push rax
         ; LHS
         ; Variable Declaration - shift_max
            mov rax, qword [rbp - 56]  ; __main__shift_max
         pop rdx ; rhs value
         mov qword [rbp - 56], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - iter
            mov rax, qword [rbp - 64]  ; __main__iter
         pop rdx ; rhs value
         mov qword [rbp - 64], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - num_rocks
            mov rax, qword [rbp - 72]  ; __main__num_rocks
         pop rdx ; rhs value
         mov qword [rbp - 72], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 2022
            push rax
         ; LHS
         ; Variable Declaration - max_rocks
            mov rax, qword [rbp - 80]  ; __main__max_rocks
         pop rdx ; rhs value
         mov qword [rbp - 80], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - height
            mov rax, qword [rbp - 88]  ; __main__height
         pop rdx ; rhs value
         mov qword [rbp - 88], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
;------------------------------------------------------------------------------
         ; While-Loop
.__while__61:
         ; Condition
         ; Int Literal
            mov rax, 1
            push rax
         pop rax ; __cond
         cmp rax, 0 ; __cond
         je .__endwhile__61
         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; Code Block
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - rock_height
                        mov rax, qword [rbp - 96]  ; __main__while__61__block__62__block__63__rock_height
                  pop rdx ; rhs value
                  mov qword [rbp - 96], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; For-Loop
               ; Init
                  ; Assignment - '='
                     ; RHS
                        ; Subtraction - int, int
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> board
                                       push qword [rbp - 40]
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     ; LHS
                        ; Variable Declaration - i
                           mov rax, qword [rbp - 104]  ; __main__while__61__block__62__block__63__for__64__i
                     pop rdx ; rhs value
                     mov qword [rbp - 104], rdx
                     push rdx
                  ; Loop init result can be discarded
                  pop rax
               jmp .__forcond__64
.__for__64:
                  ; Update
                     ; Pre-Decrement - int
                        ; RHS
                           ; Identifier - int i
                              push qword [rbp - 104]
                        pop rdx
                        sub qword [rbp - 104], 1
                        mov rax, qword [rbp - 104]
                        push rax ; push result
                     ; Loop update result can be discarded
                     pop rax
.__forcond__64:
                  ; Condition
                     ; Greater Than or Equal to
                        ; LHS
                           ; Identifier - int i
                              push qword [rbp - 104]
                        ; RHS
                           ; Int Literal
                              mov rax, 0
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setge al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endfor__64
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
               ;---------------------------------------------------------
                        ; For-Loop
                        ; Init
                           ; Assignment - '='
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              ; LHS
                                 ; Variable Declaration - j
                                    mov rax, qword [rbp - 112]  ; __main__while__61__block__62__block__63__for__64__block__65__for__66__j
                              pop rdx ; rhs value
                              mov qword [rbp - 112], rdx
                              push rdx
                           ; Loop init result can be discarded
                           pop rax
                        jmp .__forcond__66
.__for__66:
                           ; Update
                              ; Pre-Increment - int
                                 ; RHS
                                    ; Identifier - int j
                                       push qword [rbp - 112]
                                 pop rdx
                                 add qword [rbp - 112], 1
                                 mov rax, qword [rbp - 112]
                                 push rax ; push result
                              ; Loop update result can be discarded
                              pop rax
.__forcond__66:
                           ; Condition
                              ; Less Than
                                 ; LHS
                                    ; Identifier - int j
                                       push qword [rbp - 112]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 8
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setl al
                                 movzx eax, al
                                 push rax
                              pop rax ; __cond
                              cmp rax, 0 ; __cond
                              je .__endfor__66
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; Not Equal
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> board
                                                                  push qword [rbp - 40]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int i
                                                            push qword [rbp - 104]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Identifier - int j
                                                      push qword [rbp - 112]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; RHS
                                             ; Char Literal
                                                push '.'
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          cmp rax, rdx
                                          setne al
                                          movzx eax, al
                                          push rax
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__68 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '='
                                             ; RHS
                                                ; Identifier - int i
                                                   push qword [rbp - 104]
                                             pop rdx ; rhs value
                                             mov qword [rbp - 96], rdx
                                             push rdx
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Break out of __for__66
                                          jmp .__endfor__66
                              ;------------------------------------------
                                    jmp .__endif__68 ; jump to end of condition chain
                                    ; End of if
.__endif__68:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           ; Repeat
jmp .__for__66
                           ; End of For
.__endfor__66:
               ;---------------------------------------------------------
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Not Equal
                                 ; LHS
                                    ; Identifier - int rock_height
                                       push qword [rbp - 96]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 0
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setne al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__70 ; jump to end
                           ; Body
                              ; Break out of __for__64
                              jmp .__endfor__64
                           jmp .__endif__70 ; jump to end of condition chain
                           ; End of if
.__endif__70:
               ;---------------------------------------------------------
            ;------------------------------------------------------------
                  ; Repeat
jmp .__for__64
                  ; End of For
.__endfor__64:
      ;------------------------------------------------------------------
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 1
                        push rax
                  ; LHS
                     ; Variable Declaration - shape_height
                        mov rax, qword [rbp - 120]  ; __main__while__61__block__62__block__63__shape_height
                  pop rdx ; rhs value
                  mov qword [rbp - 120], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Char Literal
                        push '0'
                  ; LHS
                     ; Variable Declaration - rock_char
                        mov rax, qword [rbp - 128]  ; __main__while__61__block__62__block__63__rock_char
                  pop rdx ; rhs value
                  mov byte [rbp - 128], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 96]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int shape_height
                              push qword [rbp - 120]
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - desired_height
                        mov rax, qword [rbp - 136]  ; __main__while__61__block__62__block__63__desired_height
                  pop rdx ; rhs value
                  mov qword [rbp - 136], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__71:
                  ; Condition
                     ; Less Than
                        ; LHS
                           ; Subtraction - int, int
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              sub rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int desired_height
                              push qword [rbp - 136]
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setl al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__71
                  ; Body
                     ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
                        ; Make space for 1 arg(s) and object parameter
                        sub rsp, 16
                        ; LHS
                           ; Identifier - Vector<:char[]:> board
                              push qword [rbp - 40]
                           pop rax ; object parameter
                           mov qword [rsp + 0], rax ; place as first parameter
                        ; RHS
                        ; Arguments
                           ; Eval arg0
                              ; String Literal
                                 ; "|.......|"
                                 mov rax, .str4
                                 push rax
                           ; Move arg0's result to reverse order position on stack
                           pop rax
                           mov qword [rsp + 8], rax
                        call .__method____main____Vector__char__1____pushBack__char__1
                        ; Remove args
                        add rsp, 16
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
                  jmp .__while__71
                  ; End of While
.__endwhile__71:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        ; Int Literal
                           mov rax, 4
                           push rax
                        ; Int Literal
                           mov rax, 5
                           push rax
                        ; Int Literal
                           mov rax, 6
                           push rax
                        mov edi, 32 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 3
                        mov qword [rax + 24], rdx ; arr[3] = rdx
                        pop rdx ; get array element 2
                        mov qword [rax + 16], rdx ; arr[2] = rdx
                        pop rdx ; get array element 1
                        mov qword [rax + 8], rdx ; arr[1] = rdx
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx0
                        mov rax, qword [rbp - 144]  ; __main__while__61__block__62__block__63__posx0
                  pop rdx ; rhs value
                  mov qword [rbp - 144], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 96]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posy
                        mov rax, qword [rbp - 152]  ; __main__while__61__block__62__block__63__posy
                  pop rdx ; rhs value
                  mov qword [rbp - 152], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 128]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 152]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 144]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 128]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 152]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 144]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 128]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 152]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 144]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 2
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 128]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 152]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 144]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__72:
                  ; Condition
                     ; Int Literal
                        mov rax, 1
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__72
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
                        ; Function Call - println(int) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - int shift_index
                                    push qword [rbp - 48]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call println(int)
                           call __builtin__println__int
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 3
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Equal
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Member Accessor
                                                   ; LHS
                                                      ; Identifier - Vector<:char[]:> lines
                                                         push qword [rbp - 16]
                                                   ; RHS
                                                      push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   push qword [rax + 8*rdx] ; lhs.rhs
                                             ; OFFSET
                                                ; Int Literal
                                                   mov rax, 0
                                                   push rax
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                       ; OFFSET
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                       movzx rax, al ; zero extend because we need to push 64bit to stack
                                       push rax ; push char onto stack
                                 ; RHS
                                    ; Char Literal
                                       push '<'
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 sete al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__else__74 ; jump to else
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "shift left"
                                             mov rax, .str5
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; Equal
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> board
                                                                  push qword [rbp - 40]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int posy
                                                            push qword [rbp - 152]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Subtraction - int, int
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Identifier - int[] posx0
                                                                  push qword [rbp - 144]
                                                            ; OFFSET
                                                               ; Int Literal
                                                                  mov rax, 0
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                      ; RHS
                                                         ; Int Literal
                                                            mov rax, 1
                                                            push rax
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      sub rax, rdx
                                                      push rax
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; RHS
                                             ; Char Literal
                                                push '.'
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          cmp rax, rdx
                                          sete al
                                          movzx eax, al
                                          push rax
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__76 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 144]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 144]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 1
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 144]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 2
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 144]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 3
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                              ;------------------------------------------
                                    jmp .__endif__76 ; jump to end of condition chain
                                    ; End of if
.__endif__76:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           jmp .__endif__74 ; jump to end of condition chain
                  ;------------------------------------------------------
                           ; Else-Statement
.__else__74:
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - println(char[]) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; String Literal
                                          ; "shift right"
                                          mov rax, .str6
                                          push rax
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call println(char[])
                                 call __builtin__println__char__1
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; If-Statement
                                 ; Condition
                                    ; Equal
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Member Accessor
                                                         ; LHS
                                                            ; Identifier - Vector<:char[]:> board
                                                               push qword [rbp - 40]
                                                         ; RHS
                                                            push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         push qword [rax + 8*rdx] ; lhs.rhs
                                                   ; OFFSET
                                                      ; Identifier - int posy
                                                         push qword [rbp - 152]
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                             ; OFFSET
                                                ; Addition - int, int
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Identifier - int[] posx0
                                                               push qword [rbp - 144]
                                                         ; OFFSET
                                                            ; Int Literal
                                                               mov rax, 3
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; RHS
                                                      ; Int Literal
                                                         mov rax, 1
                                                         push rax
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   add rax, rdx
                                                   push rax
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                             movzx rax, al ; zero extend because we need to push 64bit to stack
                                             push rax ; push char onto stack
                                       ; RHS
                                          ; Char Literal
                                             push '.'
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       sete al
                                       movzx eax, al
                                       push rax
                                    pop rdx ; __cond
                                    cmp rdx, 0 ; ensure condition is true
                                    je .__endif__79 ; jump to end
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 144]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 144]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 1
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 144]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 2
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 144]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 3
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 jmp .__endif__79 ; jump to end of condition chain
                                 ; End of if
.__endif__79:
                     ;---------------------------------------------------
                  ;------------------------------------------------------
                  ;------------------------------------------------------
                           ; End of if
.__endif__74:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 3
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Mod - int, int
                                 ; LHS
                                    ; Addition - int, int
                                       ; LHS
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       add rax, rdx
                                       push rax
                                 ; RHS
                                    ; Identifier - int shift_max
                                       push qword [rbp - 56]
                                 pop rdx
                                 pop rax
                                 mov rsi, rdx
                                 xor rdx, rdx
                                 cqo ; sign extend rax into rdx (specifically for 64bit -> 128bit)
                                 idiv rsi ; perform rdx:rax (128bit) / rsi (64bit)
                                 mov rax, rdx ; move remainder to rax
                                 push rax
                           pop rdx ; rhs value
                           mov qword [rbp - 48], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; OR
                                 ; Eval LHS
                                    ; OR
                                       ; Eval LHS
                                          ; OR
                                             ; Eval LHS
                                                ; OR
                                                   ; Eval LHS
                                                      ; Not Equal
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Member Accessor
                                                                           ; LHS
                                                                              ; Identifier - Vector<:char[]:> board
                                                                                 push qword [rbp - 40]
                                                                           ; RHS
                                                                              push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           push qword [rax + 8*rdx] ; lhs.rhs
                                                                     ; OFFSET
                                                                        ; Subtraction - int, int
                                                                           ; LHS
                                                                              ; Identifier - int posy
                                                                                 push qword [rbp - 152]
                                                                           ; RHS
                                                                              ; Int Literal
                                                                                 mov rax, 1
                                                                                 push rax
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           sub rax, rdx
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; OFFSET
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx0
                                                                           push qword [rbp - 144]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 0
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                               movzx rax, al ; zero extend because we need to push 64bit to stack
                                                               push rax ; push char onto stack
                                                         ; RHS
                                                            ; Char Literal
                                                               push '.'
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         cmp rax, rdx
                                                         setne al
                                                         movzx eax, al
                                                         push rax
                                                   ; Check if we need to short-circuit
                                                      pop rax ; __lhs
                                                      test rax, rax
                                                      jne .OR_SHORT_CIRCUIT82
                                                   ; Eval RHS
                                                      ; Not Equal
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Member Accessor
                                                                           ; LHS
                                                                              ; Identifier - Vector<:char[]:> board
                                                                                 push qword [rbp - 40]
                                                                           ; RHS
                                                                              push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           push qword [rax + 8*rdx] ; lhs.rhs
                                                                     ; OFFSET
                                                                        ; Subtraction - int, int
                                                                           ; LHS
                                                                              ; Identifier - int posy
                                                                                 push qword [rbp - 152]
                                                                           ; RHS
                                                                              ; Int Literal
                                                                                 mov rax, 1
                                                                                 push rax
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           sub rax, rdx
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; OFFSET
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx0
                                                                           push qword [rbp - 144]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                               movzx rax, al ; zero extend because we need to push 64bit to stack
                                                               push rax ; push char onto stack
                                                         ; RHS
                                                            ; Char Literal
                                                               push '.'
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         cmp rax, rdx
                                                         setne al
                                                         movzx eax, al
                                                         push rax
                                                   ; Check rhs
                                                      pop rax ; __rhs
                                                      test rax, rax
                                                      je .OR_FALSE82 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT82:
                                                   mov rax, 1 ; result = True
                                                   jmp .OR_END82 ; skip false state
                                                   ; False state
.OR_FALSE82:
                                                   mov rax, 0 ; result = False
.OR_END82:
                                                   movzx eax, al
                                                   push rax ; result
                                             ; Check if we need to short-circuit
                                                pop rax ; __lhs
                                                test rax, rax
                                                jne .OR_SHORT_CIRCUIT83
                                             ; Eval RHS
                                                ; Not Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Subtraction - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 152]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     sub rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx0
                                                                     push qword [rbp - 144]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 2
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   setne al
                                                   movzx eax, al
                                                   push rax
                                             ; Check rhs
                                                pop rax ; __rhs
                                                test rax, rax
                                                je .OR_FALSE83 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT83:
                                             mov rax, 1 ; result = True
                                             jmp .OR_END83 ; skip false state
                                             ; False state
.OR_FALSE83:
                                             mov rax, 0 ; result = False
.OR_END83:
                                             movzx eax, al
                                             push rax ; result
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          jne .OR_SHORT_CIRCUIT84
                                       ; Eval RHS
                                          ; Not Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Subtraction - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 152]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               sub rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Subscript
                                                         ; LHS
                                                            ; Identifier - int[] posx0
                                                               push qword [rbp - 144]
                                                         ; OFFSET
                                                            ; Int Literal
                                                               mov rax, 3
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             setne al
                                             movzx eax, al
                                             push rax
                                       ; Check rhs
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .OR_FALSE84 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT84:
                                       mov rax, 1 ; result = True
                                       jmp .OR_END84 ; skip false state
                                       ; False state
.OR_FALSE84:
                                       mov rax, 0 ; result = False
.OR_END84:
                                       movzx eax, al
                                       push rax ; result
                                 ; Check if we need to short-circuit
                                    pop rax ; __lhs
                                    test rax, rax
                                    jne .OR_SHORT_CIRCUIT85
                                 ; Eval RHS
                                    ; Equal
                                       ; LHS
                                          ; Subtraction - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 152]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             sub rax, rdx
                                             push rax
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       sete al
                                       movzx eax, al
                                       push rax
                                 ; Check rhs
                                    pop rax ; __rhs
                                    test rax, rax
                                    je .OR_FALSE85 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT85:
                                 mov rax, 1 ; result = True
                                 jmp .OR_END85 ; skip false state
                                 ; False state
.OR_FALSE85:
                                 mov rax, 0 ; result = False
.OR_END85:
                                 movzx eax, al
                                 push rax ; result
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__81 ; jump to end
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "rock at rest"
                                             mov rax, .str7
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                                 ; Break out of __while__72
                                 jmp .__endwhile__72
                     ;---------------------------------------------------
                           jmp .__endif__81 ; jump to end of condition chain
                           ; End of if
.__endif__81:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 3
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '-='
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs value
                           mov rax, qword [rbp - 152] ; read lhs value
                           sub rax, rdx      ; lhs = lhs - rhs
                           mov qword [rbp - 152], rax ; write back to lhs
                           push rax          ; push result for other expressions
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 128]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 152]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 144]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 3
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
            ;------------------------------------------------------------
                  jmp .__while__72
                  ; End of While
.__endwhile__72:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
   ;---------------------------------------------------------------------
            ; Assignment - '+='
               ; RHS
                  ; Int Literal
                     mov rax, 1
                     push rax
               pop rdx ; rhs value
               mov rax, qword [rbp - 72] ; read lhs value
               add rax, rdx      ; add lhs and rhs
               mov qword [rbp - 72], rax ; write back to lhs
               push rax          ; push result for other expressions
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int num_rocks
                           push qword [rbp - 72]
                     ; RHS
                        ; Identifier - int max_rocks
                           push qword [rbp - 80]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__87 ; jump to end
               ; Body
                  ; Break out of __while__61
                  jmp .__endwhile__61
               jmp .__endif__87 ; jump to end of condition chain
               ; End of if
.__endif__87:
   ;---------------------------------------------------------------------
   ;---------------------------------------------------------------------
            ; Code Block
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - rock_height
                        mov rax, qword [rbp - 160]  ; __main__while__61__block__62__block__88__rock_height
                  pop rdx ; rhs value
                  mov qword [rbp - 160], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; For-Loop
               ; Init
                  ; Assignment - '='
                     ; RHS
                        ; Subtraction - int, int
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> board
                                       push qword [rbp - 40]
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     ; LHS
                        ; Variable Declaration - i
                           mov rax, qword [rbp - 168]  ; __main__while__61__block__62__block__88__for__89__i
                     pop rdx ; rhs value
                     mov qword [rbp - 168], rdx
                     push rdx
                  ; Loop init result can be discarded
                  pop rax
               jmp .__forcond__89
.__for__89:
                  ; Update
                     ; Pre-Decrement - int
                        ; RHS
                           ; Identifier - int i
                              push qword [rbp - 168]
                        pop rdx
                        sub qword [rbp - 168], 1
                        mov rax, qword [rbp - 168]
                        push rax ; push result
                     ; Loop update result can be discarded
                     pop rax
.__forcond__89:
                  ; Condition
                     ; Greater Than or Equal to
                        ; LHS
                           ; Identifier - int i
                              push qword [rbp - 168]
                        ; RHS
                           ; Int Literal
                              mov rax, 0
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setge al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endfor__89
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
               ;---------------------------------------------------------
                        ; For-Loop
                        ; Init
                           ; Assignment - '='
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              ; LHS
                                 ; Variable Declaration - j
                                    mov rax, qword [rbp - 176]  ; __main__while__61__block__62__block__88__for__89__block__90__for__91__j
                              pop rdx ; rhs value
                              mov qword [rbp - 176], rdx
                              push rdx
                           ; Loop init result can be discarded
                           pop rax
                        jmp .__forcond__91
.__for__91:
                           ; Update
                              ; Pre-Increment - int
                                 ; RHS
                                    ; Identifier - int j
                                       push qword [rbp - 176]
                                 pop rdx
                                 add qword [rbp - 176], 1
                                 mov rax, qword [rbp - 176]
                                 push rax ; push result
                              ; Loop update result can be discarded
                              pop rax
.__forcond__91:
                           ; Condition
                              ; Less Than
                                 ; LHS
                                    ; Identifier - int j
                                       push qword [rbp - 176]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 8
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setl al
                                 movzx eax, al
                                 push rax
                              pop rax ; __cond
                              cmp rax, 0 ; __cond
                              je .__endfor__91
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; Not Equal
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> board
                                                                  push qword [rbp - 40]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int i
                                                            push qword [rbp - 168]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Identifier - int j
                                                      push qword [rbp - 176]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; RHS
                                             ; Char Literal
                                                push '.'
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          cmp rax, rdx
                                          setne al
                                          movzx eax, al
                                          push rax
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__93 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '='
                                             ; RHS
                                                ; Identifier - int i
                                                   push qword [rbp - 168]
                                             pop rdx ; rhs value
                                             mov qword [rbp - 160], rdx
                                             push rdx
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Break out of __for__91
                                          jmp .__endfor__91
                              ;------------------------------------------
                                    jmp .__endif__93 ; jump to end of condition chain
                                    ; End of if
.__endif__93:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           ; Repeat
jmp .__for__91
                           ; End of For
.__endfor__91:
               ;---------------------------------------------------------
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Not Equal
                                 ; LHS
                                    ; Identifier - int rock_height
                                       push qword [rbp - 160]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 0
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setne al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__95 ; jump to end
                           ; Body
                              ; Break out of __for__89
                              jmp .__endfor__89
                           jmp .__endif__95 ; jump to end of condition chain
                           ; End of if
.__endif__95:
               ;---------------------------------------------------------
            ;------------------------------------------------------------
                  ; Repeat
jmp .__for__89
                  ; End of For
.__endfor__89:
      ;------------------------------------------------------------------
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 3
                        push rax
                  ; LHS
                     ; Variable Declaration - shape_height
                        mov rax, qword [rbp - 184]  ; __main__while__61__block__62__block__88__shape_height
                  pop rdx ; rhs value
                  mov qword [rbp - 184], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Char Literal
                        push '1'
                  ; LHS
                     ; Variable Declaration - rock_char
                        mov rax, qword [rbp - 192]  ; __main__while__61__block__62__block__88__rock_char
                  pop rdx ; rhs value
                  mov byte [rbp - 192], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 160]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int shape_height
                              push qword [rbp - 184]
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - desired_height
                        mov rax, qword [rbp - 200]  ; __main__while__61__block__62__block__88__desired_height
                  pop rdx ; rhs value
                  mov qword [rbp - 200], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__96:
                  ; Condition
                     ; Less Than
                        ; LHS
                           ; Subtraction - int, int
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              sub rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int desired_height
                              push qword [rbp - 200]
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setl al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__96
                  ; Body
                     ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
                        ; Make space for 1 arg(s) and object parameter
                        sub rsp, 16
                        ; LHS
                           ; Identifier - Vector<:char[]:> board
                              push qword [rbp - 40]
                           pop rax ; object parameter
                           mov qword [rsp + 0], rax ; place as first parameter
                        ; RHS
                        ; Arguments
                           ; Eval arg0
                              ; String Literal
                                 ; "|.......|"
                                 mov rax, .str8
                                 push rax
                           ; Move arg0's result to reverse order position on stack
                           pop rax
                           mov qword [rsp + 8], rax
                        call .__method____main____Vector__char__1____pushBack__char__1
                        ; Remove args
                        add rsp, 16
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
                  jmp .__while__96
                  ; End of While
.__endwhile__96:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 4
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx0
                        mov rax, qword [rbp - 208]  ; __main__while__61__block__62__block__88__posx0
                  pop rdx ; rhs value
                  mov qword [rbp - 208], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        ; Int Literal
                           mov rax, 4
                           push rax
                        ; Int Literal
                           mov rax, 5
                           push rax
                        mov edi, 24 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 2
                        mov qword [rax + 16], rdx ; arr[2] = rdx
                        pop rdx ; get array element 1
                        mov qword [rax + 8], rdx ; arr[1] = rdx
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx1
                        mov rax, qword [rbp - 216]  ; __main__while__61__block__62__block__88__posx1
                  pop rdx ; rhs value
                  mov qword [rbp - 216], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 4
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx2
                        mov rax, qword [rbp - 224]  ; __main__while__61__block__62__block__88__posx2
                  pop rdx ; rhs value
                  mov qword [rbp - 224], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 160]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posy
                        mov rax, qword [rbp - 232]  ; __main__while__61__block__62__block__88__posy
                  pop rdx ; rhs value
                  mov qword [rbp - 232], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 192]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 232]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 208]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 192]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 232]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 216]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 192]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 232]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 216]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 192]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 232]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 216]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 2
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 192]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 232]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 2
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx2
                                    push qword [rbp - 224]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__97:
                  ; Condition
                     ; Int Literal
                        mov rax, 1
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__97
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
                        ; Function Call - println(int) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - int shift_index
                                    push qword [rbp - 48]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call println(int)
                           call __builtin__println__int
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 232]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 208]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 224]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Equal
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Member Accessor
                                                   ; LHS
                                                      ; Identifier - Vector<:char[]:> lines
                                                         push qword [rbp - 16]
                                                   ; RHS
                                                      push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   push qword [rax + 8*rdx] ; lhs.rhs
                                             ; OFFSET
                                                ; Int Literal
                                                   mov rax, 0
                                                   push rax
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                       ; OFFSET
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                       movzx rax, al ; zero extend because we need to push 64bit to stack
                                       push rax ; push char onto stack
                                 ; RHS
                                    ; Char Literal
                                       push '<'
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 sete al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__else__99 ; jump to else
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "shift left"
                                             mov rax, .str9
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; AND
                                          ; Eval LHS
                                             ; AND
                                                ; Eval LHS
                                                   ; Equal
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Member Accessor
                                                                        ; LHS
                                                                           ; Identifier - Vector<:char[]:> board
                                                                              push qword [rbp - 40]
                                                                        ; RHS
                                                                           push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        push qword [rax + 8*rdx] ; lhs.rhs
                                                                  ; OFFSET
                                                                     ; Identifier - int posy
                                                                        push qword [rbp - 232]
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; OFFSET
                                                               ; Subtraction - int, int
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Identifier - int[] posx0
                                                                              push qword [rbp - 208]
                                                                        ; OFFSET
                                                                           ; Int Literal
                                                                              mov rax, 0
                                                                              push rax
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 1
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  sub rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                            movzx rax, al ; zero extend because we need to push 64bit to stack
                                                            push rax ; push char onto stack
                                                      ; RHS
                                                         ; Char Literal
                                                            push '.'
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      cmp rax, rdx
                                                      sete al
                                                      movzx eax, al
                                                      push rax
                                                ; Check if we need to short-circuit
                                                   pop rax ; __lhs
                                                   test rax, rax
                                                   je .AND_SHORT_CIRCUIT102
                                                ; Eval RHS
                                                   ; Equal
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Member Accessor
                                                                        ; LHS
                                                                           ; Identifier - Vector<:char[]:> board
                                                                              push qword [rbp - 40]
                                                                        ; RHS
                                                                           push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        push qword [rax + 8*rdx] ; lhs.rhs
                                                                  ; OFFSET
                                                                     ; Addition - int, int
                                                                        ; LHS
                                                                           ; Identifier - int posy
                                                                              push qword [rbp - 232]
                                                                        ; RHS
                                                                           ; Int Literal
                                                                              mov rax, 1
                                                                              push rax
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        add rax, rdx
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; OFFSET
                                                               ; Subtraction - int, int
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Identifier - int[] posx1
                                                                              push qword [rbp - 216]
                                                                        ; OFFSET
                                                                           ; Int Literal
                                                                              mov rax, 0
                                                                              push rax
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 1
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  sub rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                            movzx rax, al ; zero extend because we need to push 64bit to stack
                                                            push rax ; push char onto stack
                                                      ; RHS
                                                         ; Char Literal
                                                            push '.'
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      cmp rax, rdx
                                                      sete al
                                                      movzx eax, al
                                                      push rax
                                                ; Check RHS
                                                   pop rax ; __rhs
                                                   test rax, rax
                                                   je .AND_SHORT_CIRCUIT102
                                                ; Success state
                                                mov rax, 1 ; result = True
                                                jmp .AND_END102
.AND_SHORT_CIRCUIT102:
                                                mov rax, 0 ; result = False
.AND_END102:
                                                movzx eax, al
                                                push rax ; result
                                          ; Check if we need to short-circuit
                                             pop rax ; __lhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT103
                                          ; Eval RHS
                                             ; Equal
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Member Accessor
                                                                  ; LHS
                                                                     ; Identifier - Vector<:char[]:> board
                                                                        push qword [rbp - 40]
                                                                  ; RHS
                                                                     push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  push qword [rax + 8*rdx] ; lhs.rhs
                                                            ; OFFSET
                                                               ; Addition - int, int
                                                                  ; LHS
                                                                     ; Identifier - int posy
                                                                        push qword [rbp - 232]
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 2
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  add rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                      ; OFFSET
                                                         ; Subtraction - int, int
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Identifier - int[] posx2
                                                                        push qword [rbp - 224]
                                                                  ; OFFSET
                                                                     ; Int Literal
                                                                        mov rax, 0
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; RHS
                                                               ; Int Literal
                                                                  mov rax, 1
                                                                  push rax
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            sub rax, rdx
                                                            push rax
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                      movzx rax, al ; zero extend because we need to push 64bit to stack
                                                      push rax ; push char onto stack
                                                ; RHS
                                                   ; Char Literal
                                                      push '.'
                                                pop rdx ; rhs
                                                pop rax ; lhs
                                                cmp rax, rdx
                                                sete al
                                                movzx eax, al
                                                push rax
                                          ; Check RHS
                                             pop rax ; __rhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT103
                                          ; Success state
                                          mov rax, 1 ; result = True
                                          jmp .AND_END103
.AND_SHORT_CIRCUIT103:
                                          mov rax, 0 ; result = False
.AND_END103:
                                          movzx eax, al
                                          push rax ; result
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__101 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 208]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 216]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 216]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 1
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 216]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 2
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx2
                                                         push qword [rbp - 224]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                              ;------------------------------------------
                                    jmp .__endif__101 ; jump to end of condition chain
                                    ; End of if
.__endif__101:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           jmp .__endif__99 ; jump to end of condition chain
                  ;------------------------------------------------------
                           ; Else-Statement
.__else__99:
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - println(char[]) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; String Literal
                                          ; "shift right"
                                          mov rax, .str10
                                          push rax
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call println(char[])
                                 call __builtin__println__char__1
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; If-Statement
                                 ; Condition
                                    ; AND
                                       ; Eval LHS
                                          ; AND
                                             ; Eval LHS
                                                ; Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 232]
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx0
                                                                           push qword [rbp - 208]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 0
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   sete al
                                                   movzx eax, al
                                                   push rax
                                             ; Check if we need to short-circuit
                                                pop rax ; __lhs
                                                test rax, rax
                                                je .AND_SHORT_CIRCUIT107
                                             ; Eval RHS
                                                ; Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Addition - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 232]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     add rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx1
                                                                           push qword [rbp - 216]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 2
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   sete al
                                                   movzx eax, al
                                                   push rax
                                             ; Check RHS
                                                pop rax ; __rhs
                                                test rax, rax
                                                je .AND_SHORT_CIRCUIT107
                                             ; Success state
                                             mov rax, 1 ; result = True
                                             jmp .AND_END107
.AND_SHORT_CIRCUIT107:
                                             mov rax, 0 ; result = False
.AND_END107:
                                             movzx eax, al
                                             push rax ; result
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT108
                                       ; Eval RHS
                                          ; Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 232]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 2
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Addition - int, int
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx2
                                                                     push qword [rbp - 224]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 0
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         add rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             sete al
                                             movzx eax, al
                                             push rax
                                       ; Check RHS
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT108
                                       ; Success state
                                       mov rax, 1 ; result = True
                                       jmp .AND_END108
.AND_SHORT_CIRCUIT108:
                                       mov rax, 0 ; result = False
.AND_END108:
                                       movzx eax, al
                                       push rax ; result
                                    pop rdx ; __cond
                                    cmp rdx, 0 ; ensure condition is true
                                    je .__endif__106 ; jump to end
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 208]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 216]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 216]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 1
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 216]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 2
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx2
                                                      push qword [rbp - 224]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 jmp .__endif__106 ; jump to end of condition chain
                                 ; End of if
.__endif__106:
                     ;---------------------------------------------------
                  ;------------------------------------------------------
                  ;------------------------------------------------------
                           ; End of if
.__endif__99:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 232]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 208]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 224]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Mod - int, int
                                 ; LHS
                                    ; Addition - int, int
                                       ; LHS
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       add rax, rdx
                                       push rax
                                 ; RHS
                                    ; Identifier - int shift_max
                                       push qword [rbp - 56]
                                 pop rdx
                                 pop rax
                                 mov rsi, rdx
                                 xor rdx, rdx
                                 cqo ; sign extend rax into rdx (specifically for 64bit -> 128bit)
                                 idiv rsi ; perform rdx:rax (128bit) / rsi (64bit)
                                 mov rax, rdx ; move remainder to rax
                                 push rax
                           pop rdx ; rhs value
                           mov qword [rbp - 48], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; OR
                                 ; Eval LHS
                                    ; OR
                                       ; Eval LHS
                                          ; OR
                                             ; Eval LHS
                                                ; Not Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 232]
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Subtraction - int, int
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx0
                                                                           push qword [rbp - 208]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 0
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               sub rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   setne al
                                                   movzx eax, al
                                                   push rax
                                             ; Check if we need to short-circuit
                                                pop rax ; __lhs
                                                test rax, rax
                                                jne .OR_SHORT_CIRCUIT111
                                             ; Eval RHS
                                                ; Not Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Subtraction - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 232]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     sub rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx0
                                                                     push qword [rbp - 208]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 0
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   setne al
                                                   movzx eax, al
                                                   push rax
                                             ; Check rhs
                                                pop rax ; __rhs
                                                test rax, rax
                                                je .OR_FALSE111 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT111:
                                             mov rax, 1 ; result = True
                                             jmp .OR_END111 ; skip false state
                                             ; False state
.OR_FALSE111:
                                             mov rax, 0 ; result = False
.OR_END111:
                                             movzx eax, al
                                             push rax ; result
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          jne .OR_SHORT_CIRCUIT112
                                       ; Eval RHS
                                          ; Not Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Identifier - int posy
                                                               push qword [rbp - 232]
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Addition - int, int
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx0
                                                                     push qword [rbp - 208]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 0
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         add rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             setne al
                                             movzx eax, al
                                             push rax
                                       ; Check rhs
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .OR_FALSE112 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT112:
                                       mov rax, 1 ; result = True
                                       jmp .OR_END112 ; skip false state
                                       ; False state
.OR_FALSE112:
                                       mov rax, 0 ; result = False
.OR_END112:
                                       movzx eax, al
                                       push rax ; result
                                 ; Check if we need to short-circuit
                                    pop rax ; __lhs
                                    test rax, rax
                                    jne .OR_SHORT_CIRCUIT113
                                 ; Eval RHS
                                    ; Equal
                                       ; LHS
                                          ; Subtraction - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             sub rax, rdx
                                             push rax
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       sete al
                                       movzx eax, al
                                       push rax
                                 ; Check rhs
                                    pop rax ; __rhs
                                    test rax, rax
                                    je .OR_FALSE113 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT113:
                                 mov rax, 1 ; result = True
                                 jmp .OR_END113 ; skip false state
                                 ; False state
.OR_FALSE113:
                                 mov rax, 0 ; result = False
.OR_END113:
                                 movzx eax, al
                                 push rax ; result
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__110 ; jump to end
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "rock at rest"
                                             mov rax, .str11
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                                 ; Break out of __while__97
                                 jmp .__endwhile__97
                     ;---------------------------------------------------
                           jmp .__endif__110 ; jump to end of condition chain
                           ; End of if
.__endif__110:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 232]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 208]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 224]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '-='
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs value
                           mov rax, qword [rbp - 232] ; read lhs value
                           sub rax, rdx      ; lhs = lhs - rhs
                           mov qword [rbp - 232], rax ; write back to lhs
                           push rax          ; push result for other expressions
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 232]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 208]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 216]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 192]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 232]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 224]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
            ;------------------------------------------------------------
                  jmp .__while__97
                  ; End of While
.__endwhile__97:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
   ;---------------------------------------------------------------------
            ; Assignment - '+='
               ; RHS
                  ; Int Literal
                     mov rax, 1
                     push rax
               pop rdx ; rhs value
               mov rax, qword [rbp - 72] ; read lhs value
               add rax, rdx      ; add lhs and rhs
               mov qword [rbp - 72], rax ; write back to lhs
               push rax          ; push result for other expressions
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int num_rocks
                           push qword [rbp - 72]
                     ; RHS
                        ; Identifier - int max_rocks
                           push qword [rbp - 80]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__115 ; jump to end
               ; Body
                  ; Break out of __while__61
                  jmp .__endwhile__61
               jmp .__endif__115 ; jump to end of condition chain
               ; End of if
.__endif__115:
   ;---------------------------------------------------------------------
   ;---------------------------------------------------------------------
            ; Code Block
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - rock_height
                        mov rax, qword [rbp - 240]  ; __main__while__61__block__62__block__116__rock_height
                  pop rdx ; rhs value
                  mov qword [rbp - 240], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; For-Loop
               ; Init
                  ; Assignment - '='
                     ; RHS
                        ; Subtraction - int, int
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> board
                                       push qword [rbp - 40]
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     ; LHS
                        ; Variable Declaration - i
                           mov rax, qword [rbp - 248]  ; __main__while__61__block__62__block__116__for__117__i
                     pop rdx ; rhs value
                     mov qword [rbp - 248], rdx
                     push rdx
                  ; Loop init result can be discarded
                  pop rax
               jmp .__forcond__117
.__for__117:
                  ; Update
                     ; Pre-Decrement - int
                        ; RHS
                           ; Identifier - int i
                              push qword [rbp - 248]
                        pop rdx
                        sub qword [rbp - 248], 1
                        mov rax, qword [rbp - 248]
                        push rax ; push result
                     ; Loop update result can be discarded
                     pop rax
.__forcond__117:
                  ; Condition
                     ; Greater Than or Equal to
                        ; LHS
                           ; Identifier - int i
                              push qword [rbp - 248]
                        ; RHS
                           ; Int Literal
                              mov rax, 0
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setge al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endfor__117
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
               ;---------------------------------------------------------
                        ; For-Loop
                        ; Init
                           ; Assignment - '='
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              ; LHS
                                 ; Variable Declaration - j
                                    mov rax, qword [rbp - 256]  ; __main__while__61__block__62__block__116__for__117__block__118__for__119__j
                              pop rdx ; rhs value
                              mov qword [rbp - 256], rdx
                              push rdx
                           ; Loop init result can be discarded
                           pop rax
                        jmp .__forcond__119
.__for__119:
                           ; Update
                              ; Pre-Increment - int
                                 ; RHS
                                    ; Identifier - int j
                                       push qword [rbp - 256]
                                 pop rdx
                                 add qword [rbp - 256], 1
                                 mov rax, qword [rbp - 256]
                                 push rax ; push result
                              ; Loop update result can be discarded
                              pop rax
.__forcond__119:
                           ; Condition
                              ; Less Than
                                 ; LHS
                                    ; Identifier - int j
                                       push qword [rbp - 256]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 8
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setl al
                                 movzx eax, al
                                 push rax
                              pop rax ; __cond
                              cmp rax, 0 ; __cond
                              je .__endfor__119
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; Not Equal
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> board
                                                                  push qword [rbp - 40]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int i
                                                            push qword [rbp - 248]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Identifier - int j
                                                      push qword [rbp - 256]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; RHS
                                             ; Char Literal
                                                push '.'
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          cmp rax, rdx
                                          setne al
                                          movzx eax, al
                                          push rax
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__121 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '='
                                             ; RHS
                                                ; Identifier - int i
                                                   push qword [rbp - 248]
                                             pop rdx ; rhs value
                                             mov qword [rbp - 240], rdx
                                             push rdx
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Break out of __for__119
                                          jmp .__endfor__119
                              ;------------------------------------------
                                    jmp .__endif__121 ; jump to end of condition chain
                                    ; End of if
.__endif__121:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           ; Repeat
jmp .__for__119
                           ; End of For
.__endfor__119:
               ;---------------------------------------------------------
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Not Equal
                                 ; LHS
                                    ; Identifier - int rock_height
                                       push qword [rbp - 240]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 0
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setne al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__123 ; jump to end
                           ; Body
                              ; Break out of __for__117
                              jmp .__endfor__117
                           jmp .__endif__123 ; jump to end of condition chain
                           ; End of if
.__endif__123:
               ;---------------------------------------------------------
            ;------------------------------------------------------------
                  ; Repeat
jmp .__for__117
                  ; End of For
.__endfor__117:
      ;------------------------------------------------------------------
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 3
                        push rax
                  ; LHS
                     ; Variable Declaration - shape_height
                        mov rax, qword [rbp - 264]  ; __main__while__61__block__62__block__116__shape_height
                  pop rdx ; rhs value
                  mov qword [rbp - 264], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Char Literal
                        push '2'
                  ; LHS
                     ; Variable Declaration - rock_char
                        mov rax, qword [rbp - 272]  ; __main__while__61__block__62__block__116__rock_char
                  pop rdx ; rhs value
                  mov byte [rbp - 272], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 240]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int shape_height
                              push qword [rbp - 264]
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - desired_height
                        mov rax, qword [rbp - 280]  ; __main__while__61__block__62__block__116__desired_height
                  pop rdx ; rhs value
                  mov qword [rbp - 280], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__124:
                  ; Condition
                     ; Less Than
                        ; LHS
                           ; Subtraction - int, int
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              sub rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int desired_height
                              push qword [rbp - 280]
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setl al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__124
                  ; Body
                     ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
                        ; Make space for 1 arg(s) and object parameter
                        sub rsp, 16
                        ; LHS
                           ; Identifier - Vector<:char[]:> board
                              push qword [rbp - 40]
                           pop rax ; object parameter
                           mov qword [rsp + 0], rax ; place as first parameter
                        ; RHS
                        ; Arguments
                           ; Eval arg0
                              ; String Literal
                                 ; "|.......|"
                                 mov rax, .str12
                                 push rax
                           ; Move arg0's result to reverse order position on stack
                           pop rax
                           mov qword [rsp + 8], rax
                        call .__method____main____Vector__char__1____pushBack__char__1
                        ; Remove args
                        add rsp, 16
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
                  jmp .__while__124
                  ; End of While
.__endwhile__124:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        ; Int Literal
                           mov rax, 4
                           push rax
                        ; Int Literal
                           mov rax, 5
                           push rax
                        mov edi, 24 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 2
                        mov qword [rax + 16], rdx ; arr[2] = rdx
                        pop rdx ; get array element 1
                        mov qword [rax + 8], rdx ; arr[1] = rdx
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx0
                        mov rax, qword [rbp - 288]  ; __main__while__61__block__62__block__116__posx0
                  pop rdx ; rhs value
                  mov qword [rbp - 288], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 5
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx1
                        mov rax, qword [rbp - 296]  ; __main__while__61__block__62__block__116__posx1
                  pop rdx ; rhs value
                  mov qword [rbp - 296], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 5
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx2
                        mov rax, qword [rbp - 304]  ; __main__while__61__block__62__block__116__posx2
                  pop rdx ; rhs value
                  mov qword [rbp - 304], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 240]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posy
                        mov rax, qword [rbp - 312]  ; __main__while__61__block__62__block__116__posy
                  pop rdx ; rhs value
                  mov qword [rbp - 312], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 272]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 312]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 288]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 272]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 312]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 288]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 272]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 312]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 288]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 2
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 272]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 312]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 296]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 272]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 312]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 2
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx2
                                    push qword [rbp - 304]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__125:
                  ; Condition
                     ; Int Literal
                        mov rax, 1
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__125
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
                        ; Function Call - println(int) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - int shift_index
                                    push qword [rbp - 48]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call println(int)
                           call __builtin__println__int
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 296]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 304]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Equal
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Member Accessor
                                                   ; LHS
                                                      ; Identifier - Vector<:char[]:> lines
                                                         push qword [rbp - 16]
                                                   ; RHS
                                                      push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   push qword [rax + 8*rdx] ; lhs.rhs
                                             ; OFFSET
                                                ; Int Literal
                                                   mov rax, 0
                                                   push rax
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                       ; OFFSET
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                       movzx rax, al ; zero extend because we need to push 64bit to stack
                                       push rax ; push char onto stack
                                 ; RHS
                                    ; Char Literal
                                       push '<'
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 sete al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__else__127 ; jump to else
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "shift left"
                                             mov rax, .str13
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; AND
                                          ; Eval LHS
                                             ; AND
                                                ; Eval LHS
                                                   ; Equal
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Member Accessor
                                                                        ; LHS
                                                                           ; Identifier - Vector<:char[]:> board
                                                                              push qword [rbp - 40]
                                                                        ; RHS
                                                                           push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        push qword [rax + 8*rdx] ; lhs.rhs
                                                                  ; OFFSET
                                                                     ; Identifier - int posy
                                                                        push qword [rbp - 312]
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; OFFSET
                                                               ; Subtraction - int, int
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Identifier - int[] posx0
                                                                              push qword [rbp - 288]
                                                                        ; OFFSET
                                                                           ; Int Literal
                                                                              mov rax, 0
                                                                              push rax
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 1
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  sub rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                            movzx rax, al ; zero extend because we need to push 64bit to stack
                                                            push rax ; push char onto stack
                                                      ; RHS
                                                         ; Char Literal
                                                            push '.'
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      cmp rax, rdx
                                                      sete al
                                                      movzx eax, al
                                                      push rax
                                                ; Check if we need to short-circuit
                                                   pop rax ; __lhs
                                                   test rax, rax
                                                   je .AND_SHORT_CIRCUIT130
                                                ; Eval RHS
                                                   ; Equal
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Member Accessor
                                                                        ; LHS
                                                                           ; Identifier - Vector<:char[]:> board
                                                                              push qword [rbp - 40]
                                                                        ; RHS
                                                                           push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        push qword [rax + 8*rdx] ; lhs.rhs
                                                                  ; OFFSET
                                                                     ; Addition - int, int
                                                                        ; LHS
                                                                           ; Identifier - int posy
                                                                              push qword [rbp - 312]
                                                                        ; RHS
                                                                           ; Int Literal
                                                                              mov rax, 1
                                                                              push rax
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        add rax, rdx
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; OFFSET
                                                               ; Subtraction - int, int
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Identifier - int[] posx1
                                                                              push qword [rbp - 296]
                                                                        ; OFFSET
                                                                           ; Int Literal
                                                                              mov rax, 0
                                                                              push rax
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 1
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  sub rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                            movzx rax, al ; zero extend because we need to push 64bit to stack
                                                            push rax ; push char onto stack
                                                      ; RHS
                                                         ; Char Literal
                                                            push '.'
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      cmp rax, rdx
                                                      sete al
                                                      movzx eax, al
                                                      push rax
                                                ; Check RHS
                                                   pop rax ; __rhs
                                                   test rax, rax
                                                   je .AND_SHORT_CIRCUIT130
                                                ; Success state
                                                mov rax, 1 ; result = True
                                                jmp .AND_END130
.AND_SHORT_CIRCUIT130:
                                                mov rax, 0 ; result = False
.AND_END130:
                                                movzx eax, al
                                                push rax ; result
                                          ; Check if we need to short-circuit
                                             pop rax ; __lhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT131
                                          ; Eval RHS
                                             ; Equal
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Member Accessor
                                                                  ; LHS
                                                                     ; Identifier - Vector<:char[]:> board
                                                                        push qword [rbp - 40]
                                                                  ; RHS
                                                                     push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  push qword [rax + 8*rdx] ; lhs.rhs
                                                            ; OFFSET
                                                               ; Addition - int, int
                                                                  ; LHS
                                                                     ; Identifier - int posy
                                                                        push qword [rbp - 312]
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 2
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  add rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                      ; OFFSET
                                                         ; Subtraction - int, int
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Identifier - int[] posx2
                                                                        push qword [rbp - 304]
                                                                  ; OFFSET
                                                                     ; Int Literal
                                                                        mov rax, 0
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; RHS
                                                               ; Int Literal
                                                                  mov rax, 1
                                                                  push rax
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            sub rax, rdx
                                                            push rax
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                      movzx rax, al ; zero extend because we need to push 64bit to stack
                                                      push rax ; push char onto stack
                                                ; RHS
                                                   ; Char Literal
                                                      push '.'
                                                pop rdx ; rhs
                                                pop rax ; lhs
                                                cmp rax, rdx
                                                sete al
                                                movzx eax, al
                                                push rax
                                          ; Check RHS
                                             pop rax ; __rhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT131
                                          ; Success state
                                          mov rax, 1 ; result = True
                                          jmp .AND_END131
.AND_SHORT_CIRCUIT131:
                                          mov rax, 0 ; result = False
.AND_END131:
                                          movzx eax, al
                                          push rax ; result
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__129 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 288]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 288]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 1
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 288]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 2
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 296]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx2
                                                         push qword [rbp - 304]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                              ;------------------------------------------
                                    jmp .__endif__129 ; jump to end of condition chain
                                    ; End of if
.__endif__129:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           jmp .__endif__127 ; jump to end of condition chain
                  ;------------------------------------------------------
                           ; Else-Statement
.__else__127:
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - println(char[]) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; String Literal
                                          ; "shift right"
                                          mov rax, .str14
                                          push rax
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call println(char[])
                                 call __builtin__println__char__1
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; If-Statement
                                 ; Condition
                                    ; AND
                                       ; Eval LHS
                                          ; AND
                                             ; Eval LHS
                                                ; Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 312]
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx0
                                                                           push qword [rbp - 288]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 2
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   sete al
                                                   movzx eax, al
                                                   push rax
                                             ; Check if we need to short-circuit
                                                pop rax ; __lhs
                                                test rax, rax
                                                je .AND_SHORT_CIRCUIT135
                                             ; Eval RHS
                                                ; Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Addition - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 312]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     add rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx1
                                                                           push qword [rbp - 296]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 0
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   sete al
                                                   movzx eax, al
                                                   push rax
                                             ; Check RHS
                                                pop rax ; __rhs
                                                test rax, rax
                                                je .AND_SHORT_CIRCUIT135
                                             ; Success state
                                             mov rax, 1 ; result = True
                                             jmp .AND_END135
.AND_SHORT_CIRCUIT135:
                                             mov rax, 0 ; result = False
.AND_END135:
                                             movzx eax, al
                                             push rax ; result
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT136
                                       ; Eval RHS
                                          ; Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 312]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 2
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Addition - int, int
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx2
                                                                     push qword [rbp - 304]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 0
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         add rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             sete al
                                             movzx eax, al
                                             push rax
                                       ; Check RHS
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT136
                                       ; Success state
                                       mov rax, 1 ; result = True
                                       jmp .AND_END136
.AND_SHORT_CIRCUIT136:
                                       mov rax, 0 ; result = False
.AND_END136:
                                       movzx eax, al
                                       push rax ; result
                                    pop rdx ; __cond
                                    cmp rdx, 0 ; ensure condition is true
                                    je .__endif__134 ; jump to end
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 288]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 288]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 1
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 288]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 2
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 296]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx2
                                                      push qword [rbp - 304]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 jmp .__endif__134 ; jump to end of condition chain
                                 ; End of if
.__endif__134:
                     ;---------------------------------------------------
                  ;------------------------------------------------------
                  ;------------------------------------------------------
                           ; End of if
.__endif__127:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 296]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 304]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Mod - int, int
                                 ; LHS
                                    ; Addition - int, int
                                       ; LHS
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       add rax, rdx
                                       push rax
                                 ; RHS
                                    ; Identifier - int shift_max
                                       push qword [rbp - 56]
                                 pop rdx
                                 pop rax
                                 mov rsi, rdx
                                 xor rdx, rdx
                                 cqo ; sign extend rax into rdx (specifically for 64bit -> 128bit)
                                 idiv rsi ; perform rdx:rax (128bit) / rsi (64bit)
                                 mov rax, rdx ; move remainder to rax
                                 push rax
                           pop rdx ; rhs value
                           mov qword [rbp - 48], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; OR
                                 ; Eval LHS
                                    ; OR
                                       ; Eval LHS
                                          ; OR
                                             ; Eval LHS
                                                ; Not Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Subtraction - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 312]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     sub rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx0
                                                                     push qword [rbp - 288]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 0
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   setne al
                                                   movzx eax, al
                                                   push rax
                                             ; Check if we need to short-circuit
                                                pop rax ; __lhs
                                                test rax, rax
                                                jne .OR_SHORT_CIRCUIT139
                                             ; Eval RHS
                                                ; Not Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Subtraction - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 312]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     sub rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx0
                                                                     push qword [rbp - 288]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   setne al
                                                   movzx eax, al
                                                   push rax
                                             ; Check rhs
                                                pop rax ; __rhs
                                                test rax, rax
                                                je .OR_FALSE139 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT139:
                                             mov rax, 1 ; result = True
                                             jmp .OR_END139 ; skip false state
                                             ; False state
.OR_FALSE139:
                                             mov rax, 0 ; result = False
.OR_END139:
                                             movzx eax, al
                                             push rax ; result
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          jne .OR_SHORT_CIRCUIT140
                                       ; Eval RHS
                                          ; Not Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Subtraction - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 312]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               sub rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Subscript
                                                         ; LHS
                                                            ; Identifier - int[] posx0
                                                               push qword [rbp - 288]
                                                         ; OFFSET
                                                            ; Int Literal
                                                               mov rax, 2
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             setne al
                                             movzx eax, al
                                             push rax
                                       ; Check rhs
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .OR_FALSE140 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT140:
                                       mov rax, 1 ; result = True
                                       jmp .OR_END140 ; skip false state
                                       ; False state
.OR_FALSE140:
                                       mov rax, 0 ; result = False
.OR_END140:
                                       movzx eax, al
                                       push rax ; result
                                 ; Check if we need to short-circuit
                                    pop rax ; __lhs
                                    test rax, rax
                                    jne .OR_SHORT_CIRCUIT141
                                 ; Eval RHS
                                    ; Equal
                                       ; LHS
                                          ; Subtraction - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             sub rax, rdx
                                             push rax
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       sete al
                                       movzx eax, al
                                       push rax
                                 ; Check rhs
                                    pop rax ; __rhs
                                    test rax, rax
                                    je .OR_FALSE141 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT141:
                                 mov rax, 1 ; result = True
                                 jmp .OR_END141 ; skip false state
                                 ; False state
.OR_FALSE141:
                                 mov rax, 0 ; result = False
.OR_END141:
                                 movzx eax, al
                                 push rax ; result
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__138 ; jump to end
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "rock at rest"
                                             mov rax, .str15
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                                 ; Break out of __while__125
                                 jmp .__endwhile__125
                     ;---------------------------------------------------
                           jmp .__endif__138 ; jump to end of condition chain
                           ; End of if
.__endif__138:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 296]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 304]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '-='
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs value
                           mov rax, qword [rbp - 312] ; read lhs value
                           sub rax, rdx      ; lhs = lhs - rhs
                           mov qword [rbp - 312], rax ; write back to lhs
                           push rax          ; push result for other expressions
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 312]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 288]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 2
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 296]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 272]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 312]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 304]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
            ;------------------------------------------------------------
                  jmp .__while__125
                  ; End of While
.__endwhile__125:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
   ;---------------------------------------------------------------------
            ; Assignment - '+='
               ; RHS
                  ; Int Literal
                     mov rax, 1
                     push rax
               pop rdx ; rhs value
               mov rax, qword [rbp - 72] ; read lhs value
               add rax, rdx      ; add lhs and rhs
               mov qword [rbp - 72], rax ; write back to lhs
               push rax          ; push result for other expressions
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int num_rocks
                           push qword [rbp - 72]
                     ; RHS
                        ; Identifier - int max_rocks
                           push qword [rbp - 80]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__143 ; jump to end
               ; Body
                  ; Break out of __while__61
                  jmp .__endwhile__61
               jmp .__endif__143 ; jump to end of condition chain
               ; End of if
.__endif__143:
   ;---------------------------------------------------------------------
   ;---------------------------------------------------------------------
            ; Code Block
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - rock_height
                        mov rax, qword [rbp - 320]  ; __main__while__61__block__62__block__144__rock_height
                  pop rdx ; rhs value
                  mov qword [rbp - 320], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; For-Loop
               ; Init
                  ; Assignment - '='
                     ; RHS
                        ; Subtraction - int, int
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> board
                                       push qword [rbp - 40]
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     ; LHS
                        ; Variable Declaration - i
                           mov rax, qword [rbp - 328]  ; __main__while__61__block__62__block__144__for__145__i
                     pop rdx ; rhs value
                     mov qword [rbp - 328], rdx
                     push rdx
                  ; Loop init result can be discarded
                  pop rax
               jmp .__forcond__145
.__for__145:
                  ; Update
                     ; Pre-Decrement - int
                        ; RHS
                           ; Identifier - int i
                              push qword [rbp - 328]
                        pop rdx
                        sub qword [rbp - 328], 1
                        mov rax, qword [rbp - 328]
                        push rax ; push result
                     ; Loop update result can be discarded
                     pop rax
.__forcond__145:
                  ; Condition
                     ; Greater Than or Equal to
                        ; LHS
                           ; Identifier - int i
                              push qword [rbp - 328]
                        ; RHS
                           ; Int Literal
                              mov rax, 0
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setge al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endfor__145
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
               ;---------------------------------------------------------
                        ; For-Loop
                        ; Init
                           ; Assignment - '='
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              ; LHS
                                 ; Variable Declaration - j
                                    mov rax, qword [rbp - 336]  ; __main__while__61__block__62__block__144__for__145__block__146__for__147__j
                              pop rdx ; rhs value
                              mov qword [rbp - 336], rdx
                              push rdx
                           ; Loop init result can be discarded
                           pop rax
                        jmp .__forcond__147
.__for__147:
                           ; Update
                              ; Pre-Increment - int
                                 ; RHS
                                    ; Identifier - int j
                                       push qword [rbp - 336]
                                 pop rdx
                                 add qword [rbp - 336], 1
                                 mov rax, qword [rbp - 336]
                                 push rax ; push result
                              ; Loop update result can be discarded
                              pop rax
.__forcond__147:
                           ; Condition
                              ; Less Than
                                 ; LHS
                                    ; Identifier - int j
                                       push qword [rbp - 336]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 8
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setl al
                                 movzx eax, al
                                 push rax
                              pop rax ; __cond
                              cmp rax, 0 ; __cond
                              je .__endfor__147
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; Not Equal
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> board
                                                                  push qword [rbp - 40]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int i
                                                            push qword [rbp - 328]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Identifier - int j
                                                      push qword [rbp - 336]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; RHS
                                             ; Char Literal
                                                push '.'
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          cmp rax, rdx
                                          setne al
                                          movzx eax, al
                                          push rax
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__149 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '='
                                             ; RHS
                                                ; Identifier - int i
                                                   push qword [rbp - 328]
                                             pop rdx ; rhs value
                                             mov qword [rbp - 320], rdx
                                             push rdx
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Break out of __for__147
                                          jmp .__endfor__147
                              ;------------------------------------------
                                    jmp .__endif__149 ; jump to end of condition chain
                                    ; End of if
.__endif__149:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           ; Repeat
jmp .__for__147
                           ; End of For
.__endfor__147:
               ;---------------------------------------------------------
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Not Equal
                                 ; LHS
                                    ; Identifier - int rock_height
                                       push qword [rbp - 320]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 0
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setne al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__151 ; jump to end
                           ; Body
                              ; Break out of __for__145
                              jmp .__endfor__145
                           jmp .__endif__151 ; jump to end of condition chain
                           ; End of if
.__endif__151:
               ;---------------------------------------------------------
            ;------------------------------------------------------------
                  ; Repeat
jmp .__for__145
                  ; End of For
.__endfor__145:
      ;------------------------------------------------------------------
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 4
                        push rax
                  ; LHS
                     ; Variable Declaration - shape_height
                        mov rax, qword [rbp - 344]  ; __main__while__61__block__62__block__144__shape_height
                  pop rdx ; rhs value
                  mov qword [rbp - 344], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Char Literal
                        push '3'
                  ; LHS
                     ; Variable Declaration - rock_char
                        mov rax, qword [rbp - 352]  ; __main__while__61__block__62__block__144__rock_char
                  pop rdx ; rhs value
                  mov byte [rbp - 352], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 320]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int shape_height
                              push qword [rbp - 344]
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - desired_height
                        mov rax, qword [rbp - 360]  ; __main__while__61__block__62__block__144__desired_height
                  pop rdx ; rhs value
                  mov qword [rbp - 360], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__152:
                  ; Condition
                     ; Less Than
                        ; LHS
                           ; Subtraction - int, int
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              sub rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int desired_height
                              push qword [rbp - 360]
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setl al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__152
                  ; Body
                     ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
                        ; Make space for 1 arg(s) and object parameter
                        sub rsp, 16
                        ; LHS
                           ; Identifier - Vector<:char[]:> board
                              push qword [rbp - 40]
                           pop rax ; object parameter
                           mov qword [rsp + 0], rax ; place as first parameter
                        ; RHS
                        ; Arguments
                           ; Eval arg0
                              ; String Literal
                                 ; "|.......|"
                                 mov rax, .str16
                                 push rax
                           ; Move arg0's result to reverse order position on stack
                           pop rax
                           mov qword [rsp + 8], rax
                        call .__method____main____Vector__char__1____pushBack__char__1
                        ; Remove args
                        add rsp, 16
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
                  jmp .__while__152
                  ; End of While
.__endwhile__152:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx0
                        mov rax, qword [rbp - 368]  ; __main__while__61__block__62__block__144__posx0
                  pop rdx ; rhs value
                  mov qword [rbp - 368], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx1
                        mov rax, qword [rbp - 376]  ; __main__while__61__block__62__block__144__posx1
                  pop rdx ; rhs value
                  mov qword [rbp - 376], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx2
                        mov rax, qword [rbp - 384]  ; __main__while__61__block__62__block__144__posx2
                  pop rdx ; rhs value
                  mov qword [rbp - 384], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        mov edi, 8 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx3
                        mov rax, qword [rbp - 392]  ; __main__while__61__block__62__block__144__posx3
                  pop rdx ; rhs value
                  mov qword [rbp - 392], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 320]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posy
                        mov rax, qword [rbp - 400]  ; __main__while__61__block__62__block__144__posy
                  pop rdx ; rhs value
                  mov qword [rbp - 400], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 352]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 400]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 368]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 352]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 400]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 376]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 352]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 400]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 2
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx2
                                    push qword [rbp - 384]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 352]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 400]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 3
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx3
                                    push qword [rbp - 392]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__153:
                  ; Condition
                     ; Int Literal
                        mov rax, 1
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__153
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
                        ; Function Call - println(int) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - int shift_index
                                    push qword [rbp - 48]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call println(int)
                           call __builtin__println__int
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 400]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 368]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 376]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 384]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 3
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx3
                                             push qword [rbp - 392]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Equal
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Member Accessor
                                                   ; LHS
                                                      ; Identifier - Vector<:char[]:> lines
                                                         push qword [rbp - 16]
                                                   ; RHS
                                                      push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   push qword [rax + 8*rdx] ; lhs.rhs
                                             ; OFFSET
                                                ; Int Literal
                                                   mov rax, 0
                                                   push rax
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                       ; OFFSET
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                       movzx rax, al ; zero extend because we need to push 64bit to stack
                                       push rax ; push char onto stack
                                 ; RHS
                                    ; Char Literal
                                       push '<'
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 sete al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__else__155 ; jump to else
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "shift left"
                                             mov rax, .str17
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; AND
                                          ; Eval LHS
                                             ; AND
                                                ; Eval LHS
                                                   ; AND
                                                      ; Eval LHS
                                                         ; Equal
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Member Accessor
                                                                              ; LHS
                                                                                 ; Identifier - Vector<:char[]:> board
                                                                                    push qword [rbp - 40]
                                                                              ; RHS
                                                                                 push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                              pop rdx ; rhs
                                                                              pop rax ; lhs
                                                                              push qword [rax + 8*rdx] ; lhs.rhs
                                                                        ; OFFSET
                                                                           ; Identifier - int posy
                                                                              push qword [rbp - 400]
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; OFFSET
                                                                     ; Subtraction - int, int
                                                                        ; LHS
                                                                           ; Subscript
                                                                              ; LHS
                                                                                 ; Identifier - int[] posx0
                                                                                    push qword [rbp - 368]
                                                                              ; OFFSET
                                                                                 ; Int Literal
                                                                                    mov rax, 0
                                                                                    push rax
                                                                              pop rdx ; __offset
                                                                              pop rax ; __pointer
                                                                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                        ; RHS
                                                                           ; Int Literal
                                                                              mov rax, 1
                                                                              push rax
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        sub rax, rdx
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                                  movzx rax, al ; zero extend because we need to push 64bit to stack
                                                                  push rax ; push char onto stack
                                                            ; RHS
                                                               ; Char Literal
                                                                  push '.'
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            cmp rax, rdx
                                                            sete al
                                                            movzx eax, al
                                                            push rax
                                                      ; Check if we need to short-circuit
                                                         pop rax ; __lhs
                                                         test rax, rax
                                                         je .AND_SHORT_CIRCUIT158
                                                      ; Eval RHS
                                                         ; Equal
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Member Accessor
                                                                              ; LHS
                                                                                 ; Identifier - Vector<:char[]:> board
                                                                                    push qword [rbp - 40]
                                                                              ; RHS
                                                                                 push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                              pop rdx ; rhs
                                                                              pop rax ; lhs
                                                                              push qword [rax + 8*rdx] ; lhs.rhs
                                                                        ; OFFSET
                                                                           ; Addition - int, int
                                                                              ; LHS
                                                                                 ; Identifier - int posy
                                                                                    push qword [rbp - 400]
                                                                              ; RHS
                                                                                 ; Int Literal
                                                                                    mov rax, 1
                                                                                    push rax
                                                                              pop rdx ; rhs
                                                                              pop rax ; lhs
                                                                              add rax, rdx
                                                                              push rax
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; OFFSET
                                                                     ; Subtraction - int, int
                                                                        ; LHS
                                                                           ; Subscript
                                                                              ; LHS
                                                                                 ; Identifier - int[] posx1
                                                                                    push qword [rbp - 376]
                                                                              ; OFFSET
                                                                                 ; Int Literal
                                                                                    mov rax, 0
                                                                                    push rax
                                                                              pop rdx ; __offset
                                                                              pop rax ; __pointer
                                                                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                        ; RHS
                                                                           ; Int Literal
                                                                              mov rax, 1
                                                                              push rax
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        sub rax, rdx
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                                  movzx rax, al ; zero extend because we need to push 64bit to stack
                                                                  push rax ; push char onto stack
                                                            ; RHS
                                                               ; Char Literal
                                                                  push '.'
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            cmp rax, rdx
                                                            sete al
                                                            movzx eax, al
                                                            push rax
                                                      ; Check RHS
                                                         pop rax ; __rhs
                                                         test rax, rax
                                                         je .AND_SHORT_CIRCUIT158
                                                      ; Success state
                                                      mov rax, 1 ; result = True
                                                      jmp .AND_END158
.AND_SHORT_CIRCUIT158:
                                                      mov rax, 0 ; result = False
.AND_END158:
                                                      movzx eax, al
                                                      push rax ; result
                                                ; Check if we need to short-circuit
                                                   pop rax ; __lhs
                                                   test rax, rax
                                                   je .AND_SHORT_CIRCUIT159
                                                ; Eval RHS
                                                   ; Equal
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Member Accessor
                                                                        ; LHS
                                                                           ; Identifier - Vector<:char[]:> board
                                                                              push qword [rbp - 40]
                                                                        ; RHS
                                                                           push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        push qword [rax + 8*rdx] ; lhs.rhs
                                                                  ; OFFSET
                                                                     ; Addition - int, int
                                                                        ; LHS
                                                                           ; Identifier - int posy
                                                                              push qword [rbp - 400]
                                                                        ; RHS
                                                                           ; Int Literal
                                                                              mov rax, 2
                                                                              push rax
                                                                        pop rdx ; rhs
                                                                        pop rax ; lhs
                                                                        add rax, rdx
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; OFFSET
                                                               ; Subtraction - int, int
                                                                  ; LHS
                                                                     ; Subscript
                                                                        ; LHS
                                                                           ; Identifier - int[] posx2
                                                                              push qword [rbp - 384]
                                                                        ; OFFSET
                                                                           ; Int Literal
                                                                              mov rax, 0
                                                                              push rax
                                                                        pop rdx ; __offset
                                                                        pop rax ; __pointer
                                                                        push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 1
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  sub rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                            movzx rax, al ; zero extend because we need to push 64bit to stack
                                                            push rax ; push char onto stack
                                                      ; RHS
                                                         ; Char Literal
                                                            push '.'
                                                      pop rdx ; rhs
                                                      pop rax ; lhs
                                                      cmp rax, rdx
                                                      sete al
                                                      movzx eax, al
                                                      push rax
                                                ; Check RHS
                                                   pop rax ; __rhs
                                                   test rax, rax
                                                   je .AND_SHORT_CIRCUIT159
                                                ; Success state
                                                mov rax, 1 ; result = True
                                                jmp .AND_END159
.AND_SHORT_CIRCUIT159:
                                                mov rax, 0 ; result = False
.AND_END159:
                                                movzx eax, al
                                                push rax ; result
                                          ; Check if we need to short-circuit
                                             pop rax ; __lhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT160
                                          ; Eval RHS
                                             ; Equal
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Member Accessor
                                                                  ; LHS
                                                                     ; Identifier - Vector<:char[]:> board
                                                                        push qword [rbp - 40]
                                                                  ; RHS
                                                                     push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  push qword [rax + 8*rdx] ; lhs.rhs
                                                            ; OFFSET
                                                               ; Addition - int, int
                                                                  ; LHS
                                                                     ; Identifier - int posy
                                                                        push qword [rbp - 400]
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 3
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  add rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                      ; OFFSET
                                                         ; Subtraction - int, int
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Identifier - int[] posx3
                                                                        push qword [rbp - 392]
                                                                  ; OFFSET
                                                                     ; Int Literal
                                                                        mov rax, 0
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; RHS
                                                               ; Int Literal
                                                                  mov rax, 1
                                                                  push rax
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            sub rax, rdx
                                                            push rax
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                      movzx rax, al ; zero extend because we need to push 64bit to stack
                                                      push rax ; push char onto stack
                                                ; RHS
                                                   ; Char Literal
                                                      push '.'
                                                pop rdx ; rhs
                                                pop rax ; lhs
                                                cmp rax, rdx
                                                sete al
                                                movzx eax, al
                                                push rax
                                          ; Check RHS
                                             pop rax ; __rhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT160
                                          ; Success state
                                          mov rax, 1 ; result = True
                                          jmp .AND_END160
.AND_SHORT_CIRCUIT160:
                                          mov rax, 0 ; result = False
.AND_END160:
                                          movzx eax, al
                                          push rax ; result
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__157 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 368]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 376]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx2
                                                         push qword [rbp - 384]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx3
                                                         push qword [rbp - 392]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                              ;------------------------------------------
                                    jmp .__endif__157 ; jump to end of condition chain
                                    ; End of if
.__endif__157:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           jmp .__endif__155 ; jump to end of condition chain
                  ;------------------------------------------------------
                           ; Else-Statement
.__else__155:
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - println(char[]) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; String Literal
                                          ; "shift right"
                                          mov rax, .str18
                                          push rax
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call println(char[])
                                 call __builtin__println__char__1
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; If-Statement
                                 ; Condition
                                    ; AND
                                       ; Eval LHS
                                          ; AND
                                             ; Eval LHS
                                                ; AND
                                                   ; Eval LHS
                                                      ; Equal
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Member Accessor
                                                                           ; LHS
                                                                              ; Identifier - Vector<:char[]:> board
                                                                                 push qword [rbp - 40]
                                                                           ; RHS
                                                                              push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           push qword [rax + 8*rdx] ; lhs.rhs
                                                                     ; OFFSET
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 400]
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; OFFSET
                                                                  ; Addition - int, int
                                                                     ; LHS
                                                                        ; Subscript
                                                                           ; LHS
                                                                              ; Identifier - int[] posx0
                                                                                 push qword [rbp - 368]
                                                                           ; OFFSET
                                                                              ; Int Literal
                                                                                 mov rax, 0
                                                                                 push rax
                                                                           pop rdx ; __offset
                                                                           pop rax ; __pointer
                                                                           push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     add rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                               movzx rax, al ; zero extend because we need to push 64bit to stack
                                                               push rax ; push char onto stack
                                                         ; RHS
                                                            ; Char Literal
                                                               push '.'
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         cmp rax, rdx
                                                         sete al
                                                         movzx eax, al
                                                         push rax
                                                   ; Check if we need to short-circuit
                                                      pop rax ; __lhs
                                                      test rax, rax
                                                      je .AND_SHORT_CIRCUIT164
                                                   ; Eval RHS
                                                      ; Equal
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Member Accessor
                                                                           ; LHS
                                                                              ; Identifier - Vector<:char[]:> board
                                                                                 push qword [rbp - 40]
                                                                           ; RHS
                                                                              push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           push qword [rax + 8*rdx] ; lhs.rhs
                                                                     ; OFFSET
                                                                        ; Addition - int, int
                                                                           ; LHS
                                                                              ; Identifier - int posy
                                                                                 push qword [rbp - 400]
                                                                           ; RHS
                                                                              ; Int Literal
                                                                                 mov rax, 1
                                                                                 push rax
                                                                           pop rdx ; rhs
                                                                           pop rax ; lhs
                                                                           add rax, rdx
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; OFFSET
                                                                  ; Addition - int, int
                                                                     ; LHS
                                                                        ; Subscript
                                                                           ; LHS
                                                                              ; Identifier - int[] posx1
                                                                                 push qword [rbp - 376]
                                                                           ; OFFSET
                                                                              ; Int Literal
                                                                                 mov rax, 0
                                                                                 push rax
                                                                           pop rdx ; __offset
                                                                           pop rax ; __pointer
                                                                           push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 1
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     add rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                               movzx rax, al ; zero extend because we need to push 64bit to stack
                                                               push rax ; push char onto stack
                                                         ; RHS
                                                            ; Char Literal
                                                               push '.'
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         cmp rax, rdx
                                                         sete al
                                                         movzx eax, al
                                                         push rax
                                                   ; Check RHS
                                                      pop rax ; __rhs
                                                      test rax, rax
                                                      je .AND_SHORT_CIRCUIT164
                                                   ; Success state
                                                   mov rax, 1 ; result = True
                                                   jmp .AND_END164
.AND_SHORT_CIRCUIT164:
                                                   mov rax, 0 ; result = False
.AND_END164:
                                                   movzx eax, al
                                                   push rax ; result
                                             ; Check if we need to short-circuit
                                                pop rax ; __lhs
                                                test rax, rax
                                                je .AND_SHORT_CIRCUIT165
                                             ; Eval RHS
                                                ; Equal
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Member Accessor
                                                                     ; LHS
                                                                        ; Identifier - Vector<:char[]:> board
                                                                           push qword [rbp - 40]
                                                                     ; RHS
                                                                        push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     push qword [rax + 8*rdx] ; lhs.rhs
                                                               ; OFFSET
                                                                  ; Addition - int, int
                                                                     ; LHS
                                                                        ; Identifier - int posy
                                                                           push qword [rbp - 400]
                                                                     ; RHS
                                                                        ; Int Literal
                                                                           mov rax, 2
                                                                           push rax
                                                                     pop rdx ; rhs
                                                                     pop rax ; lhs
                                                                     add rax, rdx
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Subscript
                                                                     ; LHS
                                                                        ; Identifier - int[] posx2
                                                                           push qword [rbp - 384]
                                                                     ; OFFSET
                                                                        ; Int Literal
                                                                           mov rax, 0
                                                                           push rax
                                                                     pop rdx ; __offset
                                                                     pop rax ; __pointer
                                                                     push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                         movzx rax, al ; zero extend because we need to push 64bit to stack
                                                         push rax ; push char onto stack
                                                   ; RHS
                                                      ; Char Literal
                                                         push '.'
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   cmp rax, rdx
                                                   sete al
                                                   movzx eax, al
                                                   push rax
                                             ; Check RHS
                                                pop rax ; __rhs
                                                test rax, rax
                                                je .AND_SHORT_CIRCUIT165
                                             ; Success state
                                             mov rax, 1 ; result = True
                                             jmp .AND_END165
.AND_SHORT_CIRCUIT165:
                                             mov rax, 0 ; result = False
.AND_END165:
                                             movzx eax, al
                                             push rax ; result
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT166
                                       ; Eval RHS
                                          ; Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 400]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 3
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Addition - int, int
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx3
                                                                     push qword [rbp - 392]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 0
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         add rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             sete al
                                             movzx eax, al
                                             push rax
                                       ; Check RHS
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT166
                                       ; Success state
                                       mov rax, 1 ; result = True
                                       jmp .AND_END166
.AND_SHORT_CIRCUIT166:
                                       mov rax, 0 ; result = False
.AND_END166:
                                       movzx eax, al
                                       push rax ; result
                                    pop rdx ; __cond
                                    cmp rdx, 0 ; ensure condition is true
                                    je .__endif__163 ; jump to end
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 368]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 376]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx2
                                                      push qword [rbp - 384]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx3
                                                      push qword [rbp - 392]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 jmp .__endif__163 ; jump to end of condition chain
                                 ; End of if
.__endif__163:
                     ;---------------------------------------------------
                  ;------------------------------------------------------
                  ;------------------------------------------------------
                           ; End of if
.__endif__155:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 400]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 368]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 376]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 384]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 3
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx3
                                             push qword [rbp - 392]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Mod - int, int
                                 ; LHS
                                    ; Addition - int, int
                                       ; LHS
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       add rax, rdx
                                       push rax
                                 ; RHS
                                    ; Identifier - int shift_max
                                       push qword [rbp - 56]
                                 pop rdx
                                 pop rax
                                 mov rsi, rdx
                                 xor rdx, rdx
                                 cqo ; sign extend rax into rdx (specifically for 64bit -> 128bit)
                                 idiv rsi ; perform rdx:rax (128bit) / rsi (64bit)
                                 mov rax, rdx ; move remainder to rax
                                 push rax
                           pop rdx ; rhs value
                           mov qword [rbp - 48], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; OR
                                 ; Eval LHS
                                    ; Not Equal
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Member Accessor
                                                         ; LHS
                                                            ; Identifier - Vector<:char[]:> board
                                                               push qword [rbp - 40]
                                                         ; RHS
                                                            push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         push qword [rax + 8*rdx] ; lhs.rhs
                                                   ; OFFSET
                                                      ; Subtraction - int, int
                                                         ; LHS
                                                            ; Identifier - int posy
                                                               push qword [rbp - 400]
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         sub rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                             ; OFFSET
                                                ; Subscript
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 368]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                             movzx rax, al ; zero extend because we need to push 64bit to stack
                                             push rax ; push char onto stack
                                       ; RHS
                                          ; Char Literal
                                             push '.'
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       setne al
                                       movzx eax, al
                                       push rax
                                 ; Check if we need to short-circuit
                                    pop rax ; __lhs
                                    test rax, rax
                                    jne .OR_SHORT_CIRCUIT169
                                 ; Eval RHS
                                    ; Equal
                                       ; LHS
                                          ; Subtraction - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             sub rax, rdx
                                             push rax
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       sete al
                                       movzx eax, al
                                       push rax
                                 ; Check rhs
                                    pop rax ; __rhs
                                    test rax, rax
                                    je .OR_FALSE169 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT169:
                                 mov rax, 1 ; result = True
                                 jmp .OR_END169 ; skip false state
                                 ; False state
.OR_FALSE169:
                                 mov rax, 0 ; result = False
.OR_END169:
                                 movzx eax, al
                                 push rax ; result
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__168 ; jump to end
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "rock at rest"
                                             mov rax, .str19
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                                 ; Break out of __while__153
                                 jmp .__endwhile__153
                     ;---------------------------------------------------
                           jmp .__endif__168 ; jump to end of condition chain
                           ; End of if
.__endif__168:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 400]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 368]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 376]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 384]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 3
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx3
                                             push qword [rbp - 392]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '-='
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs value
                           mov rax, qword [rbp - 400] ; read lhs value
                           sub rax, rdx      ; lhs = lhs - rhs
                           mov qword [rbp - 400], rax ; write back to lhs
                           push rax          ; push result for other expressions
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 400]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 368]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 376]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 2
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx2
                                             push qword [rbp - 384]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 352]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 400]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 3
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx3
                                             push qword [rbp - 392]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
            ;------------------------------------------------------------
                  jmp .__while__153
                  ; End of While
.__endwhile__153:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
   ;---------------------------------------------------------------------
            ; Assignment - '+='
               ; RHS
                  ; Int Literal
                     mov rax, 1
                     push rax
               pop rdx ; rhs value
               mov rax, qword [rbp - 72] ; read lhs value
               add rax, rdx      ; add lhs and rhs
               mov qword [rbp - 72], rax ; write back to lhs
               push rax          ; push result for other expressions
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int num_rocks
                           push qword [rbp - 72]
                     ; RHS
                        ; Identifier - int max_rocks
                           push qword [rbp - 80]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__171 ; jump to end
               ; Body
                  ; Break out of __while__61
                  jmp .__endwhile__61
               jmp .__endif__171 ; jump to end of condition chain
               ; End of if
.__endif__171:
   ;---------------------------------------------------------------------
   ;---------------------------------------------------------------------
            ; Code Block
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 0
                        push rax
                  ; LHS
                     ; Variable Declaration - rock_height
                        mov rax, qword [rbp - 408]  ; __main__while__61__block__62__block__172__rock_height
                  pop rdx ; rhs value
                  mov qword [rbp - 408], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; For-Loop
               ; Init
                  ; Assignment - '='
                     ; RHS
                        ; Subtraction - int, int
                           ; LHS
                              ; Member Accessor
                                 ; LHS
                                    ; Identifier - Vector<:char[]:> board
                                       push qword [rbp - 40]
                                 ; RHS
                                    push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 push qword [rax + 8*rdx] ; lhs.rhs
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs
                           pop rax ; lhs
                           sub rax, rdx
                           push rax
                     ; LHS
                        ; Variable Declaration - i
                           mov rax, qword [rbp - 416]  ; __main__while__61__block__62__block__172__for__173__i
                     pop rdx ; rhs value
                     mov qword [rbp - 416], rdx
                     push rdx
                  ; Loop init result can be discarded
                  pop rax
               jmp .__forcond__173
.__for__173:
                  ; Update
                     ; Pre-Decrement - int
                        ; RHS
                           ; Identifier - int i
                              push qword [rbp - 416]
                        pop rdx
                        sub qword [rbp - 416], 1
                        mov rax, qword [rbp - 416]
                        push rax ; push result
                     ; Loop update result can be discarded
                     pop rax
.__forcond__173:
                  ; Condition
                     ; Greater Than or Equal to
                        ; LHS
                           ; Identifier - int i
                              push qword [rbp - 416]
                        ; RHS
                           ; Int Literal
                              mov rax, 0
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setge al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endfor__173
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
               ;---------------------------------------------------------
                        ; For-Loop
                        ; Init
                           ; Assignment - '='
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              ; LHS
                                 ; Variable Declaration - j
                                    mov rax, qword [rbp - 424]  ; __main__while__61__block__62__block__172__for__173__block__174__for__175__j
                              pop rdx ; rhs value
                              mov qword [rbp - 424], rdx
                              push rdx
                           ; Loop init result can be discarded
                           pop rax
                        jmp .__forcond__175
.__for__175:
                           ; Update
                              ; Pre-Increment - int
                                 ; RHS
                                    ; Identifier - int j
                                       push qword [rbp - 424]
                                 pop rdx
                                 add qword [rbp - 424], 1
                                 mov rax, qword [rbp - 424]
                                 push rax ; push result
                              ; Loop update result can be discarded
                              pop rax
.__forcond__175:
                           ; Condition
                              ; Less Than
                                 ; LHS
                                    ; Identifier - int j
                                       push qword [rbp - 424]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 8
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setl al
                                 movzx eax, al
                                 push rax
                              pop rax ; __cond
                              cmp rax, 0 ; __cond
                              je .__endfor__175
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; Not Equal
                                          ; LHS
                                             ; Subscript
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Member Accessor
                                                            ; LHS
                                                               ; Identifier - Vector<:char[]:> board
                                                                  push qword [rbp - 40]
                                                            ; RHS
                                                               push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            push qword [rax + 8*rdx] ; lhs.rhs
                                                      ; OFFSET
                                                         ; Identifier - int i
                                                            push qword [rbp - 416]
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                ; OFFSET
                                                   ; Identifier - int j
                                                      push qword [rbp - 424]
                                                pop rdx ; __offset
                                                pop rax ; __pointer
                                                mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                movzx rax, al ; zero extend because we need to push 64bit to stack
                                                push rax ; push char onto stack
                                          ; RHS
                                             ; Char Literal
                                                push '.'
                                          pop rdx ; rhs
                                          pop rax ; lhs
                                          cmp rax, rdx
                                          setne al
                                          movzx eax, al
                                          push rax
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__177 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '='
                                             ; RHS
                                                ; Identifier - int i
                                                   push qword [rbp - 416]
                                             pop rdx ; rhs value
                                             mov qword [rbp - 408], rdx
                                             push rdx
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Break out of __for__175
                                          jmp .__endfor__175
                              ;------------------------------------------
                                    jmp .__endif__177 ; jump to end of condition chain
                                    ; End of if
.__endif__177:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           ; Repeat
jmp .__for__175
                           ; End of For
.__endfor__175:
               ;---------------------------------------------------------
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Not Equal
                                 ; LHS
                                    ; Identifier - int rock_height
                                       push qword [rbp - 408]
                                 ; RHS
                                    ; Int Literal
                                       mov rax, 0
                                       push rax
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 setne al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__179 ; jump to end
                           ; Body
                              ; Break out of __for__173
                              jmp .__endfor__173
                           jmp .__endif__179 ; jump to end of condition chain
                           ; End of if
.__endif__179:
               ;---------------------------------------------------------
            ;------------------------------------------------------------
                  ; Repeat
jmp .__for__173
                  ; End of For
.__endfor__173:
      ;------------------------------------------------------------------
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 2
                        push rax
                  ; LHS
                     ; Variable Declaration - shape_height
                        mov rax, qword [rbp - 432]  ; __main__while__61__block__62__block__172__shape_height
                  pop rdx ; rhs value
                  mov qword [rbp - 432], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Char Literal
                        push '4'
                  ; LHS
                     ; Variable Declaration - rock_char
                        mov rax, qword [rbp - 440]  ; __main__while__61__block__62__block__172__rock_char
                  pop rdx ; rhs value
                  mov byte [rbp - 440], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 408]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int shape_height
                              push qword [rbp - 432]
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - desired_height
                        mov rax, qword [rbp - 448]  ; __main__while__61__block__62__block__172__desired_height
                  pop rdx ; rhs value
                  mov qword [rbp - 448], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__180:
                  ; Condition
                     ; Less Than
                        ; LHS
                           ; Subtraction - int, int
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; RHS
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              sub rax, rdx
                              push rax
                        ; RHS
                           ; Identifier - int desired_height
                              push qword [rbp - 448]
                        pop rdx ; rhs
                        pop rax ; lhs
                        cmp rax, rdx
                        setl al
                        movzx eax, al
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__180
                  ; Body
                     ; Method Call - Vector<:char[]:>::pushBack(char[]) -> void
                        ; Make space for 1 arg(s) and object parameter
                        sub rsp, 16
                        ; LHS
                           ; Identifier - Vector<:char[]:> board
                              push qword [rbp - 40]
                           pop rax ; object parameter
                           mov qword [rsp + 0], rax ; place as first parameter
                        ; RHS
                        ; Arguments
                           ; Eval arg0
                              ; String Literal
                                 ; "|.......|"
                                 mov rax, .str20
                                 push rax
                           ; Move arg0's result to reverse order position on stack
                           pop rax
                           mov qword [rsp + 8], rax
                        call .__method____main____Vector__char__1____pushBack__char__1
                        ; Remove args
                        add rsp, 16
                        ; Push return value
                        push rax
                     ; Statement results can be ignored
                     pop rdx
                  jmp .__while__180
                  ; End of While
.__endwhile__180:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        ; Int Literal
                           mov rax, 4
                           push rax
                        mov edi, 16 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 1
                        mov qword [rax + 8], rdx ; arr[1] = rdx
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx0
                        mov rax, qword [rbp - 456]  ; __main__while__61__block__62__block__172__posx0
                  pop rdx ; rhs value
                  mov qword [rbp - 456], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Array Constructor
                        ; Elements
                        ; Int Literal
                           mov rax, 3
                           push rax
                        ; Int Literal
                           mov rax, 4
                           push rax
                        mov edi, 16 ; number of bytes to allocate (nArgs * 8bytes)
                        call malloc ; allocates edi bytes on heap and stores pointer in rax
                        ; Populate array values
                        pop rdx ; get array element 1
                        mov qword [rax + 8], rdx ; arr[1] = rdx
                        pop rdx ; get array element 0
                        mov qword [rax + 0], rdx ; arr[0] = rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posx1
                        mov rax, qword [rbp - 464]  ; __main__while__61__block__62__block__172__posx1
                  pop rdx ; rhs value
                  mov qword [rbp - 464], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Addition - int, int
                        ; LHS
                           ; Addition - int, int
                              ; LHS
                                 ; Identifier - int rock_height
                                    push qword [rbp - 408]
                              ; RHS
                                 ; Int Literal
                                    mov rax, 3
                                    push rax
                              pop rdx ; rhs
                              pop rax ; lhs
                              add rax, rdx
                              push rax
                        ; RHS
                           ; Int Literal
                              mov rax, 1
                              push rax
                        pop rdx ; rhs
                        pop rax ; lhs
                        add rax, rdx
                        push rax
                  ; LHS
                     ; Variable Declaration - posy
                        mov rax, qword [rbp - 472]  ; __main__while__61__block__62__block__172__posy
                  pop rdx ; rhs value
                  mov qword [rbp - 472], rdx
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 440]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 472]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 456]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 440]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Identifier - int posy
                                    push qword [rbp - 472]
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx0
                                    push qword [rbp - 456]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 440]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 472]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 464]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 0
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Assignment - '='
                  ; RHS
                     ; Identifier - char rock_char
                        mov al, byte [rbp - 440]
                        movzx rax, al
                        push rax
                  ; LHS
                     ; Subscript assignment
                        ; LHS
                           ; Subscript
                              ; LHS
                                 ; Member Accessor
                                    ; LHS
                                       ; Identifier - Vector<:char[]:> board
                                          push qword [rbp - 40]
                                    ; RHS
                                       push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    push qword [rax + 8*rdx] ; lhs.rhs
                              ; OFFSET
                                 ; Addition - int, int
                                    ; LHS
                                       ; Identifier - int posy
                                          push qword [rbp - 472]
                                    ; RHS
                                       ; Int Literal
                                          mov rax, 1
                                          push rax
                                    pop rdx ; rhs
                                    pop rax ; lhs
                                    add rax, rdx
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        ; OFFSET
                           ; Subscript
                              ; LHS
                                 ; Identifier - int[] posx1
                                    push qword [rbp - 464]
                              ; OFFSET
                                 ; Int Literal
                                    mov rax, 1
                                    push rax
                              pop rdx ; __offset
                              pop rax ; __pointer
                              push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                        pop rdi ; __offset
                        pop rbx ; __pointer
                  pop rdx ; rhs value
                  mov byte [rbx + rdi], dl
                  push rdx
               ; Statement results can be ignored
               pop rdx
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
      ;------------------------------------------------------------------
               ; While-Loop
.__while__181:
                  ; Condition
                     ; Int Literal
                        mov rax, 1
                        push rax
                     pop rax ; __cond
                     cmp rax, 0 ; __cond
                     je .__endwhile__181
                  ; Body
            ;------------------------------------------------------------
                     ; Code Block
                        ; Function Call - println(int) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - int shift_index
                                    push qword [rbp - 48]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call println(int)
                           call __builtin__println__int
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; Equal
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Subscript
                                             ; LHS
                                                ; Member Accessor
                                                   ; LHS
                                                      ; Identifier - Vector<:char[]:> lines
                                                         push qword [rbp - 16]
                                                   ; RHS
                                                      push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                   pop rdx ; rhs
                                                   pop rax ; lhs
                                                   push qword [rax + 8*rdx] ; lhs.rhs
                                             ; OFFSET
                                                ; Int Literal
                                                   mov rax, 0
                                                   push rax
                                             pop rdx ; __offset
                                             pop rax ; __pointer
                                             push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                       ; OFFSET
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                       movzx rax, al ; zero extend because we need to push 64bit to stack
                                       push rax ; push char onto stack
                                 ; RHS
                                    ; Char Literal
                                       push '<'
                                 pop rdx ; rhs
                                 pop rax ; lhs
                                 cmp rax, rdx
                                 sete al
                                 movzx eax, al
                                 push rax
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__else__183 ; jump to else
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "shift left"
                                             mov rax, .str21
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                        ;------------------------------------------------
                                 ; If-Statement
                                    ; Condition
                                       ; AND
                                          ; Eval LHS
                                             ; Equal
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Member Accessor
                                                                  ; LHS
                                                                     ; Identifier - Vector<:char[]:> board
                                                                        push qword [rbp - 40]
                                                                  ; RHS
                                                                     push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  push qword [rax + 8*rdx] ; lhs.rhs
                                                            ; OFFSET
                                                               ; Identifier - int posy
                                                                  push qword [rbp - 472]
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                      ; OFFSET
                                                         ; Subtraction - int, int
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Identifier - int[] posx0
                                                                        push qword [rbp - 456]
                                                                  ; OFFSET
                                                                     ; Int Literal
                                                                        mov rax, 0
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; RHS
                                                               ; Int Literal
                                                                  mov rax, 1
                                                                  push rax
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            sub rax, rdx
                                                            push rax
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                      movzx rax, al ; zero extend because we need to push 64bit to stack
                                                      push rax ; push char onto stack
                                                ; RHS
                                                   ; Char Literal
                                                      push '.'
                                                pop rdx ; rhs
                                                pop rax ; lhs
                                                cmp rax, rdx
                                                sete al
                                                movzx eax, al
                                                push rax
                                          ; Check if we need to short-circuit
                                             pop rax ; __lhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT186
                                          ; Eval RHS
                                             ; Equal
                                                ; LHS
                                                   ; Subscript
                                                      ; LHS
                                                         ; Subscript
                                                            ; LHS
                                                               ; Member Accessor
                                                                  ; LHS
                                                                     ; Identifier - Vector<:char[]:> board
                                                                        push qword [rbp - 40]
                                                                  ; RHS
                                                                     push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  push qword [rax + 8*rdx] ; lhs.rhs
                                                            ; OFFSET
                                                               ; Addition - int, int
                                                                  ; LHS
                                                                     ; Identifier - int posy
                                                                        push qword [rbp - 472]
                                                                  ; RHS
                                                                     ; Int Literal
                                                                        mov rax, 1
                                                                        push rax
                                                                  pop rdx ; rhs
                                                                  pop rax ; lhs
                                                                  add rax, rdx
                                                                  push rax
                                                            pop rdx ; __offset
                                                            pop rax ; __pointer
                                                            push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                      ; OFFSET
                                                         ; Subtraction - int, int
                                                            ; LHS
                                                               ; Subscript
                                                                  ; LHS
                                                                     ; Identifier - int[] posx1
                                                                        push qword [rbp - 464]
                                                                  ; OFFSET
                                                                     ; Int Literal
                                                                        mov rax, 0
                                                                        push rax
                                                                  pop rdx ; __offset
                                                                  pop rax ; __pointer
                                                                  push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                            ; RHS
                                                               ; Int Literal
                                                                  mov rax, 1
                                                                  push rax
                                                            pop rdx ; rhs
                                                            pop rax ; lhs
                                                            sub rax, rdx
                                                            push rax
                                                      pop rdx ; __offset
                                                      pop rax ; __pointer
                                                      mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                      movzx rax, al ; zero extend because we need to push 64bit to stack
                                                      push rax ; push char onto stack
                                                ; RHS
                                                   ; Char Literal
                                                      push '.'
                                                pop rdx ; rhs
                                                pop rax ; lhs
                                                cmp rax, rdx
                                                sete al
                                                movzx eax, al
                                                push rax
                                          ; Check RHS
                                             pop rax ; __rhs
                                             test rax, rax
                                             je .AND_SHORT_CIRCUIT186
                                          ; Success state
                                          mov rax, 1 ; result = True
                                          jmp .AND_END186
.AND_SHORT_CIRCUIT186:
                                          mov rax, 0 ; result = False
.AND_END186:
                                          movzx eax, al
                                          push rax ; result
                                       pop rdx ; __cond
                                       cmp rdx, 0 ; ensure condition is true
                                       je .__endif__185 ; jump to end
                                    ; Body
                              ;------------------------------------------
                                       ; Code Block
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 456]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx0
                                                         push qword [rbp - 456]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 1
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 464]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 0
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                                          ; Assignment - '-='
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             ; LHS
                                                ; Subscript assignment
                                                   ; LHS
                                                      ; Identifier - int[] posx1
                                                         push qword [rbp - 464]
                                                   ; OFFSET
                                                      ; Int Literal
                                                         mov rax, 1
                                                         push rax
                                                   pop rdi ; __offset
                                                   pop rbx ; __pointer
                                             pop rdx ; rhs value
                                             mov rax, qword [rbx + 8*rdi] ; read lhs value
                                             sub rax, rdx      ; lhs = lhs - rhs
                                             mov qword [rbx + 8*rdi], rax ; write back to lhs
                                             push rax          ; push result for other expressions
                                          ; Statement results can be ignored
                                          pop rdx
                              ;------------------------------------------
                                    jmp .__endif__185 ; jump to end of condition chain
                                    ; End of if
.__endif__185:
                        ;------------------------------------------------
                     ;---------------------------------------------------
                           jmp .__endif__183 ; jump to end of condition chain
                  ;------------------------------------------------------
                           ; Else-Statement
.__else__183:
                  ;------------------------------------------------------
                           ; Code Block
                              ; Function Call - println(char[]) -> void
                                 ; Make space for 1 arg(s)
                                 sub rsp, 8
                                 ; Arguments
                                    ; Eval arg0
                                       ; String Literal
                                          ; "shift right"
                                          mov rax, .str22
                                          push rax
                                    ; Move arg0's result to reverse order position on stack
                                    pop rax
                                    mov qword [rsp + 0], rax
                                 ; Call println(char[])
                                 call __builtin__println__char__1
                                 ; Remove args
                                 add rsp, 8
                                 ; Push return value
                                 push rax
                              ; Statement results can be ignored
                              pop rdx
                     ;---------------------------------------------------
                              ; If-Statement
                                 ; Condition
                                    ; AND
                                       ; Eval LHS
                                          ; Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Identifier - int posy
                                                               push qword [rbp - 472]
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Addition - int, int
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx0
                                                                     push qword [rbp - 456]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         add rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             sete al
                                             movzx eax, al
                                             push rax
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT190
                                       ; Eval RHS
                                          ; Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Addition - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 472]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               add rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Addition - int, int
                                                         ; LHS
                                                            ; Subscript
                                                               ; LHS
                                                                  ; Identifier - int[] posx1
                                                                     push qword [rbp - 464]
                                                               ; OFFSET
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; __offset
                                                               pop rax ; __pointer
                                                               push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                         ; RHS
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; rhs
                                                         pop rax ; lhs
                                                         add rax, rdx
                                                         push rax
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             sete al
                                             movzx eax, al
                                             push rax
                                       ; Check RHS
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .AND_SHORT_CIRCUIT190
                                       ; Success state
                                       mov rax, 1 ; result = True
                                       jmp .AND_END190
.AND_SHORT_CIRCUIT190:
                                       mov rax, 0 ; result = False
.AND_END190:
                                       movzx eax, al
                                       push rax ; result
                                    pop rdx ; __cond
                                    cmp rdx, 0 ; ensure condition is true
                                    je .__endif__189 ; jump to end
                                 ; Body
                           ;---------------------------------------------
                                    ; Code Block
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 456]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx0
                                                      push qword [rbp - 456]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 1
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 464]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 0
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                                       ; Assignment - '+='
                                          ; RHS
                                             ; Int Literal
                                                mov rax, 1
                                                push rax
                                          ; LHS
                                             ; Subscript assignment
                                                ; LHS
                                                   ; Identifier - int[] posx1
                                                      push qword [rbp - 464]
                                                ; OFFSET
                                                   ; Int Literal
                                                      mov rax, 1
                                                      push rax
                                                pop rdi ; __offset
                                                pop rbx ; __pointer
                                          pop rdx ; rhs value
                                          mov rax, qword [rbx + 8*rdi] ; read lhs value
                                          add rax, rdx      ; add lhs and rhs
                                          mov qword [rbx + 8*rdi], rax ; write back to lhs
                                          push rax          ; push result for other expressions
                                       ; Statement results can be ignored
                                       pop rdx
                           ;---------------------------------------------
                                 jmp .__endif__189 ; jump to end of condition chain
                                 ; End of if
.__endif__189:
                     ;---------------------------------------------------
                  ;------------------------------------------------------
                  ;------------------------------------------------------
                           ; End of if
.__endif__183:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Mod - int, int
                                 ; LHS
                                    ; Addition - int, int
                                       ; LHS
                                          ; Identifier - int shift_index
                                             push qword [rbp - 48]
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       add rax, rdx
                                       push rax
                                 ; RHS
                                    ; Identifier - int shift_max
                                       push qword [rbp - 56]
                                 pop rdx
                                 pop rax
                                 mov rsi, rdx
                                 xor rdx, rdx
                                 cqo ; sign extend rax into rdx (specifically for 64bit -> 128bit)
                                 idiv rsi ; perform rdx:rax (128bit) / rsi (64bit)
                                 mov rax, rdx ; move remainder to rax
                                 push rax
                           pop rdx ; rhs value
                           mov qword [rbp - 48], rdx
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
               ;---------------------------------------------------------
                        ; If-Statement
                           ; Condition
                              ; OR
                                 ; Eval LHS
                                    ; OR
                                       ; Eval LHS
                                          ; Not Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Subtraction - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 472]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               sub rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Subscript
                                                         ; LHS
                                                            ; Identifier - int[] posx0
                                                               push qword [rbp - 456]
                                                         ; OFFSET
                                                            ; Int Literal
                                                               mov rax, 0
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             setne al
                                             movzx eax, al
                                             push rax
                                       ; Check if we need to short-circuit
                                          pop rax ; __lhs
                                          test rax, rax
                                          jne .OR_SHORT_CIRCUIT193
                                       ; Eval RHS
                                          ; Not Equal
                                             ; LHS
                                                ; Subscript
                                                   ; LHS
                                                      ; Subscript
                                                         ; LHS
                                                            ; Member Accessor
                                                               ; LHS
                                                                  ; Identifier - Vector<:char[]:> board
                                                                     push qword [rbp - 40]
                                                               ; RHS
                                                                  push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               push qword [rax + 8*rdx] ; lhs.rhs
                                                         ; OFFSET
                                                            ; Subtraction - int, int
                                                               ; LHS
                                                                  ; Identifier - int posy
                                                                     push qword [rbp - 472]
                                                               ; RHS
                                                                  ; Int Literal
                                                                     mov rax, 1
                                                                     push rax
                                                               pop rdx ; rhs
                                                               pop rax ; lhs
                                                               sub rax, rdx
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   ; OFFSET
                                                      ; Subscript
                                                         ; LHS
                                                            ; Identifier - int[] posx0
                                                               push qword [rbp - 456]
                                                         ; OFFSET
                                                            ; Int Literal
                                                               mov rax, 1
                                                               push rax
                                                         pop rdx ; __offset
                                                         pop rax ; __pointer
                                                         push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                                   pop rdx ; __offset
                                                   pop rax ; __pointer
                                                   mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                                   movzx rax, al ; zero extend because we need to push 64bit to stack
                                                   push rax ; push char onto stack
                                             ; RHS
                                                ; Char Literal
                                                   push '.'
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             cmp rax, rdx
                                             setne al
                                             movzx eax, al
                                             push rax
                                       ; Check rhs
                                          pop rax ; __rhs
                                          test rax, rax
                                          je .OR_FALSE193 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT193:
                                       mov rax, 1 ; result = True
                                       jmp .OR_END193 ; skip false state
                                       ; False state
.OR_FALSE193:
                                       mov rax, 0 ; result = False
.OR_END193:
                                       movzx eax, al
                                       push rax ; result
                                 ; Check if we need to short-circuit
                                    pop rax ; __lhs
                                    test rax, rax
                                    jne .OR_SHORT_CIRCUIT194
                                 ; Eval RHS
                                    ; Equal
                                       ; LHS
                                          ; Subtraction - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             sub rax, rdx
                                             push rax
                                       ; RHS
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; rhs
                                       pop rax ; lhs
                                       cmp rax, rdx
                                       sete al
                                       movzx eax, al
                                       push rax
                                 ; Check rhs
                                    pop rax ; __rhs
                                    test rax, rax
                                    je .OR_FALSE194 ; skip true state if false (rax == 0)
.OR_SHORT_CIRCUIT194:
                                 mov rax, 1 ; result = True
                                 jmp .OR_END194 ; skip false state
                                 ; False state
.OR_FALSE194:
                                 mov rax, 0 ; result = False
.OR_END194:
                                 movzx eax, al
                                 push rax ; result
                              pop rdx ; __cond
                              cmp rdx, 0 ; ensure condition is true
                              je .__endif__192 ; jump to end
                           ; Body
                     ;---------------------------------------------------
                              ; Code Block
                                 ; Function Call - println(char[]) -> void
                                    ; Make space for 1 arg(s)
                                    sub rsp, 8
                                    ; Arguments
                                       ; Eval arg0
                                          ; String Literal
                                             ; "rock at rest"
                                             mov rax, .str23
                                             push rax
                                       ; Move arg0's result to reverse order position on stack
                                       pop rax
                                       mov qword [rsp + 0], rax
                                    ; Call println(char[])
                                    call __builtin__println__char__1
                                    ; Remove args
                                    add rsp, 8
                                    ; Push return value
                                    push rax
                                 ; Statement results can be ignored
                                 pop rdx
                                 ; Break out of __while__181
                                 jmp .__endwhile__181
                     ;---------------------------------------------------
                           jmp .__endif__192 ; jump to end of condition chain
                           ; End of if
.__endif__192:
               ;---------------------------------------------------------
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Char Literal
                                 push '.'
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '-='
                           ; RHS
                              ; Int Literal
                                 mov rax, 1
                                 push rax
                           pop rdx ; rhs value
                           mov rax, qword [rbp - 472] ; read lhs value
                           sub rax, rdx      ; lhs = lhs - rhs
                           mov qword [rbp - 472], rax ; write back to lhs
                           push rax          ; push result for other expressions
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Identifier - int posy
                                             push qword [rbp - 472]
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx0
                                             push qword [rbp - 456]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 0
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Assignment - '='
                           ; RHS
                              ; Identifier - char rock_char
                                 mov al, byte [rbp - 440]
                                 movzx rax, al
                                 push rax
                           ; LHS
                              ; Subscript assignment
                                 ; LHS
                                    ; Subscript
                                       ; LHS
                                          ; Member Accessor
                                             ; LHS
                                                ; Identifier - Vector<:char[]:> board
                                                   push qword [rbp - 40]
                                             ; RHS
                                                push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             push qword [rax + 8*rdx] ; lhs.rhs
                                       ; OFFSET
                                          ; Addition - int, int
                                             ; LHS
                                                ; Identifier - int posy
                                                   push qword [rbp - 472]
                                             ; RHS
                                                ; Int Literal
                                                   mov rax, 1
                                                   push rax
                                             pop rdx ; rhs
                                             pop rax ; lhs
                                             add rax, rdx
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 ; OFFSET
                                    ; Subscript
                                       ; LHS
                                          ; Identifier - int[] posx1
                                             push qword [rbp - 464]
                                       ; OFFSET
                                          ; Int Literal
                                             mov rax, 1
                                             push rax
                                       pop rdx ; __offset
                                       pop rax ; __pointer
                                       push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                 pop rdi ; __offset
                                 pop rbx ; __pointer
                           pop rdx ; rhs value
                           mov byte [rbx + rdi], dl
                           push rdx
                        ; Statement results can be ignored
                        pop rdx
                        ; Function Call - printboard(Vector<:char[]:>) -> void
                           ; Make space for 1 arg(s)
                           sub rsp, 8
                           ; Arguments
                              ; Eval arg0
                                 ; Identifier - Vector<:char[]:> board
                                    push qword [rbp - 40]
                              ; Move arg0's result to reverse order position on stack
                              pop rax
                              mov qword [rsp + 0], rax
                           ; Call printboard(Vector<:char[]:>)
                           call .__main____printboard__Vector__tparam0__char
                           ; Remove args
                           add rsp, 8
                           ; Push return value
                           push rax
                        ; Statement results can be ignored
                        pop rdx
            ;------------------------------------------------------------
                  jmp .__while__181
                  ; End of While
.__endwhile__181:
      ;------------------------------------------------------------------
               ; Function Call - printboard(Vector<:char[]:>) -> void
                  ; Make space for 1 arg(s)
                  sub rsp, 8
                  ; Arguments
                     ; Eval arg0
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; Move arg0's result to reverse order position on stack
                     pop rax
                     mov qword [rsp + 0], rax
                  ; Call printboard(Vector<:char[]:>)
                  call .__main____printboard__Vector__tparam0__char
                  ; Remove args
                  add rsp, 8
                  ; Push return value
                  push rax
               ; Statement results can be ignored
               pop rdx
   ;---------------------------------------------------------------------
            ; Assignment - '+='
               ; RHS
                  ; Int Literal
                     mov rax, 1
                     push rax
               pop rdx ; rhs value
               mov rax, qword [rbp - 72] ; read lhs value
               add rax, rdx      ; add lhs and rhs
               mov qword [rbp - 72], rax ; write back to lhs
               push rax          ; push result for other expressions
            ; Statement results can be ignored
            pop rdx
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Greater Than or Equal to
                     ; LHS
                        ; Identifier - int num_rocks
                           push qword [rbp - 72]
                     ; RHS
                        ; Identifier - int max_rocks
                           push qword [rbp - 80]
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setge al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__196 ; jump to end
               ; Body
                  ; Break out of __while__61
                  jmp .__endwhile__61
               jmp .__endif__196 ; jump to end of condition chain
               ; End of if
.__endif__196:
   ;---------------------------------------------------------------------
;------------------------------------------------------------------------
         jmp .__while__61
         ; End of While
.__endwhile__61:
;------------------------------------------------------------------------------
         ; Assignment - '='
         ; RHS
         ; Int Literal
            mov rax, 0
            push rax
         ; LHS
         ; Variable Declaration - rock_height
            mov rax, qword [rbp - 480]  ; __main__rock_height
         pop rdx ; rhs value
         mov qword [rbp - 480], rdx
         push rdx
         ; Statement results can be ignored
         pop rdx
;------------------------------------------------------------------------------
         ; For-Loop
         ; Init
         ; Assignment - '='
         ; RHS
            ; Subtraction - int, int
               ; LHS
                  ; Member Accessor
                     ; LHS
                        ; Identifier - Vector<:char[]:> board
                           push qword [rbp - 40]
                     ; RHS
                        push qword [.__field____main____Vector__char__1____size] ; stored index associated with field that is being accessed
                     pop rdx ; rhs
                     pop rax ; lhs
                     push qword [rax + 8*rdx] ; lhs.rhs
               ; RHS
                  ; Int Literal
                     mov rax, 1
                     push rax
               pop rdx ; rhs
               pop rax ; lhs
               sub rax, rdx
               push rax
         ; LHS
            ; Variable Declaration - i
               mov rax, qword [rbp - 488]  ; __main__for__197__i
         pop rdx ; rhs value
         mov qword [rbp - 488], rdx
         push rdx
         ; Loop init result can be discarded
         pop rax
         jmp .__forcond__197
.__for__197:
         ; Update
         ; Pre-Decrement - int
            ; RHS
               ; Identifier - int i
                  push qword [rbp - 488]
            pop rdx
            sub qword [rbp - 488], 1
            mov rax, qword [rbp - 488]
            push rax ; push result
         ; Loop update result can be discarded
         pop rax
.__forcond__197:
         ; Condition
         ; Greater Than or Equal to
            ; LHS
               ; Identifier - int i
                  push qword [rbp - 488]
            ; RHS
               ; Int Literal
                  mov rax, 0
                  push rax
            pop rdx ; rhs
            pop rax ; lhs
            cmp rax, rdx
            setge al
            movzx eax, al
            push rax
         pop rax ; __cond
         cmp rax, 0 ; __cond
         je .__endfor__197
         ; Body
;------------------------------------------------------------------------
         ; Code Block
   ;---------------------------------------------------------------------
            ; For-Loop
            ; Init
               ; Assignment - '='
                  ; RHS
                     ; Int Literal
                        mov rax, 1
                        push rax
                  ; LHS
                     ; Variable Declaration - j
                        mov rax, qword [rbp - 496]  ; __main__for__197__block__198__for__199__j
                  pop rdx ; rhs value
                  mov qword [rbp - 496], rdx
                  push rdx
               ; Loop init result can be discarded
               pop rax
            jmp .__forcond__199
.__for__199:
               ; Update
                  ; Pre-Increment - int
                     ; RHS
                        ; Identifier - int j
                           push qword [rbp - 496]
                     pop rdx
                     add qword [rbp - 496], 1
                     mov rax, qword [rbp - 496]
                     push rax ; push result
                  ; Loop update result can be discarded
                  pop rax
.__forcond__199:
               ; Condition
                  ; Less Than
                     ; LHS
                        ; Identifier - int j
                           push qword [rbp - 496]
                     ; RHS
                        ; Int Literal
                           mov rax, 8
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setl al
                     movzx eax, al
                     push rax
                  pop rax ; __cond
                  cmp rax, 0 ; __cond
                  je .__endfor__199
               ; Body
         ;---------------------------------------------------------------
                  ; Code Block
            ;------------------------------------------------------------
                     ; If-Statement
                        ; Condition
                           ; Not Equal
                              ; LHS
                                 ; Subscript
                                    ; LHS
                                       ; Subscript
                                          ; LHS
                                             ; Member Accessor
                                                ; LHS
                                                   ; Identifier - Vector<:char[]:> board
                                                      push qword [rbp - 40]
                                                ; RHS
                                                   push qword [.__field____main____Vector__char__1____data] ; stored index associated with field that is being accessed
                                                pop rdx ; rhs
                                                pop rax ; lhs
                                                push qword [rax + 8*rdx] ; lhs.rhs
                                          ; OFFSET
                                             ; Identifier - int i
                                                push qword [rbp - 488]
                                          pop rdx ; __offset
                                          pop rax ; __pointer
                                          push qword [rax + 8*rdx] ; pointer + sizeof(data_t) * offset
                                    ; OFFSET
                                       ; Identifier - int j
                                          push qword [rbp - 496]
                                    pop rdx ; __offset
                                    pop rax ; __pointer
                                    mov al, byte [rax + rdx] ; pointer + sizeof(data_t) * offset
                                    movzx rax, al ; zero extend because we need to push 64bit to stack
                                    push rax ; push char onto stack
                              ; RHS
                                 ; Char Literal
                                    push '.'
                              pop rdx ; rhs
                              pop rax ; lhs
                              cmp rax, rdx
                              setne al
                              movzx eax, al
                              push rax
                           pop rdx ; __cond
                           cmp rdx, 0 ; ensure condition is true
                           je .__endif__201 ; jump to end
                        ; Body
                  ;------------------------------------------------------
                           ; Code Block
                              ; Assignment - '='
                                 ; RHS
                                    ; Identifier - int i
                                       push qword [rbp - 488]
                                 pop rdx ; rhs value
                                 mov qword [rbp - 480], rdx
                                 push rdx
                              ; Statement results can be ignored
                              pop rdx
                              ; Break out of __for__199
                              jmp .__endfor__199
                  ;------------------------------------------------------
                        jmp .__endif__201 ; jump to end of condition chain
                        ; End of if
.__endif__201:
            ;------------------------------------------------------------
         ;---------------------------------------------------------------
               ; Repeat
jmp .__for__199
               ; End of For
.__endfor__199:
   ;---------------------------------------------------------------------
   ;---------------------------------------------------------------------
            ; If-Statement
               ; Condition
                  ; Not Equal
                     ; LHS
                        ; Identifier - int rock_height
                           push qword [rbp - 480]
                     ; RHS
                        ; Int Literal
                           mov rax, 0
                           push rax
                     pop rdx ; rhs
                     pop rax ; lhs
                     cmp rax, rdx
                     setne al
                     movzx eax, al
                     push rax
                  pop rdx ; __cond
                  cmp rdx, 0 ; ensure condition is true
                  je .__endif__203 ; jump to end
               ; Body
                  ; Break out of __for__197
                  jmp .__endfor__197
               jmp .__endif__203 ; jump to end of condition chain
               ; End of if
.__endif__203:
   ;---------------------------------------------------------------------
;------------------------------------------------------------------------
         ; Repeat
jmp .__for__197
         ; End of For
.__endfor__197:
;------------------------------------------------------------------------------
         ; Function Call - printboard2(Vector<:char[]:>) -> void
         ; Make space for 1 arg(s)
         sub rsp, 8
         ; Arguments
         ; Eval arg0
            ; Identifier - Vector<:char[]:> board
               push qword [rbp - 40]
         ; Move arg0's result to reverse order position on stack
         pop rax
         mov qword [rsp + 0], rax
         ; Call printboard2(Vector<:char[]:>)
         call .__main____printboard2__Vector__tparam0__char
         ; Remove args
         add rsp, 8
         ; Push return value
         push rax
         ; Statement results can be ignored
         pop rdx
         ; Function Call - println(int) -> void
         ; Make space for 1 arg(s)
         sub rsp, 8
         ; Arguments
         ; Eval arg0
            ; Identifier - int rock_height
               push qword [rbp - 480]
         ; Move arg0's result to reverse order position on stack
         pop rax
         mov qword [rsp + 0], rax
         ; Call println(int)
         call __builtin__println__int
         ; Remove args
         add rsp, 8
         ; Push return value
         push rax
         ; Statement results can be ignored
         pop rdx
; ==============================================================================
; ### END OF CODE ##############################################################
; ==============================================================================

         push 0
         call __builtin__exit__int
; ==============================================================================
; ### DATA SECTION #############################################################
; ==============================================================================

         section .data
.str0: db '+', '-', '-', '-', '-', '-', '-', '-', '+', 0
.str1: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str2: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str3: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str4: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str5: db 's', 'h', 'i', 'f', 't', ' ', 'l', 'e', 'f', 't', 0
.str6: db 's', 'h', 'i', 'f', 't', ' ', 'r', 'i', 'g', 'h', 't', 0
.str7: db 'r', 'o', 'c', 'k', ' ', 'a', 't', ' ', 'r', 'e', 's', 't', 0
.str8: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str9: db 's', 'h', 'i', 'f', 't', ' ', 'l', 'e', 'f', 't', 0
.str10: db 's', 'h', 'i', 'f', 't', ' ', 'r', 'i', 'g', 'h', 't', 0
.str11: db 'r', 'o', 'c', 'k', ' ', 'a', 't', ' ', 'r', 'e', 's', 't', 0
.str12: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str13: db 's', 'h', 'i', 'f', 't', ' ', 'l', 'e', 'f', 't', 0
.str14: db 's', 'h', 'i', 'f', 't', ' ', 'r', 'i', 'g', 'h', 't', 0
.str15: db 'r', 'o', 'c', 'k', ' ', 'a', 't', ' ', 'r', 'e', 's', 't', 0
.str16: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str17: db 's', 'h', 'i', 'f', 't', ' ', 'l', 'e', 'f', 't', 0
.str18: db 's', 'h', 'i', 'f', 't', ' ', 'r', 'i', 'g', 'h', 't', 0
.str19: db 'r', 'o', 'c', 'k', ' ', 'a', 't', ' ', 'r', 'e', 's', 't', 0
.str20: db '|', '.', '.', '.', '.', '.', '.', '.', '|', 0
.str21: db 's', 'h', 'i', 'f', 't', ' ', 'l', 'e', 'f', 't', 0
.str22: db 's', 'h', 'i', 'f', 't', ' ', 'r', 'i', 'g', 'h', 't', 0
.str23: db 'r', 'o', 'c', 'k', ' ', 'a', 't', ' ', 'r', 'e', 's', 't', 0
.float0: dq 0.0
.floatNegOne: dq -1.0
.floatZero: dq 0.0
.floatOne: dq 1.0
