

#include "Vector.amy"
#include "algorithms.amy"

char[] line = input();
Vector<:char[]:> lines = new Vector<:char[]:> ();
while (line != null)
{
    lines.pushBack (line);
    line = input();
}

function int manhattan (int ax, int ay, int bx, int by)
{
    return abs (ax - bx) + abs (ay - by);
}

class Point
{
    public field int x;
    public field int y;
    constructor (int x, int y)
    {
        this.x = x;
        this.y = y;
    }
}

function void print (Point p)
{
    print ('('); print (p.x); print (','); print (' '); print (p.y); print(')');
}

Vector<:Point:> knot_positions = new Vector<:Point:> ();
// all start at the same pos
for (int i = 0; i < 10; ++i)
    knot_positions.pushBack (new Point (0, 0));

Vector<:Point:> tail_positions = new Vector<:Point:> ();
int xmin = 0;
int xmax = 0;
int ymin = 0;
int ymax = 0;
// save tail's starting position
tail_positions.pushBack (new Point(0,0));
for (int i = 0; i < lines.size; ++i)
{
    char[] line = lines.data[i];

    Vector<:char[]:> tokens = split (line, ' ');
    int amt = stringToInt (tokens.data[1]);

    //print ('('); print (i); print ('/'); print (lines.size); print (')'); print (' ');
    //println (tokens.data[0]);

    for (int j = 0; j < amt; ++j)
    {  
        // move head
        if (tokens.data[0][0] == 'U')
        {
            knot_positions.data[0].y += 1;
        }
        elif (tokens.data[0][0] == 'R')
        {
            knot_positions.data[0].x += 1;
        }
        elif (tokens.data[0][0] == 'D')
        {
            knot_positions.data[0].y -= 1;
        }
        elif (tokens.data[0][0] == 'L')
        {
            knot_positions.data[0].x -= 1;
        }
        // move each of the rest of the body
        int tail_moved = 0;
        for (int w = 1; w < 10; ++w)
        {
            // fix tail position 
            int hx = knot_positions.data[w-1].x;
            int hy = knot_positions.data[w-1].y;
            int tx = knot_positions.data[w].x;
            int ty = knot_positions.data[w].y;
            int deltax = abs (hx - tx);
            int deltay = abs (hy - ty);
            // same row, but 2 apart
            if (hx == tx && deltay >= 2)
            {
                // move tail 1 in direction of head
                int isup = hy > ty;
                if (isup)
                {
                    ty += 1;
                }
                else
                {
                    ty -= 1;
                }
                tail_moved = 1;
            }
            // same col
            elif (hy == ty && deltax >= 2)
            {
                // move tail 1 in direction of head
                int isright = hx > tx;
                if (isright)
                {
                    tx += 1;
                }
                else
                {
                    tx -= 1;
                }
                tail_moved = 1;
            }
            // not same row or col
            // and not touching
            elif (hx != tx && hy != ty && manhattan (hx, hy, tx, ty) > 2)
            {
                // needs to move diagonally towards head
                int isup = hy > ty;
                int isright = hx > tx;
                // NE 
                if (isup && isright)
                {
                    ++ty;
                    ++tx;
                }
                // SE 
                elif (!isup && isright)
                {
                    --ty;
                    ++tx;
                }

                // SW 
                elif (!isup && !isright)
                {
                    --ty;
                    --tx;
                }

                // NW
                elif (isup && !isright)
                {
                    ++ty;
                    --tx;
                }
                tail_moved = 1;
            }
            // same position
            // or touching
            // else

            // write back out tail
            knot_positions.data[w].x = tx;
            knot_positions.data[w].y = ty;

            if (w != 9)
                tail_moved = 0;
        }

        // save new tail position
        // the tail moves a lot less
        // so this is less of a performance hit
        if (tail_moved)
        {
            // ensure it does not already exist
            int exists = 0;
            for (int k = 0; k < tail_positions.size; ++k)
            {
                if (tail_positions.data[k].x == knot_positions.data[9].x && tail_positions.data[k].y == knot_positions.data[9].y)
                {
                    // position exists so ignore this point
                    exists = 1;
                    break;
                }
            }
            if (!exists)
                tail_positions.pushBack (new Point (knot_positions.data[9].x, knot_positions.data[9].y));
        }

        // calc bounds for board
        //xmin = min (hx, xmin);
        //xmax = max (hx, xmax);
        //ymin = min (hy, ymin);
        //ymax = max (hy, ymax);

    }

}

println (tail_positions.size);