// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// dont execute library functions 

jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================

// Exits the program with the given exit code 
// void exit(int exit_code)
// - exit_code : 
exit__int:
    // ** not implemented for amyasm
    halt 

//========================================================================
// returns default float value
// float float ();
float:
    return 0.0

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int value
// int int ();
int:
    return 0

//========================================================================
// returns default char value
// char char ();
char:
    return '0'

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int from a given char
// int charToInt (char);
charToInt__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
null:
    return __null

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

// Assignment - '='
   // RHS
      // Function Call - input() -> char[]
         // Arguments
         // Pushing args in reverse order
         // *** input
         CALL input
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Variable Declaration
         ASSIGN __main__line 0
   POP __rhs
   ASSIGN __main__line __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'A'
   // LHS
      // Variable Declaration
         ASSIGN __main__ROCK0 0
   POP __rhs
   ASSIGN __main__ROCK0 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'B'
   // LHS
      // Variable Declaration
         ASSIGN __main__PAPER0 0
   POP __rhs
   ASSIGN __main__PAPER0 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'C'
   // LHS
      // Variable Declaration
         ASSIGN __main__SCISSORS0 0
   POP __rhs
   ASSIGN __main__SCISSORS0 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'X'
   // LHS
      // Variable Declaration
         ASSIGN __main__LOSE 0
   POP __rhs
   ASSIGN __main__LOSE __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'Y'
   // LHS
      // Variable Declaration
         ASSIGN __main__DRAW 0
   POP __rhs
   ASSIGN __main__DRAW __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'Z'
   // LHS
      // Variable Declaration
         ASSIGN __main__WIN 0
   POP __rhs
   ASSIGN __main__WIN __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 1
   // LHS
      // Variable Declaration
         ASSIGN __main__SCORE_ROCK 0
   POP __rhs
   ASSIGN __main__SCORE_ROCK __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 2
   // LHS
      // Variable Declaration
         ASSIGN __main__SCORE_PAPER 0
   POP __rhs
   ASSIGN __main__SCORE_PAPER __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 3
   // LHS
      // Variable Declaration
         ASSIGN __main__SCORE_SCISSORS 0
   POP __rhs
   ASSIGN __main__SCORE_SCISSORS __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 0
   // LHS
      // Variable Declaration
         ASSIGN __main__SCORE_LOSE 0
   POP __rhs
   ASSIGN __main__SCORE_LOSE __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 3
   // LHS
      // Variable Declaration
         ASSIGN __main__SCORE_DRAW 0
   POP __rhs
   ASSIGN __main__SCORE_DRAW __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 6
   // LHS
      // Variable Declaration
         ASSIGN __main__SCORE_WIN 0
   POP __rhs
   ASSIGN __main__SCORE_WIN __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 0
   // LHS
      // Variable Declaration
         ASSIGN __main__totalScore 0
   POP __rhs
   ASSIGN __main__totalScore __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// While-Loop
__while__0:
   // Condition
      // Not Equal
         // LHS
            // Subscript
               // LHS
                  // Identifier - line
                     PUSH __main__line
               // OFFSET
                  // Int Literal
                     PUSH 0
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         // RHS
            // Char Literal
               PUSH '$'
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endwhile__0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Assignment - '='
            // RHS
               // Subscript
                  // LHS
                     // Identifier - line
                        PUSH __main__line
                  // OFFSET
                     // Int Literal
                        PUSH 0
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
            // LHS
               // Variable Declaration
                  ASSIGN __main__while__0__block__1__lhs 0
            POP __rhs
            ASSIGN __main__while__0__block__1__lhs __rhs
            PUSH __rhs
         // Statement results can be ignored
         POP __void
         // Assignment - '='
            // RHS
               // Subscript
                  // LHS
                     // Identifier - line
                        PUSH __main__line
                  // OFFSET
                     // Int Literal
                        PUSH 2
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
            // LHS
               // Variable Declaration
                  ASSIGN __main__while__0__block__1__rhs 0
            POP __rhs
            ASSIGN __main__while__0__block__1__rhs __rhs
            PUSH __rhs
         // Statement results can be ignored
         POP __void
         // Assignment - '='
            // RHS
               // Int Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__while__0__block__1__localScore 0
            POP __rhs
            ASSIGN __main__while__0__block__1__localScore __rhs
            PUSH __rhs
         // Statement results can be ignored
         POP __void
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Equal
                  // LHS
                     // Identifier - rhs
                        PUSH __main__while__0__block__1__rhs
                  // RHS
                     // Identifier - WIN
                        PUSH __main__WIN
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __elif__2x0
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - ROCK0
                                 PUSH __main__ROCK0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__4x0
                     // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_PAPER
                                    PUSH __main__SCORE_PAPER
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     JUMP __endif__4
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__4x0:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - PAPER0
                                 PUSH __main__PAPER0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__4x1
                        // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_SCISSORS
                                    PUSH __main__SCORE_SCISSORS
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                        JUMP __endif__4
                     //---------------------------------------------------
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__4x1:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - SCISSORS0
                                 PUSH __main__SCISSORS0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__4
                        // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_ROCK
                                    PUSH __main__SCORE_ROCK
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                        JUMP __endif__4
                     //---------------------------------------------------
                     // End of if
                     __endif__4:
                  //------------------------------------------------------
                  // Assignment - '+='
                     // RHS
                        // Identifier - SCORE_WIN
                           PUSH __main__SCORE_WIN
                     POP __rhs
                     ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                     PUSH __main__while__0__block__1__localScore
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
            JUMP __endif__2
            //------------------------------------------------------------
            // Elif-Statement
            __elif__2x0:
               // Condition
               // Equal
                  // LHS
                     // Identifier - rhs
                        PUSH __main__while__0__block__1__rhs
                  // RHS
                     // Identifier - DRAW
                        PUSH __main__DRAW
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __elif__2x1
               // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - ROCK0
                                 PUSH __main__ROCK0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__9x0
                     // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_ROCK
                                    PUSH __main__SCORE_ROCK
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     JUMP __endif__9
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__9x0:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - PAPER0
                                 PUSH __main__PAPER0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__9x1
                        // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_PAPER
                                    PUSH __main__SCORE_PAPER
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                        JUMP __endif__9
                     //---------------------------------------------------
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__9x1:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - SCISSORS0
                                 PUSH __main__SCISSORS0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__9
                        // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_SCISSORS
                                    PUSH __main__SCORE_SCISSORS
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                        JUMP __endif__9
                     //---------------------------------------------------
                     // End of if
                     __endif__9:
                  //------------------------------------------------------
                  // Assignment - '+='
                     // RHS
                        // Identifier - SCORE_DRAW
                           PUSH __main__SCORE_DRAW
                     POP __rhs
                     ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                     PUSH __main__while__0__block__1__localScore
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
               JUMP __endif__2
            //------------------------------------------------------------
            //------------------------------------------------------------
            // Elif-Statement
            __elif__2x1:
               // Condition
               // Equal
                  // LHS
                     // Identifier - rhs
                        PUSH __main__while__0__block__1__rhs
                  // RHS
                     // Identifier - LOSE
                        PUSH __main__LOSE
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__2
               // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - ROCK0
                                 PUSH __main__ROCK0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__14x0
                     // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_SCISSORS
                                    PUSH __main__SCORE_SCISSORS
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     JUMP __endif__14
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__14x0:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - PAPER0
                                 PUSH __main__PAPER0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__14x1
                        // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_ROCK
                                    PUSH __main__SCORE_ROCK
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                        JUMP __endif__14
                     //---------------------------------------------------
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__14x1:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - lhs
                                 PUSH __main__while__0__block__1__lhs
                           // RHS
                              // Identifier - SCISSORS0
                                 PUSH __main__SCISSORS0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__14
                        // Body
                        //------------------------------------------------
                        // Code Block
                           // Assignment - '+='
                              // RHS
                                 // Identifier - SCORE_PAPER
                                    PUSH __main__SCORE_PAPER
                              POP __rhs
                              ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                              PUSH __main__while__0__block__1__localScore
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                        JUMP __endif__14
                     //---------------------------------------------------
                     // End of if
                     __endif__14:
                  //------------------------------------------------------
                  // Assignment - '+='
                     // RHS
                        // Identifier - SCORE_LOSE
                           PUSH __main__SCORE_LOSE
                     POP __rhs
                     ADD __main__while__0__block__1__localScore __main__while__0__block__1__localScore __rhs
                     PUSH __main__while__0__block__1__localScore
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
               JUMP __endif__2
            //------------------------------------------------------------
            // End of if
            __endif__2:
         //---------------------------------------------------------------
         // Assignment - '+='
            // RHS
               // Identifier - localScore
                  PUSH __main__while__0__block__1__localScore
            POP __rhs
            ADD __main__totalScore __main__totalScore __rhs
            PUSH __main__totalScore
         // Statement results can be ignored
         POP __void
         // Free Operator
            // RHS
               // Identifier - line
                  PUSH __main__line
            // Free array
            POP __array
            FREE __array
            PUSH __array
         // Statement results can be ignored
         POP __void
         // Assignment - '='
            // RHS
               // Function Call - input() -> char[]
                  // Arguments
                  // Pushing args in reverse order
                  // *** input
                  CALL input
                  // Remove args
                  RESPONSE __retval
                  PUSH __retval
            POP __rhs
            ASSIGN __main__line __rhs
            PUSH __rhs
         // Statement results can be ignored
         POP __void
      //------------------------------------------------------------------
   JUMP __while__0
   // End of While
   __endwhile__0:
//------------------------------------------------------------------------
// Function Call - println(int) -> void
   // Arguments
      // Identifier - totalScore
         PUSH __main__totalScore
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

