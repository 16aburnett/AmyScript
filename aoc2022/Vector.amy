
#ifndef VECTOR_H
#define VECTOR_H

template <:T:>
class Vector
{
    public field T[]   data;
    public field int   size;
    public field int   capacity;  

    constructor ()
    {
        this.capacity = 10;
        this.size = 0; 
        this.data = new T[this.capacity];
    }

    public method void pushBack (T val)
    {
        // ensure there is space 
        if (this.size + 1 >= this.capacity)
        {
            this.capacity = this.capacity * 2; 
            T[] nData = new T[this.capacity];
            // move old data over
            for (int i = 0; i < this.size; ++i)
            {
                nData[i] = this.data[i];
            }
            free (this.data);
            this.data = nData; 
        }

        // add new num
        this.data[this.size] = val; 
        ++this.size; 
    }

    public method T popBack ()
    {
        return this.data[--this.size];
    }

    public method T get (int index)
    {
        return this.data[index];
    }

    public method void set (int index, T value)
    {
        this.data[index] = value;
    }

}

#endif