

implement function overloading 
- functions should be matched by signature rather than just name



*** grammar for initializing arrays 

- check for uninitialized variables 
- add system to check member accesses against lhs type 
   - probably similar to checking lhs and rhs of add/mul/ etc 

- generic type grammar 









semantic analysis notes 

symbol table 
- stack - O(n) lookup
- or hashtable - faster 
- stack of hashtables - each stack elem is a scope and each symbol table is a lookup map
    - fast lookup per scope 
    - checking different scopes - O(n)
        - which shouldnt be too bad because it's compile time nested scopes
- every occurrence of a function/scope
    - push new symbol table to the stack
    - visit children nodes
    - pop symbol table 
- check symbol table for if 
    - make sure var was defined
    - make sure var type is agreeable with the 
       type of the other operand 
    - (int = int rather than bool = float)
- check the current scope's symbol table 
   and if symbol not found, then check the parent's table
    - if not found, then var wasn't declared 
- when checking for member accessors 
    - classes should get a symbol table of their fields and methods
    - check if member is a part of the symbol table of the class
- subscript operator should check that the lhs is a list 
    or type that uses the subscript operator <- operator overloading anyone? 

operator overloading
- add allowable types combinations per operator 
    - maybe have an operator table? 

Types
- a table for the valid types 
    - user could define their own types with a class 
       or typedef which could create a scoped type 

Subtyping
    - class B and C derived from class A 
    - List of A's 
    - unknown which is B or C at compile time. 


Parent Object parameter
mylist.size()
-> list::size(mylist)