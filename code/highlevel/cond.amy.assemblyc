000 [15, 1, 0] jump __endOfLibrary
001 [0, 1, 1, 0, 0] assign __null 0
002 [-1, 2, 2] print:
003 [35, 1, 3, 0, 0] stackget __str 0
004 [32, 1, 4, 1, 3] sizeof __size __str
005 [0, 1, 5, 0, 0] assign __i 0
006 [-1, 6, 6] __print__loop:
007 [28, 1, 5, 1, 4] cmp __i __size
008 [20, 1, 7] jge __print__endloop
009 [8, 2, 1, 3, 1, 5] print __str[__i]
010 [3, 1, 5, 1, 5, 0, 1] add __i __i 1
011 [15, 1, 6] jump __print__loop
012 [-1, 7, 12] __print__endloop:
013 [13, 0, 0] return 0
014 [-1, 8, 14] println:
015 [35, 1, 3, 0, 0] stackget __str 0
016 [32, 1, 4, 1, 3] sizeof __size __str
017 [0, 1, 5, 0, 0] assign __i 0
018 [-1, 9, 18] __println__loop:
019 [28, 1, 5, 1, 4] cmp __i __size
020 [20, 1, 10] jge __println__endloop
021 [8, 2, 1, 3, 1, 5] print __str[__i]
022 [3, 1, 5, 1, 5, 0, 1] add __i __i 1
023 [15, 1, 9] jump __println__loop
024 [-1, 10, 24] __println__endloop:
025 [9] println
026 [13, 0, 0] return 0
027 [-1, 11, 27] printInt:
028 [35, 1, 3, 0, 0] stackget __str 0
029 [8, 1, 3] print __str
030 [13, 0, 0] return 0
031 [-1, 12, 31] printFloat:
032 [35, 1, 3, 0, 0] stackget __str 0
033 [8, 1, 3] print __str
034 [13, 0, 0] return 0
035 [-1, 13, 35] printChar:
036 [35, 1, 14, 0, 0] stackget __char 0
037 [8, 1, 14] print __char
038 [13, 0, 0] return 0
039 [-1, 15, 39] input:
040 [10, 1, 16] input __line
041 [13, 1, 16] return __line
042 [-1, 17, 42] intToString:
043 [35, 1, 18, 0, 0] stackget __val 0
044 [13, 0, 0] return 0
045 [-1, 0, 45] __endOfLibrary:
046 [33, 0, 10] PUSH 10
047 [34, 1, 19] POP __rhs
048 [0, 1, 20, 1, 19] ASSIGN x __rhs
049 [33, 1, 19] PUSH __rhs
050 [33, 0, 7] PUSH 7
051 [34, 1, 19] POP __rhs
052 [0, 1, 21, 1, 19] ASSIGN y __rhs
053 [33, 1, 19] PUSH __rhs
054 [33, 0, 7] PUSH 7
055 [34, 1, 19] POP __rhs
056 [0, 1, 22, 1, 19] ASSIGN z __rhs
057 [33, 1, 19] PUSH __rhs
058 [33, 1, 20] PUSH x
059 [33, 0, 0] PUSH 0
060 [34, 1, 19] POP __rhs
061 [34, 1, 23] POP __lhs
062 [22, 1, 24, 1, 23, 1, 19] EQUAL __res __lhs __rhs
063 [33, 1, 24] PUSH __res
064 [34, 1, 25] POP __cond
065 [28, 1, 25, 0, 0] CMP __cond 0
066 [18, 1, 26] JEQ __elif0x0
067 [33, 0, 1] PUSH 1
068 [34, 1, 25] POP __cond
069 [28, 1, 25, 0, 0] CMP __cond 0
070 [18, 1, 27] JEQ __endif1
071 [33, 1, 20] PUSH x
072 [34, 1, 28] POP __arg0
073 [33, 1, 28] PUSH __arg0
074 [12, 1, 11] CALL printInt
075 [34, 1, 1] POP __null
076 [14, 1, 29] RESPONSE __retval
077 [33, 1, 29] PUSH __retval
078 [15, 1, 27] JUMP __endif1
079 [-1, 27, 79] __endif1:
080 [15, 1, 30] JUMP __endif0
081 [-1, 26, 81] __elif0x0:
082 [33, 1, 20] PUSH x
083 [33, 1, 21] PUSH y
084 [34, 1, 19] POP __rhs
085 [34, 1, 23] POP __lhs
086 [22, 1, 24, 1, 23, 1, 19] EQUAL __res __lhs __rhs
087 [33, 1, 24] PUSH __res
088 [34, 1, 25] POP __cond
089 [28, 1, 25, 0, 0] CMP __cond 0
090 [18, 1, 31] JEQ __elif0x1
091 [33, 1, 20] PUSH x
092 [34, 1, 28] POP __arg0
093 [33, 1, 28] PUSH __arg0
094 [12, 1, 11] CALL printInt
095 [34, 1, 1] POP __null
096 [14, 1, 29] RESPONSE __retval
097 [33, 1, 29] PUSH __retval
098 [15, 1, 30] JUMP __endif0
099 [-1, 31, 99] __elif0x1:
100 [33, 1, 20] PUSH x
101 [33, 1, 21] PUSH y
102 [33, 0, 3] PUSH 3
103 [34, 1, 19] POP __rhs
104 [34, 1, 23] POP __lhs
105 [3, 1, 24, 1, 23, 1, 19] ADD __res __lhs __rhs
106 [33, 1, 24] PUSH __res
107 [34, 1, 19] POP __rhs
108 [34, 1, 23] POP __lhs
109 [22, 1, 24, 1, 23, 1, 19] EQUAL __res __lhs __rhs
110 [33, 1, 24] PUSH __res
111 [34, 1, 25] POP __cond
112 [28, 1, 25, 0, 0] CMP __cond 0
113 [18, 1, 32] JEQ __else0
114 [1, 1, 3, 0, 7] MALLOC __str 7
115 [0, 2, 1, 3, 0, 0, 0, 'W'] ASSIGN __str[0] 'W'
116 [0, 2, 1, 3, 0, 1, 0, 'o'] ASSIGN __str[1] 'o'
117 [0, 2, 1, 3, 0, 2, 0, 'o'] ASSIGN __str[2] 'o'
118 [0, 2, 1, 3, 0, 3, 0, 'H'] ASSIGN __str[3] 'H'
119 [0, 2, 1, 3, 0, 4, 0, 'o'] ASSIGN __str[4] 'o'
120 [0, 2, 1, 3, 0, 5, 0, 'o'] ASSIGN __str[5] 'o'
121 [0, 2, 1, 3, 0, 6, 0, '!'] ASSIGN __str[6] '!'
122 [33, 1, 3] PUSH __str
123 [34, 1, 28] POP __arg0
124 [33, 1, 28] PUSH __arg0
125 [12, 1, 8] CALL println
126 [34, 1, 1] POP __null
127 [14, 1, 29] RESPONSE __retval
128 [33, 1, 29] PUSH __retval
129 [15, 1, 30] JUMP __endif0
130 [-1, 32, 130] __else0:
131 [1, 1, 3, 0, 5] MALLOC __str 5
132 [0, 2, 1, 3, 0, 0, 0, 'N'] ASSIGN __str[0] 'N'
133 [0, 2, 1, 3, 0, 1, 0, 'o'] ASSIGN __str[1] 'o'
134 [0, 2, 1, 3, 0, 2, 0, 'p'] ASSIGN __str[2] 'p'
135 [0, 2, 1, 3, 0, 3, 0, 'e'] ASSIGN __str[3] 'e'
136 [0, 2, 1, 3, 0, 4, 0, '!'] ASSIGN __str[4] '!'
137 [33, 1, 3] PUSH __str
138 [34, 1, 28] POP __arg0
139 [33, 1, 28] PUSH __arg0
140 [12, 1, 8] CALL println
141 [34, 1, 1] POP __null
142 [14, 1, 29] RESPONSE __retval
143 [33, 1, 29] PUSH __retval
144 [-1, 30, 144] __endif0:
145 [33, 1, 21] PUSH y
146 [33, 1, 22] PUSH z
147 [34, 1, 19] POP __rhs
148 [34, 1, 23] POP __lhs
149 [22, 1, 24, 1, 23, 1, 19] EQUAL __res __lhs __rhs
150 [33, 1, 24] PUSH __res
151 [33, 1, 22] PUSH z
152 [33, 1, 20] PUSH x
153 [34, 1, 19] POP __rhs
154 [34, 1, 23] POP __lhs
155 [22, 1, 24, 1, 23, 1, 19] EQUAL __res __lhs __rhs
156 [33, 1, 24] PUSH __res
157 [34, 1, 19] POP __rhs
158 [34, 1, 23] POP __lhs
159 [29, 1, 24, 1, 23, 1, 19] AND __res __lhs __rhs
160 [33, 1, 24] PUSH __res
161 [33, 1, 22] PUSH z
162 [33, 0, 3] PUSH 3
163 [34, 1, 19] POP __rhs
164 [34, 1, 23] POP __lhs
165 [3, 1, 24, 1, 23, 1, 19] ADD __res __lhs __rhs
166 [33, 1, 24] PUSH __res
167 [33, 1, 20] PUSH x
168 [34, 1, 19] POP __rhs
169 [34, 1, 23] POP __lhs
170 [22, 1, 24, 1, 23, 1, 19] EQUAL __res __lhs __rhs
171 [33, 1, 24] PUSH __res
172 [34, 1, 19] POP __rhs
173 [34, 1, 23] POP __lhs
174 [30, 1, 24, 1, 23, 1, 19] OR __res __lhs __rhs
175 [33, 1, 24] PUSH __res
176 [34, 1, 25] POP __cond
177 [28, 1, 25, 0, 0] CMP __cond 0
178 [18, 1, 33] JEQ __endif2
179 [1, 1, 3, 0, 8] MALLOC __str 8
180 [0, 2, 1, 3, 0, 0, 0, 'i'] ASSIGN __str[0] 'i'
181 [0, 2, 1, 3, 0, 1, 0, 't'] ASSIGN __str[1] 't'
182 [0, 2, 1, 3, 0, 2, 0, 's'] ASSIGN __str[2] 's'
183 [0, 2, 1, 3, 0, 3, 0, ' '] ASSIGN __str[3] ' '
184 [0, 2, 1, 3, 0, 4, 0, 't'] ASSIGN __str[4] 't'
185 [0, 2, 1, 3, 0, 5, 0, 'r'] ASSIGN __str[5] 'r'
186 [0, 2, 1, 3, 0, 6, 0, 'u'] ASSIGN __str[6] 'u'
187 [0, 2, 1, 3, 0, 7, 0, 'e'] ASSIGN __str[7] 'e'
188 [33, 1, 3] PUSH __str
189 [34, 1, 28] POP __arg0
190 [33, 1, 28] PUSH __arg0
191 [12, 1, 8] CALL println
192 [34, 1, 1] POP __null
193 [14, 1, 29] RESPONSE __retval
194 [33, 1, 29] PUSH __retval
195 [15, 1, 33] JUMP __endif2
196 [-1, 33, 196] __endif2:
197 [1, 1, 3, 0, 14] MALLOC __str 14
198 [0, 2, 1, 3, 0, 0, 0, 'I'] ASSIGN __str[0] 'I'
199 [0, 2, 1, 3, 0, 1, 0, 'n'] ASSIGN __str[1] 'n'
200 [0, 2, 1, 3, 0, 2, 0, 't'] ASSIGN __str[2] 't'
201 [0, 2, 1, 3, 0, 3, 0, 'e'] ASSIGN __str[3] 'e'
202 [0, 2, 1, 3, 0, 4, 0, 'r'] ASSIGN __str[4] 'r'
203 [0, 2, 1, 3, 0, 5, 0, 'e'] ASSIGN __str[5] 'e'
204 [0, 2, 1, 3, 0, 6, 0, 's'] ASSIGN __str[6] 's'
205 [0, 2, 1, 3, 0, 7, 0, 't'] ASSIGN __str[7] 't'
206 [0, 2, 1, 3, 0, 8, 0, 'i'] ASSIGN __str[8] 'i'
207 [0, 2, 1, 3, 0, 9, 0, 'n'] ASSIGN __str[9] 'n'
208 [0, 2, 1, 3, 0, 10, 0, 'g'] ASSIGN __str[10] 'g'
209 [0, 2, 1, 3, 0, 11, 0, '.'] ASSIGN __str[11] '.'
210 [0, 2, 1, 3, 0, 12, 0, '.'] ASSIGN __str[12] '.'
211 [0, 2, 1, 3, 0, 13, 0, '.'] ASSIGN __str[13] '.'
212 [33, 1, 3] PUSH __str
213 [34, 1, 28] POP __arg0
214 [33, 1, 28] PUSH __arg0
215 [12, 1, 8] CALL println
216 [34, 1, 1] POP __null
217 [14, 1, 29] RESPONSE __retval
218 [33, 1, 29] PUSH __retval
