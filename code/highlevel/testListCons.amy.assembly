// AmyAssembly compiled from AmyScript
// Filename: testListCons.amy
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__loop:
    // cond
    cmp __i __size
    jge __print__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__loop
__print__endloop:
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__loop:
    // cond
    cmp __i __size
    jge __println__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__loop
__println__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen
// void printInt (int intToPrint);
printInt:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void printFloat (float floatToPrint);
printFloat:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void printChar (char charToPrint);
printChar:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// converts an integer to a string
// char[] intToString (int val);
intToString:
    stackget __val 0

    return 0

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

// Assignment
   // RHS
      // Array Constructor
         // Elements
         // Array Constructor
            // Elements
            // Literal
               PUSH 1
            // Literal
               PUSH 2
            // Literal
               PUSH 3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
         // Array Constructor
            // Elements
            // Literal
               PUSH 4
            // Literal
               PUSH 5
            // Literal
               PUSH 6
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
         // Array Constructor
            // Elements
            // Literal
               PUSH 7
            // Literal
               PUSH 8
            // Literal
               PUSH 9
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
         POP __elem2
         POP __elem1
         POP __elem0
         MALLOC __list 3
         ASSIGN __list[0] __elem0
         ASSIGN __list[1] __elem1
         ASSIGN __list[2] __elem2
         PUSH __list
   POP __rhs
   ASSIGN nums __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// For-Loop
// Init
   // Assignment
      // RHS
         // Literal
            PUSH 0
      POP __rhs
      ASSIGN i __rhs
      PUSH __rhs
JUMP __forcond0
__for0:
   // Update
      // Pre-Increment
         // RHS
            // Identifier
               PUSH i
         POP __rhs
         ADD i i 1
         ASSIGN __res i
         PUSH __res
   __forcond0:
   // Condition
      // Less Than
         // LHS
            // Identifier
               PUSH i
         // RHS
            // Literal
               PUSH 3
         POP __rhs
         POP __lhs
         LT __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endfor0
   // Body
      //------------------------------------------------------------------
      // For-Loop
      // Init
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            POP __rhs
            ASSIGN j __rhs
            PUSH __rhs
      JUMP __forcond1
      __for1:
         // Update
            // Pre-Increment
               // RHS
                  // Identifier
                     PUSH j
               POP __rhs
               ADD j j 1
               ASSIGN __res j
               PUSH __res
         __forcond1:
         // Condition
            // Less Than
               // LHS
                  // Identifier
                     PUSH j
               // RHS
                  // Literal
                     PUSH 3
               POP __rhs
               POP __lhs
               LT __res __lhs __rhs
               PUSH __res
            POP __cond
            CMP __cond 0
            JEQ __endfor1
         // Body
            // Function Call
               // Arguments
                  // Subscript
                     // LHS
                        // Subscript
                           // LHS
                              // Identifier
                                 PUSH nums
                           // OFFSET
                              // Identifier
                                 PUSH i
                           POP __offset
                           POP __pointer
                           PUSH __pointer[__offset]
                     // OFFSET
                        // Identifier
                           PUSH j
                     POP __offset
                     POP __pointer
                     PUSH __pointer[__offset]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               CALL printInt
               // Remove args
               POP __null
               RESPONSE __retval
               PUSH __retval
            // Function Call
               // Arguments
                  // Literal
                     MALLOC __str 1
                     ASSIGN __str[0] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               CALL print
               // Remove args
               POP __null
               RESPONSE __retval
               PUSH __retval
         // Repeat
         JUMP __for1
         // End of For
         __endfor1:
      //------------------------------------------------------------------
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 0
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
   // Repeat
   JUMP __for0
   // End of For
   __endfor0:
//------------------------------------------------------------------------
// Function Call
   // Arguments
      // Literal
         MALLOC __str 0
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   CALL println
   // Remove args
   POP __null
   RESPONSE __retval
   PUSH __retval
//========================================================================
//### END OF CODE ########################################################
//========================================================================

