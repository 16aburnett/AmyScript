// AmyAssembly compiled from AmyScript
// Filename: sample.amy
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__loop:
    // cond
    cmp __i __size
    jge __print__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__loop
__print__endloop:
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__loop:
    // cond
    cmp __i __size
    jge __println__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__loop
__println__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen
// void printInt (int intToPrint);
printInt:
    // grab string
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void printChar (char charToPrint);
printChar:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// converts an integer to a string
// char[] intToString (int val);
intToString:
    stackget __val 0

    return 0

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Class Declaration - Person
   //---------------------------------------------------------------------
   // Field - m_name
   ASSIGN __field__Person__m_name 0
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Field - m_age
   ASSIGN __field__Person__m_age 1
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Field - m_nums
   ASSIGN __field__Person__m_nums 2
   //---------------------------------------------------------------------
// skip over class methods
JUMP __endclass__Person
   //---------------------------------------------------------------------
   // Constructor Declaration - Person Person
   JUMP __endctor__Person
   Person:
      // Creating Class Instance
         MALLOC __this 3
      // Parameters
         // Param: name
         STACKGET name 0
         // Param: age
         STACKGET age 1
      // Body
         // Assignment
            // RHS
               // Identifier
                  PUSH name
            // LHS
               // Member Accessor Assignment
                  // LHS
                     // This keyword
                        PUSH __this
                  // RHS
                     PUSH __field__Person__m_name
                  POP __child
                  POP __parent
                  POP __rhs
                  ASSIGN __parent[__child] __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Identifier
                  PUSH age
            // LHS
               // Member Accessor Assignment
                  // LHS
                     // This keyword
                        PUSH __this
                  // RHS
                     PUSH __field__Person__m_age
                  POP __child
                  POP __parent
                  POP __rhs
                  ASSIGN __parent[__child] __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Array Allocator
                  // Literal
                     PUSH 5
                  POP __size
                  MALLOC __ptr __size
                  PUSH __ptr
            // LHS
               // Member Accessor Assignment
                  // LHS
                     // This keyword
                        PUSH __this
                  // RHS
                     PUSH __field__Person__m_nums
                  POP __child
                  POP __parent
                  POP __rhs
                  ASSIGN __parent[__child] __rhs
            PUSH __rhs
      RETURN __this
   __endctor__Person:
   // End Constructor Declaration - Person
   //---------------------------------------------------------------------

   //---------------------------------------------------------------------
   // Method Declaration
   JUMP __endMethod__Person__getAge
   __method__Person__getAge:
      // Class Instance
         STACKGET __this 0
      // Parameters
      // Body
         // Return
            // Member Accessor
               // LHS
                  // This keyword
                     PUSH __this
               // RHS
                  PUSH __field__Person__m_age
               POP __child
               POP __parent
               PUSH __parent[__child]
            POP __rVal
            RETURN __rVal
      RETURN 0
   __endMethod__Person__getAge:
   // End Method Declaration - __method__Person__getAge
   //---------------------------------------------------------------------

__endclass__Person:
// End Class Declaration - Person
//========================================================================

//========================================================================
// Function Declaration - max int
JUMP __end__max
max:
   // Parameters
      // Param: a
      STACKGET a 0
      // Param: b
      STACKGET b 1
   // Body
      //------------------------------------------------------------------
      // If-Statement
         // Condition
            // Greater Than or Equal to
               // LHS
                  // Identifier
                     PUSH a
               // RHS
                  // Identifier
                     PUSH b
               POP __rhs
               POP __lhs
               GE __res __lhs __rhs
               PUSH __res
            POP __cond
            CMP __cond 0
            JEQ __endif0
         // Body
            // Return
               // Identifier
                  PUSH a
               POP __rVal
               RETURN __rVal
         JUMP __endif0
         // End of if
         __endif0:
      //------------------------------------------------------------------
      // Return
         // Identifier
            PUSH b
         POP __rVal
         RETURN __rVal
   RETURN 0
__end__max:
// End Function Declaration - max
//========================================================================

// Assignment
   // RHS
      // Array Allocator
         // Literal
            PUSH 2
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   POP __rhs
   ASSIGN people __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Addition
         // LHS
            // Assignment
               // RHS
                  // Literal
                     PUSH 0
               POP __rhs
               ASSIGN amyIndex __rhs
               PUSH __rhs
         // RHS
            // Literal
               PUSH 1
         POP __rhs
         POP __lhs
         ADD __res __lhs __rhs
         PUSH __res
   POP __rhs
   ASSIGN camIndex __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Constructor Call
         // Arguments
         // Pushing args in reverse order
         CALL Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people
         // OFFSET
            // Identifier
               PUSH amyIndex
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Constructor Call
         // Arguments
            // Literal
               MALLOC __str 7
               ASSIGN __str[0] 'C'
               ASSIGN __str[1] 'a'
               ASSIGN __str[2] 'm'
               ASSIGN __str[3] 'e'
               ASSIGN __str[4] 'r'
               ASSIGN __str[5] 'o'
               ASSIGN __str[6] 'n'
               PUSH __str
            POP __arg0
            // Literal
               PUSH 21
            POP __arg1
         // Pushing args in reverse order
         PUSH __arg1
         PUSH __arg0
         CALL Person
         // Remove args
         POP __null
         POP __null
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people
         // OFFSET
            // Identifier
               PUSH camIndex
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         MALLOC __str 3
         ASSIGN __str[0] 'A'
         ASSIGN __str[1] 'm'
         ASSIGN __str[2] 'y'
         PUSH __str
   // LHS
      // Member Accessor Assignment
         // LHS
            // Subscript
               // LHS
                  // Identifier
                     PUSH people
               // OFFSET
                  // Identifier
                     PUSH amyIndex
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         // RHS
            PUSH __field__Person__m_name
         POP __child
         POP __parent
         POP __rhs
         ASSIGN __parent[__child] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Method Call
         // LHS
            // Subscript
               // LHS
                  // Identifier
                     PUSH people
               // OFFSET
                  // Identifier
                     PUSH camIndex
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         // RHS
         // Arguments
         POP __obj
         // Pushing args in reverse order
         PUSH __obj
         CALL __method__Person__getAge
         PUSH __null
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Member Accessor Assignment
         // LHS
            // Subscript
               // LHS
                  // Identifier
                     PUSH people
               // OFFSET
                  // Identifier
                     PUSH amyIndex
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         // RHS
            PUSH __field__Person__m_age
         POP __child
         POP __parent
         POP __rhs
         ASSIGN __parent[__child] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 3.14
   // LHS
      // Subscript assignment
         // LHS
            // Member Accessor
               // LHS
                  // Subscript
                     // LHS
                        // Identifier
                           PUSH people
                     // OFFSET
                        // Identifier
                           PUSH amyIndex
                     POP __offset
                     POP __pointer
                     PUSH __pointer[__offset]
               // RHS
                  PUSH __field__Person__m_nums
               POP __child
               POP __parent
               PUSH __parent[__child]
         // OFFSET
            // Literal
               PUSH 0
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 6.28
   // LHS
      // Subscript assignment
         // LHS
            // Member Accessor
               // LHS
                  // Subscript
                     // LHS
                        // Identifier
                           PUSH people
                     // OFFSET
                        // Identifier
                           PUSH amyIndex
                     POP __offset
                     POP __pointer
                     PUSH __pointer[__offset]
               // RHS
                  PUSH __field__Person__m_nums
               POP __child
               POP __parent
               PUSH __parent[__child]
         // OFFSET
            // Literal
               PUSH 1
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Function Call
   // Arguments
      // Member Accessor
         // LHS
            // Subscript
               // LHS
                  // Identifier
                     PUSH people
               // OFFSET
                  // Literal
                     PUSH 0
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         // RHS
            PUSH __field__Person__m_name
         POP __child
         POP __parent
         PUSH __parent[__child]
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   CALL println
   // Remove args
   POP __null
   RESPONSE __retval
   PUSH __retval
// Assignment
   // RHS
      // Array Allocator
         // Literal
            PUSH 5
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   POP __rhs
   ASSIGN nums __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// For-Loop
// Init
   // Assignment
      // RHS
         // Literal
            PUSH 0
      POP __rhs
      ASSIGN i __rhs
      PUSH __rhs
__for1:
   // Condition
      // Less Than
         // LHS
            // Identifier
               PUSH i
         // RHS
            // Function Call
               // Arguments
                  // Identifier
                     PUSH nums
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               CALL sizeof
               // Remove args
               POP __null
               RESPONSE __retval
               PUSH __retval
         POP __rhs
         POP __lhs
         LT __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endfor1
   // Body
      // Function Call
         // Arguments
            // Subscript
               // LHS
                  // Identifier
                     PUSH nums
               // OFFSET
                  // Identifier
                     PUSH i
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
            POP __arg0
            // Literal
               MALLOC __str 1
               ASSIGN __str[0] ' '
               PUSH __str
            POP __arg1
         // Pushing args in reverse order
         PUSH __arg1
         PUSH __arg0
         CALL print
         // Remove args
         POP __null
         POP __null
         RESPONSE __retval
         PUSH __retval
   // Update
      // Pre-Increment
         // RHS
            // Identifier
               PUSH i
         POP __rhs
         ADD i i 1
         ASSIGN __res i
         PUSH __res
   // Repeat
   JUMP __for1
   // End of For
   __endfor1:
//------------------------------------------------------------------------
// Function Call
   // Arguments
      // Literal
         MALLOC __str 0
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   CALL println
   // Remove args
   POP __null
   RESPONSE __retval
   PUSH __retval
// Assignment
   // RHS
      // Literal
         PUSH 0
   POP __rhs
   ASSIGN mybool __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Greater Than
         // LHS
            // Function Call
               // Arguments
                  // Identifier
                     PUSH nums
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               CALL sizeof
               // Remove args
               POP __null
               RESPONSE __retval
               PUSH __retval
         // RHS
            // Literal
               PUSH 0
         POP __rhs
         POP __lhs
         GT __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif2x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 6
               ASSIGN __str[0] 'N'
               ASSIGN __str[1] 'u'
               ASSIGN __str[2] 'm'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] ':'
               ASSIGN __str[5] ' '
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL print
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
      // Function Call
         // Arguments
            // Identifier
               PUSH nums
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL print
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
      // Function Call
         // Arguments
         // Pushing args in reverse order
         CALL println
         // Remove args
         RESPONSE __retval
         PUSH __retval
   JUMP __endif2
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif2x0:
      // Condition
      // Identifier
         PUSH mybool
      POP __cond
      CMP __cond 0
      JEQ __else2
      // Body
      // Function Call
         // Arguments
            // Identifier
               PUSH mybool
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
      JUMP __endif2
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else2:
   // Function Call
      // Arguments
         // Literal
            MALLOC __str 3
            ASSIGN __str[0] 'Y'
            ASSIGN __str[1] 'e'
            ASSIGN __str[2] 's'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      CALL println
      // Remove args
      POP __null
      RESPONSE __retval
      PUSH __retval
   //---------------------------------------------------------------------
   // End of if
   __endif2:
//------------------------------------------------------------------------
// Function Call
   // Arguments
      // Assignment
         // RHS
            // Assignment
               // RHS
                  // Literal
                     PUSH 10
               POP __rhs
               ASSIGN y __rhs
               PUSH __rhs
         POP __rhs
         ASSIGN x __rhs
         PUSH __rhs
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   CALL println
   // Remove args
   POP __null
   RESPONSE __retval
   PUSH __retval
// Assignment
   // RHS
      // Literal
         PUSH 0
   POP __rhs
   ASSIGN x __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// While-Loop
__while3:
   // Condition
      // Literal
         PUSH 1
      POP __cond
      CMP __cond 0
      JEQ __endwhile3
   // Body
      //------------------------------------------------------------------
      // If-Statement
         // Condition
            // Greater Than
               // LHS
                  // Post-Increment
                     ASSIGN __res x
                     ADD x x 1
                     PUSH __res
               // RHS
                  // Literal
                     PUSH 10
               POP __rhs
               POP __lhs
               GT __res __lhs __rhs
               PUSH __res
            POP __cond
            CMP __cond 0
            JEQ __endif4
         // Body
            // Break out of __while3
            JUMP __endwhile3
         JUMP __endif4
         // End of if
         __endif4:
      //------------------------------------------------------------------
   JUMP __while3
   // End of While
   __endwhile3:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Assignment
         // RHS
            // Addition
               // LHS
                  // Literal
                     PUSH 21
               // RHS
                  // Literal
                     PUSH 12
               POP __rhs
               POP __lhs
               ADD __res __lhs __rhs
               PUSH __res
         // LHS
            // Subscript assignment
               // LHS
                  // Identifier
                     PUSH nums
               // OFFSET
                  // Post-Increment
                     ASSIGN __res x
                     ADD x x 1
                     PUSH __res
               POP __offset
               POP __pointer
         POP __rhs
         ASSIGN __pointer[__offset] __rhs
         PUSH __rhs
   POP __rhs
   ASSIGN w __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Assignment
         // RHS
            // Literal
               PUSH 10
         POP __rhs
         ASSIGN nCols __rhs
         PUSH __rhs
   POP __rhs
   ASSIGN nRows __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Array Allocator
         // Identifier
            PUSH nRows
         // Identifier
            PUSH nCols
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   POP __rhs
   ASSIGN board __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 7.34
   // LHS
      // Subscript assignment
         // LHS
            // Subscript
               // LHS
                  // Identifier
                     PUSH board
               // OFFSET
                  // Literal
                     PUSH 0
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         // OFFSET
            // Literal
               PUSH 0
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 1
   POP __rhs
   ASSIGN apple __rhs
   PUSH __rhs
//========================================================================
//### END OF CODE ########################################################
//========================================================================

