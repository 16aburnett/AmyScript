// AmyAssembly compiled from AmyScript
//=========================================================================
// Assignment
   // RHS
      // Literal
         PUSH 10
   // LHS
      // Variable Declaration
         ASSIGN x 0
   POP __rhs
   ASSIGN x __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 7
   // LHS
      // Variable Declaration
         ASSIGN y 0
   POP __rhs
   ASSIGN y __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 7
   // LHS
      // Variable Declaration
         ASSIGN z 0
   POP __rhs
   ASSIGN z __rhs
   PUSH __rhs
//-------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier
               PUSH x
         // RHS
            // Literal
               PUSH 0
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif0x0
   // Body
      //-------------------------------------------------------------------
      // If-Statement
         // Condition
            // Literal
               PUSH 1
            POP __cond
            CMP __cond 0
            JEQ __endif1
         // Body
            // FunctionCall
               // Identifier
                  PUSH x
               // Identifier
                  PUSH println
         JMP __endif1
         // End of if
         __endif1:
      //-------------------------------------------------------------------
   JMP __endif0
   //----------------------------------------------------------------------
   // Elif-Statement
   __elif0x0:
      // Condition
      // Equal
         // LHS
            // Identifier
               PUSH x
         // RHS
            // Identifier
               PUSH y
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif0x1
      // Body
      // FunctionCall
         // Identifier
            PUSH x
         // Identifier
            PUSH println
      JMP __endif0
   //----------------------------------------------------------------------
   //----------------------------------------------------------------------
   // Elif-Statement
   __elif0x1:
      // Condition
      // Equal
         // LHS
            // Identifier
               PUSH x
         // RHS
            // Addition
               // LHS
                  // Identifier
                     PUSH y
               // RHS
                  // Literal
                     PUSH 3
               POP __rhs
               POP __lhs
               ADD __res __lhs __rhs
               PUSH __res
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __else0
      // Body
      // FunctionCall
         // Literal
            // String Literal 
         // Identifier
            PUSH println
      JMP __endif0
   //----------------------------------------------------------------------
   //----------------------------------------------------------------------
   // Else-Statement
   __else0:
   //----------------------------------------------------------------------
   // If-Statement
      // Condition
         // Literal
            PUSH 1
         POP __cond
         CMP __cond 0
         JEQ __endif2
      // Body
         // FunctionCall
            // Identifier
               PUSH x
            // Identifier
               PUSH println
      JMP __endif2
      // End of if
      __endif2:
   //----------------------------------------------------------------------
   //----------------------------------------------------------------------
   // End of if
   __endif0:
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
// If-Statement
   // Condition
      // OR
         // LHS
            // AND
               // LHS
                  // Equal
                     // LHS
                        // Identifier
                           PUSH y
                     // RHS
                        // Identifier
                           PUSH z
                     POP __rhs
                     POP __lhs
                     EQUAL __res __lhs __rhs
                     PUSH __res
               // RHS
                  // Equal
                     // LHS
                        // Identifier
                           PUSH z
                     // RHS
                        // Identifier
                           PUSH x
                     POP __rhs
                     POP __lhs
                     EQUAL __res __lhs __rhs
                     PUSH __res
               POP __rhs
               POP __lhs
               AND __res __lhs __rhs
               PUSH __res
         // RHS
            // Equal
               // LHS
                  // Addition
                     // LHS
                        // Identifier
                           PUSH z
                     // RHS
                        // Literal
                           PUSH 3
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
               // RHS
                  // Identifier
                     PUSH x
               POP __rhs
               POP __lhs
               EQUAL __res __lhs __rhs
               PUSH __res
         POP __rhs
         POP __lhs
         OR __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif3
   // Body
      // FunctionCall
         // Literal
            // String Literal 
         // Identifier
            PUSH println
   JMP __endif3
   // End of if
   __endif3:
//-------------------------------------------------------------------------
// FunctionCall
   // Literal
      // String Literal 
   // Identifier
      PUSH println
//=========================================================================
// End of program
