000 [15, 1, 0] jump __endOfLibrary
001 [0, 1, 1, 0, 0] assign __null 0
002 [-1, 2, 2] print:
003 [35, 1, 3, 0, 0] stackget __str 0
004 [32, 1, 4, 1, 3] sizeof __size __str
005 [0, 1, 5, 0, 0] assign __i 0
006 [-1, 6, 6] __print__loop:
007 [28, 1, 5, 1, 4] cmp __i __size
008 [20, 1, 7] jge __print__endloop
009 [8, 2, 1, 3, 1, 5] print __str[__i]
010 [3, 1, 5, 1, 5, 0, 1] add __i __i 1
011 [15, 1, 6] jump __print__loop
012 [-1, 7, 12] __print__endloop:
013 [13, 0, 0] return 0
014 [-1, 8, 14] println:
015 [35, 1, 3, 0, 0] stackget __str 0
016 [32, 1, 4, 1, 3] sizeof __size __str
017 [0, 1, 5, 0, 0] assign __i 0
018 [-1, 9, 18] __println__loop:
019 [28, 1, 5, 1, 4] cmp __i __size
020 [20, 1, 10] jge __println__endloop
021 [8, 2, 1, 3, 1, 5] print __str[__i]
022 [3, 1, 5, 1, 5, 0, 1] add __i __i 1
023 [15, 1, 9] jump __println__loop
024 [-1, 10, 24] __println__endloop:
025 [9] println
026 [13, 0, 0] return 0
027 [-1, 11, 27] printInt:
028 [35, 1, 3, 0, 0] stackget __str 0
029 [8, 1, 3] print __str
030 [13, 0, 0] return 0
031 [-1, 12, 31] printFloat:
032 [35, 1, 3, 0, 0] stackget __str 0
033 [8, 1, 3] print __str
034 [13, 0, 0] return 0
035 [-1, 13, 35] printChar:
036 [35, 1, 14, 0, 0] stackget __char 0
037 [8, 1, 14] print __char
038 [13, 0, 0] return 0
039 [-1, 15, 39] input:
040 [10, 1, 16] input __line
041 [13, 1, 16] return __line
042 [-1, 17, 42] intToString:
043 [35, 1, 18, 0, 0] stackget __val 0
044 [13, 0, 0] return 0
045 [-1, 0, 45] __endOfLibrary:
046 [33, 0, 1] PUSH 1
047 [33, 0, 2] PUSH 2
048 [33, 0, 3] PUSH 3
049 [34, 1, 19] POP __elem2
050 [34, 1, 20] POP __elem1
051 [34, 1, 21] POP __elem0
052 [1, 1, 22, 0, 3] MALLOC __list 3
053 [0, 2, 1, 22, 0, 0, 1, 21] ASSIGN __list[0] __elem0
054 [0, 2, 1, 22, 0, 1, 1, 20] ASSIGN __list[1] __elem1
055 [0, 2, 1, 22, 0, 2, 1, 19] ASSIGN __list[2] __elem2
056 [33, 1, 22] PUSH __list
057 [33, 0, 4] PUSH 4
058 [33, 0, 5] PUSH 5
059 [33, 0, 6] PUSH 6
060 [33, 0, 7] PUSH 7
061 [34, 1, 23] POP __elem3
062 [34, 1, 19] POP __elem2
063 [34, 1, 20] POP __elem1
064 [34, 1, 21] POP __elem0
065 [1, 1, 22, 0, 4] MALLOC __list 4
066 [0, 2, 1, 22, 0, 0, 1, 21] ASSIGN __list[0] __elem0
067 [0, 2, 1, 22, 0, 1, 1, 20] ASSIGN __list[1] __elem1
068 [0, 2, 1, 22, 0, 2, 1, 19] ASSIGN __list[2] __elem2
069 [0, 2, 1, 22, 0, 3, 1, 23] ASSIGN __list[3] __elem3
070 [33, 1, 22] PUSH __list
071 [33, 0, 8] PUSH 8
072 [33, 0, 9] PUSH 9
073 [34, 1, 20] POP __elem1
074 [34, 1, 21] POP __elem0
075 [1, 1, 22, 0, 2] MALLOC __list 2
076 [0, 2, 1, 22, 0, 0, 1, 21] ASSIGN __list[0] __elem0
077 [0, 2, 1, 22, 0, 1, 1, 20] ASSIGN __list[1] __elem1
078 [33, 1, 22] PUSH __list
079 [34, 1, 19] POP __elem2
080 [34, 1, 20] POP __elem1
081 [34, 1, 21] POP __elem0
082 [1, 1, 22, 0, 3] MALLOC __list 3
083 [0, 2, 1, 22, 0, 0, 1, 21] ASSIGN __list[0] __elem0
084 [0, 2, 1, 22, 0, 1, 1, 20] ASSIGN __list[1] __elem1
085 [0, 2, 1, 22, 0, 2, 1, 19] ASSIGN __list[2] __elem2
086 [33, 1, 22] PUSH __list
087 [34, 1, 24] POP __rhs
088 [0, 1, 25, 1, 24] ASSIGN nums __rhs
089 [33, 1, 24] PUSH __rhs
090 [33, 0, 0] PUSH 0
091 [34, 1, 24] POP __rhs
092 [0, 1, 26, 1, 24] ASSIGN i __rhs
093 [33, 1, 24] PUSH __rhs
094 [15, 1, 27] JUMP __forcond0
095 [-1, 28, 95] __for0:
096 [33, 1, 26] PUSH i
097 [34, 1, 24] POP __rhs
098 [3, 1, 26, 1, 26, 0, 1] ADD i i 1
099 [0, 1, 29, 1, 26] ASSIGN __res i
100 [33, 1, 29] PUSH __res
101 [-1, 27, 101] __forcond0:
102 [33, 1, 26] PUSH i
103 [33, 1, 25] PUSH nums
104 [34, 1, 30] POP __array
105 [32, 1, 4, 1, 30] SIZEOF __size __array
106 [33, 1, 4] PUSH __size
107 [34, 1, 24] POP __rhs
108 [34, 1, 31] POP __lhs
109 [24, 1, 29, 1, 31, 1, 24] LT __res __lhs __rhs
110 [33, 1, 29] PUSH __res
111 [34, 1, 32] POP __cond
112 [28, 1, 32, 0, 0] CMP __cond 0
113 [18, 1, 33] JEQ __endfor0
114 [33, 0, 0] PUSH 0
115 [34, 1, 24] POP __rhs
116 [0, 1, 34, 1, 24] ASSIGN j __rhs
117 [33, 1, 24] PUSH __rhs
118 [15, 1, 35] JUMP __forcond1
119 [-1, 36, 119] __for1:
120 [33, 1, 34] PUSH j
121 [34, 1, 24] POP __rhs
122 [3, 1, 34, 1, 34, 0, 1] ADD j j 1
123 [0, 1, 29, 1, 34] ASSIGN __res j
124 [33, 1, 29] PUSH __res
125 [-1, 35, 125] __forcond1:
126 [33, 1, 34] PUSH j
127 [33, 1, 25] PUSH nums
128 [33, 1, 26] PUSH i
129 [34, 1, 37] POP __offset
130 [34, 1, 38] POP __pointer
131 [33, 2, 1, 38, 1, 37] PUSH __pointer[__offset]
132 [34, 1, 30] POP __array
133 [32, 1, 4, 1, 30] SIZEOF __size __array
134 [33, 1, 4] PUSH __size
135 [34, 1, 24] POP __rhs
136 [34, 1, 31] POP __lhs
137 [24, 1, 29, 1, 31, 1, 24] LT __res __lhs __rhs
138 [33, 1, 29] PUSH __res
139 [34, 1, 32] POP __cond
140 [28, 1, 32, 0, 0] CMP __cond 0
141 [18, 1, 39] JEQ __endfor1
142 [33, 1, 25] PUSH nums
143 [33, 1, 26] PUSH i
144 [34, 1, 37] POP __offset
145 [34, 1, 38] POP __pointer
146 [33, 2, 1, 38, 1, 37] PUSH __pointer[__offset]
147 [33, 1, 34] PUSH j
148 [34, 1, 37] POP __offset
149 [34, 1, 38] POP __pointer
150 [33, 2, 1, 38, 1, 37] PUSH __pointer[__offset]
151 [34, 1, 40] POP __arg0
152 [33, 1, 40] PUSH __arg0
153 [12, 1, 11] CALL printInt
154 [34, 1, 1] POP __null
155 [14, 1, 41] RESPONSE __retval
156 [33, 1, 41] PUSH __retval
157 [1, 1, 3, 0, 1] MALLOC __str 1
158 [0, 2, 1, 3, 0, 0, 0, ' '] ASSIGN __str[0] ' '
159 [33, 1, 3] PUSH __str
160 [34, 1, 40] POP __arg0
161 [33, 1, 40] PUSH __arg0
162 [12, 1, 2] CALL print
163 [34, 1, 1] POP __null
164 [14, 1, 41] RESPONSE __retval
165 [33, 1, 41] PUSH __retval
166 [15, 1, 36] JUMP __for1
167 [-1, 39, 167] __endfor1:
168 [1, 1, 3, 0, 0] MALLOC __str 0
169 [33, 1, 3] PUSH __str
170 [34, 1, 40] POP __arg0
171 [33, 1, 40] PUSH __arg0
172 [12, 1, 8] CALL println
173 [34, 1, 1] POP __null
174 [14, 1, 41] RESPONSE __retval
175 [33, 1, 41] PUSH __retval
176 [15, 1, 28] JUMP __for0
177 [-1, 33, 177] __endfor0:
