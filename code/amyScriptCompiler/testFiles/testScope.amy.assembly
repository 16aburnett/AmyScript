// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Class Declaration - __main__Person inherits __main__Object
   // Creating Dispatch Table
      MALLOC __dtable____main__Person 1
      // Populate Dispatch Table
      ASSIGN __dtable____main__Person[0] __method____main__Person____getAge
   //---------------------------------------------------------------------
   // Field - char[] Person::name
   ASSIGN __field____main__Person__name 1
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Field - int Person::age
   ASSIGN __field____main__Person__age 2
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Field - int[] Person::nums
   ASSIGN __field____main__Person__nums 3
   //---------------------------------------------------------------------
// skip over class methods
JUMP __endclass____main__Person
   //---------------------------------------------------------------------
   // Constructor Declaration - Person::Person(char[], int) -> Person
   JUMP __end__ctor____main__Person____Person__char__1__int
   __ctor____main__Person____Person__char__1__int:
      // Creating Class Instance
         MALLOC __this 4
         // Add Dispatch Table
         ASSIGN __this[0] __dtable____main__Person
      // Parameters
         // Param: name
         STACKGET __main__Person__Person__name 0
         // Param: age
         STACKGET __main__Person__Person__age 1
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment
               // RHS
                  // Identifier - name
                     PUSH __main__Person__Person__name
               // LHS
                  // Member Accessor Assignment
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main__Person__name
                     POP __child
                     POP __parent
                     POP __rhs
                     ASSIGN __parent[__child] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
            // Assignment
               // RHS
                  // Identifier - age
                     PUSH __main__Person__Person__age
               // LHS
                  // Member Accessor Assignment
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main__Person__age
                     POP __child
                     POP __parent
                     POP __rhs
                     ASSIGN __parent[__child] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN __this
   __end__ctor____main__Person____Person__char__1__int:
   // End Constructor Declaration - __ctor____main__Person____Person__char__1__int
   //---------------------------------------------------------------------

   //---------------------------------------------------------------------
   // Method Declaration - Person::getAge() -> int
   JUMP __end__method____main__Person____getAge
   __method____main__Person____getAge:
      // Class Instance
         STACKGET __this 0
      // Parameters
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment
               // RHS
                  // Member Accessor
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main__Person__age
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
               // LHS
                  // Variable Declaration
                     ASSIGN __main__Person__getAge__block__1__age 0
               POP __rhs
               ASSIGN __main__Person__getAge__block__1__age __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
            // Return
               // Identifier - age
                  PUSH __main__Person__getAge__block__1__age
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end__method____main__Person____getAge:
   // End Method Declaration - __method____main__Person____getAge
   //---------------------------------------------------------------------

__endclass____main__Person:
// End Class Declaration - __main__Person
//========================================================================

// Assignment
   // RHS
      // Constructor Call - Person::Person(char[], int) -> Person
         // Arguments
            // String Literal
               MALLOC __str 3
               ASSIGN __str[0] 'A'
               ASSIGN __str[1] 'm'
               ASSIGN __str[2] 'y'
               PUSH __str
            // Int Literal
               PUSH 22
            POP __arg1
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg1
         PUSH __arg0
         CALL __ctor____main__Person____Person__char__1__int
         // Remove args
         POP __void
         POP __void
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Variable Declaration
         ASSIGN __main__person 0
   POP __rhs
   ASSIGN __main__person __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment
   // RHS
      // String Literal
         MALLOC __str 6
         ASSIGN __str[0] 'A'
         ASSIGN __str[1] 'u'
         ASSIGN __str[2] 'b'
         ASSIGN __str[3] 'r'
         ASSIGN __str[4] 'e'
         ASSIGN __str[5] 'y'
         PUSH __str
   // LHS
      // Member Accessor Assignment
         // LHS
            // Identifier - person
               PUSH __main__person
         // RHS
            PUSH __field____main__Person__name
         POP __child
         POP __parent
         POP __rhs
         ASSIGN __parent[__child] __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Post-Decrement
   // LHS
      // Member Accessor Assignment
         // LHS
            // Identifier - person
               PUSH __main__person
         // RHS
            PUSH __field____main__Person__age
         POP __child
         POP __parent
         ASSIGN __res __parent[__child]
         SUBTRACT __parent[__child] __parent[__child] 1
   PUSH __res
// Statement results can be ignored
POP __void
// Function Call - print(char[]) -> void
   // Arguments
      // Member Accessor
         // LHS
            // Identifier - person
               PUSH __main__person
         // RHS
            PUSH __field____main__Person__name
         POP __child
         POP __parent
         PUSH __parent[__child]
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 1
         ASSIGN __str[0] ' '
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(int) -> void
   // Arguments
      // Method Call - Person::getAge() -> int
         // LHS
            // Identifier - person
               PUSH __main__person
         // RHS
         // Arguments
         POP __obj
         // Pushing args in reverse order
         PUSH __obj
         CALL __method____main__Person____getAge
         POP __void
         // Remove args
         RESPONSE __retval
         PUSH __retval
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 0
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
// Function Declaration - max(int, int) -> int
JUMP __end____main____max__int__int
__main____max__int__int:
   // Parameters
      // Param: a
      STACKGET __main__max__a 0
      // Param: b
      STACKGET __main__max__b 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Less Than or Equal to
                  // LHS
                     // Identifier - a
                        PUSH __main__max__a
                  // RHS
                     // Identifier - b
                        PUSH __main__max__b
                  POP __rhs
                  POP __lhs
                  LE __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__3
            // Body
               // Return
                  // Identifier - a
                     PUSH __main__max__a
                  POP __rVal
                  RETURN __rVal
            JUMP __endif__3
            // End of if
            __endif__3:
         //---------------------------------------------------------------
         // Return
            // Identifier - b
               PUSH __main__max__b
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main____max__int__int:
// End Function Declaration - __main____max__int__int
//========================================================================

// Assignment
   // RHS
      // Negative
         // RHS
            // Int Literal
               PUSH 47
         POP __rhs
         SUBTRACT __res 0 __rhs
         PUSH __res
   // LHS
      // Variable Declaration
         ASSIGN __main__i 0
   POP __rhs
   ASSIGN __main__i __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 12
         ASSIGN __str[0] 'C'
         ASSIGN __str[1] 'o'
         ASSIGN __str[2] 'u'
         ASSIGN __str[3] 'n'
         ASSIGN __str[4] 't'
         ASSIGN __str[5] ' '
         ASSIGN __str[6] '0'
         ASSIGN __str[7] ' '
         ASSIGN __str[8] 't'
         ASSIGN __str[9] 'o'
         ASSIGN __str[10] ' '
         ASSIGN __str[11] '9'
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// For-Loop
// Init
   // Assignment
      // RHS
         // Int Literal
            PUSH 0
      // LHS
         // Variable Declaration
            ASSIGN __main__for__4__i 0
      POP __rhs
      ASSIGN __main__for__4__i __rhs
      PUSH __rhs
JUMP __forcond__4
__for__4:
   // Update
      // Pre-Increment
         // RHS
            // Identifier - i
               PUSH __main__for__4__i
         POP __rhs
         ADD __main__for__4__i __main__for__4__i 1
         ASSIGN __res __main__for__4__i
         PUSH __res
   __forcond__4:
   // Condition
      // Less Than
         // LHS
            // Identifier - i
               PUSH __main__for__4__i
         // RHS
            // Int Literal
               PUSH 10
         POP __rhs
         POP __lhs
         LT __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endfor__4
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - print(int) -> void
            // Arguments
               // Identifier - i
                  PUSH __main__for__4__i
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 0
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Greater Than
                  // LHS
                     // Identifier - i
                        PUSH __main__for__4__i
                  // RHS
                     // Int Literal
                        PUSH 3
                  POP __rhs
                  POP __lhs
                  GT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__6
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Function Call - println(char[]) -> void
                     // Arguments
                        // String Literal
                           MALLOC __str 40
                           ASSIGN __str[0] 'd'
                           ASSIGN __str[1] 'e'
                           ASSIGN __str[2] 'c'
                           ASSIGN __str[3] 'l'
                           ASSIGN __str[4] 'a'
                           ASSIGN __str[5] 'r'
                           ASSIGN __str[6] 'e'
                           ASSIGN __str[7] ' '
                           ASSIGN __str[8] 'n'
                           ASSIGN __str[9] 'e'
                           ASSIGN __str[10] 'w'
                           ASSIGN __str[11] ' '
                           ASSIGN __str[12] 'i'
                           ASSIGN __str[13] ' '
                           ASSIGN __str[14] 'w'
                           ASSIGN __str[15] 'i'
                           ASSIGN __str[16] 't'
                           ASSIGN __str[17] 'h'
                           ASSIGN __str[18] ' '
                           ASSIGN __str[19] 'v'
                           ASSIGN __str[20] 'a'
                           ASSIGN __str[21] 'l'
                           ASSIGN __str[22] ' '
                           ASSIGN __str[23] '2'
                           ASSIGN __str[24] '2'
                           ASSIGN __str[25] ' '
                           ASSIGN __str[26] 'i'
                           ASSIGN __str[27] 'n'
                           ASSIGN __str[28] ' '
                           ASSIGN __str[29] 'i'
                           ASSIGN __str[30] 'n'
                           ASSIGN __str[31] 'n'
                           ASSIGN __str[32] 'e'
                           ASSIGN __str[33] 'r'
                           ASSIGN __str[34] ' '
                           ASSIGN __str[35] 's'
                           ASSIGN __str[36] 'c'
                           ASSIGN __str[37] 'o'
                           ASSIGN __str[38] 'p'
                           ASSIGN __str[39] 'e'
                           PUSH __str
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** println
                     CALL println__char__1
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
                  // Assignment
                     // RHS
                        // Int Literal
                           PUSH 22
                     // LHS
                        // Variable Declaration
                           ASSIGN __main__for__4__block__5__if__6__block__7__i 0
                     POP __rhs
                     ASSIGN __main__for__4__block__5__if__6__block__7__i __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
                  // Function Call - print(int) -> void
                     // Arguments
                        // Identifier - i
                           PUSH __main__for__4__block__5__if__6__block__7__i
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** print
                     CALL print__int
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
                  // Function Call - println(char[]) -> void
                     // Arguments
                        // String Literal
                           MALLOC __str 0
                           PUSH __str
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** println
                     CALL println__char__1
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
            JUMP __endif__6
            // End of if
            __endif__6:
         //---------------------------------------------------------------
      //------------------------------------------------------------------
   // Repeat
   JUMP __for__4
   // End of For
   __endfor__4:
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 0
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 22
         ASSIGN __str[0] 'o'
         ASSIGN __str[1] 'r'
         ASSIGN __str[2] 'i'
         ASSIGN __str[3] 'g'
         ASSIGN __str[4] 'i'
         ASSIGN __str[5] 'n'
         ASSIGN __str[6] 'a'
         ASSIGN __str[7] 'l'
         ASSIGN __str[8] ' '
         ASSIGN __str[9] 'v'
         ASSIGN __str[10] 'a'
         ASSIGN __str[11] 'l'
         ASSIGN __str[12] 'u'
         ASSIGN __str[13] 'e'
         ASSIGN __str[14] ' '
         ASSIGN __str[15] 'o'
         ASSIGN __str[16] 'f'
         ASSIGN __str[17] ' '
         ASSIGN __str[18] 'i'
         ASSIGN __str[19] ' '
         ASSIGN __str[20] '='
         ASSIGN __str[21] ' '
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(int) -> void
   // Arguments
      // Identifier - i
         PUSH __main__i
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 0
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Assignment
   // RHS
      // Int Literal
         PUSH 12
   // LHS
      // Variable Declaration
         ASSIGN __main____main__i 0
   POP __rhs
   ASSIGN __main____main__i __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

