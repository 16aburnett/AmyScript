// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Function Declaration - add(int, int) -> int
JUMP __end____main____add__int__int
__main____add__int__int:
   // Parameters
      // Param: lhs
      STACKGET __main__add__lhs 0
      // Param: rhs
      STACKGET __main__add__rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Addition
               // LHS
                  // Identifier - lhs
                     PUSH __main__add__lhs
               // RHS
                  // Identifier - rhs
                     PUSH __main__add__rhs
               POP __rhs
               POP __lhs
               ADD __res __lhs __rhs
               PUSH __res
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main____add__int__int:
// End Function Declaration - __main____add__int__int
//========================================================================

// Assignment
   // RHS
      // Array Allocator
         // Int Literal
            PUSH 5
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   // LHS
      // Variable Declaration
         ASSIGN __main__nums 0
   POP __rhs
   ASSIGN __main__nums __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Array Allocator
         // Int Literal
            PUSH 1
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   // LHS
      // Variable Declaration
         ASSIGN __main__nl 0
   POP __rhs
   ASSIGN __main__nl __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Char Literal
         PUSH ' '
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - nl
               PUSH __main__nl
         // OFFSET
            // Int Literal
               PUSH 0
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Int Literal
         PUSH 28
   // LHS
      // Variable Declaration
         ASSIGN __main__a 0
   POP __rhs
   ASSIGN __main__a __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Division
         // LHS
            // Subtraction
               // LHS
                  // Identifier - a
                     PUSH __main__a
               // RHS
                  // Int Literal
                     PUSH 7
               POP __rhs
               POP __lhs
               SUBTRACT __res __lhs __rhs
               PUSH __res
         // RHS
            // Int Literal
               PUSH 3
         POP __rhs
         POP __lhs
         DIVIDE __res __lhs __rhs
         PUSH __res
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - nums
               PUSH __main__nums
         // OFFSET
            // Int Literal
               PUSH 0
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Function Call - print(int) -> void
   // Arguments
      // Subscript
         // LHS
            // Identifier - nums
               PUSH __main__nums
         // OFFSET
            // Int Literal
               PUSH 0
         POP __offset
         POP __pointer
         PUSH __pointer[__offset]
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Assignment
   // RHS
      // Int Literal
         PUSH 10
   // LHS
      // Variable Declaration
         ASSIGN __main__x 0
   POP __rhs
   ASSIGN __main__x __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Int Literal
         PUSH 7
   // LHS
      // Variable Declaration
         ASSIGN __main__y 0
   POP __rhs
   ASSIGN __main__y __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Assignment
         // RHS
            // Function Call - add(int, int) -> int
               // Arguments
                  // Int Literal
                     PUSH 21
                  // Int Literal
                     PUSH 7
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               // *** add
               CALL __main____add__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
         // LHS
            // Variable Declaration
               ASSIGN __main__z 0
         POP __rhs
         ASSIGN __main__z __rhs
         PUSH __rhs
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - nums
               PUSH __main__nums
         // OFFSET
            // Int Literal
               PUSH 1
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Function Call - print(int) -> void
   // Arguments
      // Identifier - z
         PUSH __main__z
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - print(int) -> void
   // Arguments
      // Pre-Increment
         // RHS
            // Subscript
               // LHS
                  // Identifier - nums
                     PUSH __main__nums
               // OFFSET
                  // Int Literal
                     PUSH 1
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
         POP __rhs
         // RHS
            // Subscript assignment
               // LHS
                  // Identifier - nums
                     PUSH __main__nums
               // OFFSET
                  // Int Literal
                     PUSH 1
               POP __offset
               POP __pointer
         ADD __pointer[__offset] __pointer[__offset] 1
         ASSIGN __res __pointer[__offset]
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - print(int) -> void
   // Arguments
      // Post-Decrement
         // RHS
            // Subscript assignment
               // LHS
                  // Identifier - nums
                     PUSH __main__nums
               // OFFSET
                  // Int Literal
                     PUSH 0
               POP __offset
               POP __pointer
         ASSIGN __res __pointer[__offset]
         SUBTRACT __pointer[__offset] __pointer[__offset] 1
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - print(int) -> void
   // Arguments
      // Pre-Increment
         // RHS
            // Identifier - x
               PUSH __main__x
         POP __rhs
         ADD __main__x __main__x 1
         ASSIGN __res __main__x
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - print(int) -> void
   // Arguments
      // Pre-Increment
         // RHS
            // Identifier - x
               PUSH __main__x
         POP __rhs
         ADD __main__x __main__x 1
         ASSIGN __res __main__x
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - print(int) -> void
   // Arguments
      // Pre-Increment
         // RHS
            // Identifier - x
               PUSH __main__x
         POP __rhs
         ADD __main__x __main__x 1
         ASSIGN __res __main__x
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - print(int) -> void
   // Arguments
      // Pre-Increment
         // RHS
            // Identifier - x
               PUSH __main__x
         POP __rhs
         ADD __main__x __main__x 1
         ASSIGN __res __main__x
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - nl
         PUSH __main__nl
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Greater Than
               // LHS
                  // Identifier - x
                     PUSH __main__x
               // RHS
                  // Int Literal
                     PUSH 12
               POP __rhs
               POP __lhs
               GT __res __lhs __rhs
               PUSH __res
         // RHS
            // Equal
               // LHS
                  // Subscript
                     // LHS
                        // Identifier - nums
                           PUSH __main__nums
                     // OFFSET
                        // Int Literal
                           PUSH 0
                     POP __offset
                     POP __pointer
                     PUSH __pointer[__offset]
               // RHS
                  // Post-Decrement
                     // RHS
                        // Subscript assignment
                           // LHS
                              // Identifier - nums
                                 PUSH __main__nums
                           // OFFSET
                              // Int Literal
                                 PUSH 0
                           POP __offset
                           POP __pointer
                     ASSIGN __res __pointer[__offset]
                     SUBTRACT __pointer[__offset] __pointer[__offset] 1
                     PUSH __res
               POP __rhs
               POP __lhs
               EQUAL __res __lhs __rhs
               PUSH __res
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif__1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 25
                  ASSIGN __str[0] 'C'
                  ASSIGN __str[1] 'a'
                  ASSIGN __str[2] 'n'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] 'y'
                  ASSIGN __str[5] 'o'
                  ASSIGN __str[6] 'u'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'e'
                  ASSIGN __str[9] 'v'
                  ASSIGN __str[10] 'e'
                  ASSIGN __str[11] 'n'
                  ASSIGN __str[12] ' '
                  ASSIGN __str[13] 'h'
                  ASSIGN __str[14] 'e'
                  ASSIGN __str[15] 'r'
                  ASSIGN __str[16] 'e'
                  ASSIGN __str[17] ' '
                  ASSIGN __str[18] 'm'
                  ASSIGN __str[19] 'e'
                  ASSIGN __str[20] ' '
                  ASSIGN __str[21] 'n'
                  ASSIGN __str[22] 'o'
                  ASSIGN __str[23] 'w'
                  ASSIGN __str[24] '!'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
   JUMP __endif__1
   // End of if
   __endif__1:
//------------------------------------------------------------------------
//========================================================================
//### END OF CODE ########################################################
//========================================================================

