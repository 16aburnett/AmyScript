// AmyAssembly compiled from AmyScript
// Filename: testFiles/testNull.amy
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__loop:
    // cond
    cmp __i __size
    jge __print__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__loop
__print__endloop:
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__loop:
    // cond
    cmp __i __size
    jge __println__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__loop
__println__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen
// void printInt (int intToPrint);
printInt:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void printFloat (float floatToPrint);
printFloat:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void printChar (char charToPrint);
printChar:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// converts an integer to a string
// char[] intToString (int val);
intToString:
    stackget __val 0

    return 0

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Class Declaration - Person
   //---------------------------------------------------------------------
   // Field - name
   ASSIGN __field__Person__name 0
   //---------------------------------------------------------------------
// skip over class methods
JUMP __endclass__Person
   //---------------------------------------------------------------------
   // Constructor Declaration - Person Person
   JUMP __endctor__Person
   Person:
      // Creating Class Instance
         MALLOC __this 1
      // Parameters
      // Body
      RETURN __this
   __endctor__Person:
   // End Constructor Declaration - Person
   //---------------------------------------------------------------------

__endclass__Person:
// End Class Declaration - Person
//========================================================================

// Assignment
   // RHS
      // Constructor Call
         // Arguments
         // Pushing args in reverse order
         CALL Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   POP __rhs
   ASSIGN person1 __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   POP __rhs
   ASSIGN person2 __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Identifier
               PUSH person1
         // RHS
            // Identifier
               PUSH person2
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif0x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 33
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'a'
               ASSIGN __str[9] 'n'
               ASSIGN __str[10] 'd'
               ASSIGN __str[11] ' '
               ASSIGN __str[12] 'p'
               ASSIGN __str[13] 'e'
               ASSIGN __str[14] 'r'
               ASSIGN __str[15] 's'
               ASSIGN __str[16] 'o'
               ASSIGN __str[17] 'n'
               ASSIGN __str[18] '2'
               ASSIGN __str[19] ' '
               ASSIGN __str[20] 'a'
               ASSIGN __str[21] 'r'
               ASSIGN __str[22] 'e'
               ASSIGN __str[23] ' '
               ASSIGN __str[24] 'a'
               ASSIGN __str[25] 'l'
               ASSIGN __str[26] 'l'
               ASSIGN __str[27] 'o'
               ASSIGN __str[28] 'c'
               ASSIGN __str[29] 'a'
               ASSIGN __str[30] 't'
               ASSIGN __str[31] 'e'
               ASSIGN __str[32] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif0
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif0x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier
               PUSH person1
         // RHS
            // Null Literal
               ASSIGN __null 0
               PUSH __null
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif0x1
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 20
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'i'
               ASSIGN __str[9] 's'
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'a'
               ASSIGN __str[12] 'l'
               ASSIGN __str[13] 'l'
               ASSIGN __str[14] 'o'
               ASSIGN __str[15] 'c'
               ASSIGN __str[16] 'a'
               ASSIGN __str[17] 't'
               ASSIGN __str[18] 'e'
               ASSIGN __str[19] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif0
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif0x1:
      // Condition
      // Identifier
         PUSH person2
      POP __cond
      CMP __cond 0
      JEQ __else0
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 20
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '2'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'i'
               ASSIGN __str[9] 's'
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'a'
               ASSIGN __str[12] 'l'
               ASSIGN __str[13] 'l'
               ASSIGN __str[14] 'o'
               ASSIGN __str[15] 'c'
               ASSIGN __str[16] 'a'
               ASSIGN __str[17] 't'
               ASSIGN __str[18] 'e'
               ASSIGN __str[19] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif0
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else0:
   // Function Call
      // Arguments
         // Literal
            MALLOC __str 28
            ASSIGN __str[0] 'p'
            ASSIGN __str[1] 'e'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] 'o'
            ASSIGN __str[5] 'n'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] 'n'
            ASSIGN __str[10] 'd'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] 'p'
            ASSIGN __str[13] 'e'
            ASSIGN __str[14] 'r'
            ASSIGN __str[15] 's'
            ASSIGN __str[16] 'o'
            ASSIGN __str[17] 'n'
            ASSIGN __str[18] '2'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] 'a'
            ASSIGN __str[21] 'r'
            ASSIGN __str[22] 'e'
            ASSIGN __str[23] ' '
            ASSIGN __str[24] 'n'
            ASSIGN __str[25] 'u'
            ASSIGN __str[26] 'l'
            ASSIGN __str[27] 'l'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      CALL println
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   //---------------------------------------------------------------------
   // End of if
   __endif0:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier
               PUSH person1
         // RHS
            // Identifier
               PUSH person2
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif1x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '='
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'r'
               ASSIGN __str[14] 's'
               ASSIGN __str[15] 'o'
               ASSIGN __str[16] 'n'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif1
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif1x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier
               PUSH person1
         // RHS
            // Identifier
               PUSH person2
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif1
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '!'
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'r'
               ASSIGN __str[14] 's'
               ASSIGN __str[15] 'o'
               ASSIGN __str[16] 'n'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif1
   //---------------------------------------------------------------------
   // End of if
   __endif1:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Array Allocator
         // Literal
            PUSH 4
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   POP __rhs
   ASSIGN a __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   POP __rhs
   ASSIGN b __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Identifier
               PUSH a
         // RHS
            // Identifier
               PUSH b
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif2x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 21
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] 'a'
               ASSIGN __str[3] 'n'
               ASSIGN __str[4] 'd'
               ASSIGN __str[5] ' '
               ASSIGN __str[6] 'b'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'a'
               ASSIGN __str[9] 'r'
               ASSIGN __str[10] 'e'
               ASSIGN __str[11] ' '
               ASSIGN __str[12] 'a'
               ASSIGN __str[13] 'l'
               ASSIGN __str[14] 'l'
               ASSIGN __str[15] 'o'
               ASSIGN __str[16] 'c'
               ASSIGN __str[17] 'a'
               ASSIGN __str[18] 't'
               ASSIGN __str[19] 'e'
               ASSIGN __str[20] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif2
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif2x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier
               PUSH a
         // RHS
            // Null Literal
               ASSIGN __null 0
               PUSH __null
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif2x1
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 14
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] 'i'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] ' '
               ASSIGN __str[5] 'a'
               ASSIGN __str[6] 'l'
               ASSIGN __str[7] 'l'
               ASSIGN __str[8] 'o'
               ASSIGN __str[9] 'c'
               ASSIGN __str[10] 'a'
               ASSIGN __str[11] 't'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif2
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif2x1:
      // Condition
      // Identifier
         PUSH b
      POP __cond
      CMP __cond 0
      JEQ __else2
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 14
               ASSIGN __str[0] 'b'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] 'i'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] ' '
               ASSIGN __str[5] 'a'
               ASSIGN __str[6] 'l'
               ASSIGN __str[7] 'l'
               ASSIGN __str[8] 'o'
               ASSIGN __str[9] 'c'
               ASSIGN __str[10] 'a'
               ASSIGN __str[11] 't'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif2
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else2:
   // Function Call
      // Arguments
         // Literal
            MALLOC __str 16
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] 'a'
            ASSIGN __str[3] 'n'
            ASSIGN __str[4] 'd'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'b'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] 'r'
            ASSIGN __str[10] 'e'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] 'n'
            ASSIGN __str[13] 'u'
            ASSIGN __str[14] 'l'
            ASSIGN __str[15] 'l'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      CALL println
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   //---------------------------------------------------------------------
   // End of if
   __endif2:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier
               PUSH a
         // RHS
            // Identifier
               PUSH b
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif3x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 6
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] '='
               ASSIGN __str[3] '='
               ASSIGN __str[4] ' '
               ASSIGN __str[5] 'b'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif3
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif3x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier
               PUSH a
         // RHS
            // Identifier
               PUSH b
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif3
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 6
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] '!'
               ASSIGN __str[3] '='
               ASSIGN __str[4] ' '
               ASSIGN __str[5] 'b'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif3
   //---------------------------------------------------------------------
   // End of if
   __endif3:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Array Allocator
         // Literal
            PUSH 5
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   POP __rhs
   ASSIGN people1 __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   POP __rhs
   ASSIGN people2 __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Identifier
               PUSH people1
         // RHS
            // Identifier
               PUSH people2
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif4x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 33
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'a'
               ASSIGN __str[9] 'n'
               ASSIGN __str[10] 'd'
               ASSIGN __str[11] ' '
               ASSIGN __str[12] 'p'
               ASSIGN __str[13] 'e'
               ASSIGN __str[14] 'o'
               ASSIGN __str[15] 'p'
               ASSIGN __str[16] 'l'
               ASSIGN __str[17] 'e'
               ASSIGN __str[18] '2'
               ASSIGN __str[19] ' '
               ASSIGN __str[20] 'a'
               ASSIGN __str[21] 'r'
               ASSIGN __str[22] 'e'
               ASSIGN __str[23] ' '
               ASSIGN __str[24] 'a'
               ASSIGN __str[25] 'l'
               ASSIGN __str[26] 'l'
               ASSIGN __str[27] 'o'
               ASSIGN __str[28] 'c'
               ASSIGN __str[29] 'a'
               ASSIGN __str[30] 't'
               ASSIGN __str[31] 'e'
               ASSIGN __str[32] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif4
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif4x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier
               PUSH people1
         // RHS
            // Null Literal
               ASSIGN __null 0
               PUSH __null
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif4x1
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 20
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'i'
               ASSIGN __str[9] 's'
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'a'
               ASSIGN __str[12] 'l'
               ASSIGN __str[13] 'l'
               ASSIGN __str[14] 'o'
               ASSIGN __str[15] 'c'
               ASSIGN __str[16] 'a'
               ASSIGN __str[17] 't'
               ASSIGN __str[18] 'e'
               ASSIGN __str[19] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif4
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif4x1:
      // Condition
      // Identifier
         PUSH people2
      POP __cond
      CMP __cond 0
      JEQ __else4
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 20
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '2'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'i'
               ASSIGN __str[9] 's'
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'a'
               ASSIGN __str[12] 'l'
               ASSIGN __str[13] 'l'
               ASSIGN __str[14] 'o'
               ASSIGN __str[15] 'c'
               ASSIGN __str[16] 'a'
               ASSIGN __str[17] 't'
               ASSIGN __str[18] 'e'
               ASSIGN __str[19] 'd'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif4
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else4:
   // Function Call
      // Arguments
         // Literal
            MALLOC __str 28
            ASSIGN __str[0] 'p'
            ASSIGN __str[1] 'e'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'p'
            ASSIGN __str[4] 'l'
            ASSIGN __str[5] 'e'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] 'n'
            ASSIGN __str[10] 'd'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] 'p'
            ASSIGN __str[13] 'e'
            ASSIGN __str[14] 'o'
            ASSIGN __str[15] 'p'
            ASSIGN __str[16] 'l'
            ASSIGN __str[17] 'e'
            ASSIGN __str[18] '2'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] 'a'
            ASSIGN __str[21] 'r'
            ASSIGN __str[22] 'e'
            ASSIGN __str[23] ' '
            ASSIGN __str[24] 'n'
            ASSIGN __str[25] 'u'
            ASSIGN __str[26] 'l'
            ASSIGN __str[27] 'l'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      CALL println
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   //---------------------------------------------------------------------
   // End of if
   __endif4:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier
               PUSH people1
         // RHS
            // Identifier
               PUSH people2
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif5x0
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '='
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'o'
               ASSIGN __str[14] 'p'
               ASSIGN __str[15] 'l'
               ASSIGN __str[16] 'e'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif5
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif5x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier
               PUSH people1
         // RHS
            // Identifier
               PUSH people2
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif5
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '!'
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'o'
               ASSIGN __str[14] 'p'
               ASSIGN __str[15] 'l'
               ASSIGN __str[16] 'e'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif5
   //---------------------------------------------------------------------
   // End of if
   __endif5:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Constructor Call
         // Arguments
         // Pushing args in reverse order
         CALL Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people1
         // OFFSET
            // Literal
               PUSH 0
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Constructor Call
         // Arguments
         // Pushing args in reverse order
         CALL Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people1
         // OFFSET
            // Literal
               PUSH 1
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people1
         // OFFSET
            // Literal
               PUSH 2
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Constructor Call
         // Arguments
         // Pushing args in reverse order
         CALL Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people1
         // OFFSET
            // Literal
               PUSH 3
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Subscript assignment
         // LHS
            // Identifier
               PUSH people1
         // OFFSET
            // Literal
               PUSH 4
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// For-Loop
// Init
   // Assignment
      // RHS
         // Literal
            PUSH 0
      POP __rhs
      ASSIGN i __rhs
      PUSH __rhs
JUMP __forcond6
__for6:
   // Update
      // Pre-Increment
         // RHS
            // Identifier
               PUSH i
         POP __rhs
         ADD i i 1
         ASSIGN __res i
         PUSH __res
   __forcond6:
   // Condition
      // Less Than
         // LHS
            // Identifier
               PUSH i
         // RHS
            // Sizeof Operator
               // RHS
                  // Identifier
                     PUSH people1
               // Calculate array size
               POP __array
               SIZEOF __size __array
               PUSH __size
         POP __rhs
         POP __lhs
         LT __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endfor6
   // Body
      //------------------------------------------------------------------
      // If-Statement
         // Condition
            // Subscript
               // LHS
                  // Identifier
                     PUSH people1
               // OFFSET
                  // Identifier
                     PUSH i
               POP __offset
               POP __pointer
               PUSH __pointer[__offset]
            POP __cond
            CMP __cond 0
            JEQ __else7
         // Body
            // Function Call
               // Arguments
                  // Literal
                     MALLOC __str 9
                     ASSIGN __str[0] 'a'
                     ASSIGN __str[1] 'l'
                     ASSIGN __str[2] 'l'
                     ASSIGN __str[3] 'o'
                     ASSIGN __str[4] 'c'
                     ASSIGN __str[5] 'a'
                     ASSIGN __str[6] 't'
                     ASSIGN __str[7] 'e'
                     ASSIGN __str[8] 'd'
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               CALL println
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
         JUMP __endif7
         //---------------------------------------------------------------
         // Else-Statement
         __else7:
         // Function Call
            // Arguments
               // Literal
                  MALLOC __str 4
                  ASSIGN __str[0] 'n'
                  ASSIGN __str[1] 'u'
                  ASSIGN __str[2] 'l'
                  ASSIGN __str[3] 'l'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            CALL println
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         //---------------------------------------------------------------
         // End of if
         __endif7:
      //------------------------------------------------------------------
   // Repeat
   JUMP __for6
   // End of For
   __endfor6:
//------------------------------------------------------------------------
//========================================================================
//### END OF CODE ########################################################
//========================================================================

