// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Class Declaration - __main__Person inherits __main__Object
   //---------------------------------------------------------------------
   // Field - char[] Person::name
   ASSIGN __field____main__Person__name 1
   //---------------------------------------------------------------------
// skip over class methods
JUMP __endclass____main__Person
   //---------------------------------------------------------------------
   // Constructor Declaration - Person::Person() -> Person
   JUMP __end__ctor____main__Person____Person
   __ctor____main__Person____Person:
      // Creating Class Instance
         MALLOC __this 2
         // Creating Dispatch Table
            MALLOC __dtable 0
            // Populate Dispatch Table
            // Add Dispatch Table
            ASSIGN __this[0] __dtable
      // Parameters
      // Body
         //---------------------------------------------------------------
         // Code Block
         //---------------------------------------------------------------
      RETURN __this
   __end__ctor____main__Person____Person:
   // End Constructor Declaration - __ctor____main__Person____Person
   //---------------------------------------------------------------------

__endclass____main__Person:
// End Class Declaration - __main__Person
//========================================================================

// Assignment
   // RHS
      // Constructor Call - Person::Person() -> Person
         // Arguments
         // Pushing args in reverse order
         CALL __ctor____main__Person____Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Variable Declaration
         ASSIGN __main__person1 0
   POP __rhs
   ASSIGN __main__person1 __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Variable Declaration
         ASSIGN __main__person2 0
   POP __rhs
   ASSIGN __main__person2 __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Identifier - person1
               PUSH __main__person1
         // RHS
            // Identifier - person2
               PUSH __main__person2
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__1x0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 33
                  ASSIGN __str[0] 'p'
                  ASSIGN __str[1] 'e'
                  ASSIGN __str[2] 'r'
                  ASSIGN __str[3] 's'
                  ASSIGN __str[4] 'o'
                  ASSIGN __str[5] 'n'
                  ASSIGN __str[6] '1'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'a'
                  ASSIGN __str[9] 'n'
                  ASSIGN __str[10] 'd'
                  ASSIGN __str[11] ' '
                  ASSIGN __str[12] 'p'
                  ASSIGN __str[13] 'e'
                  ASSIGN __str[14] 'r'
                  ASSIGN __str[15] 's'
                  ASSIGN __str[16] 'o'
                  ASSIGN __str[17] 'n'
                  ASSIGN __str[18] '2'
                  ASSIGN __str[19] ' '
                  ASSIGN __str[20] 'a'
                  ASSIGN __str[21] 'r'
                  ASSIGN __str[22] 'e'
                  ASSIGN __str[23] ' '
                  ASSIGN __str[24] 'a'
                  ASSIGN __str[25] 'l'
                  ASSIGN __str[26] 'l'
                  ASSIGN __str[27] 'o'
                  ASSIGN __str[28] 'c'
                  ASSIGN __str[29] 'a'
                  ASSIGN __str[30] 't'
                  ASSIGN __str[31] 'e'
                  ASSIGN __str[32] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
   JUMP __endif__1
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__1x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier - person1
               PUSH __main__person1
         // RHS
            // Null Literal
               ASSIGN __null 0
               PUSH __null
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__1x1
      // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 20
                  ASSIGN __str[0] 'p'
                  ASSIGN __str[1] 'e'
                  ASSIGN __str[2] 'r'
                  ASSIGN __str[3] 's'
                  ASSIGN __str[4] 'o'
                  ASSIGN __str[5] 'n'
                  ASSIGN __str[6] '1'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'i'
                  ASSIGN __str[9] 's'
                  ASSIGN __str[10] ' '
                  ASSIGN __str[11] 'a'
                  ASSIGN __str[12] 'l'
                  ASSIGN __str[13] 'l'
                  ASSIGN __str[14] 'o'
                  ASSIGN __str[15] 'c'
                  ASSIGN __str[16] 'a'
                  ASSIGN __str[17] 't'
                  ASSIGN __str[18] 'e'
                  ASSIGN __str[19] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
      JUMP __endif__1
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__1x1:
      // Condition
      // Identifier - person2
         PUSH __main__person2
      POP __cond
      CMP __cond 0
      JEQ __else__1
      // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 20
                  ASSIGN __str[0] 'p'
                  ASSIGN __str[1] 'e'
                  ASSIGN __str[2] 'r'
                  ASSIGN __str[3] 's'
                  ASSIGN __str[4] 'o'
                  ASSIGN __str[5] 'n'
                  ASSIGN __str[6] '2'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'i'
                  ASSIGN __str[9] 's'
                  ASSIGN __str[10] ' '
                  ASSIGN __str[11] 'a'
                  ASSIGN __str[12] 'l'
                  ASSIGN __str[13] 'l'
                  ASSIGN __str[14] 'o'
                  ASSIGN __str[15] 'c'
                  ASSIGN __str[16] 'a'
                  ASSIGN __str[17] 't'
                  ASSIGN __str[18] 'e'
                  ASSIGN __str[19] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
      JUMP __endif__1
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else__1:
   //---------------------------------------------------------------------
   // Code Block
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 28
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'a'
               ASSIGN __str[9] 'n'
               ASSIGN __str[10] 'd'
               ASSIGN __str[11] ' '
               ASSIGN __str[12] 'p'
               ASSIGN __str[13] 'e'
               ASSIGN __str[14] 'r'
               ASSIGN __str[15] 's'
               ASSIGN __str[16] 'o'
               ASSIGN __str[17] 'n'
               ASSIGN __str[18] '2'
               ASSIGN __str[19] ' '
               ASSIGN __str[20] 'a'
               ASSIGN __str[21] 'r'
               ASSIGN __str[22] 'e'
               ASSIGN __str[23] ' '
               ASSIGN __str[24] 'n'
               ASSIGN __str[25] 'u'
               ASSIGN __str[26] 'l'
               ASSIGN __str[27] 'l'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // End of if
   __endif__1:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier - person1
               PUSH __main__person1
         // RHS
            // Identifier - person2
               PUSH __main__person2
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__6x0
   // Body
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '='
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'r'
               ASSIGN __str[14] 's'
               ASSIGN __str[15] 'o'
               ASSIGN __str[16] 'n'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif__6
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__6x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier - person1
               PUSH __main__person1
         // RHS
            // Identifier - person2
               PUSH __main__person2
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif__6
      // Body
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'r'
               ASSIGN __str[3] 's'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'n'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '!'
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'r'
               ASSIGN __str[14] 's'
               ASSIGN __str[15] 'o'
               ASSIGN __str[16] 'n'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif__6
   //---------------------------------------------------------------------
   // End of if
   __endif__6:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Array Allocator
         // Int Literal
            PUSH 4
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   // LHS
      // Variable Declaration
         ASSIGN __main__a 0
   POP __rhs
   ASSIGN __main__a __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Variable Declaration
         ASSIGN __main__b 0
   POP __rhs
   ASSIGN __main__b __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__7x0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 21
                  ASSIGN __str[0] 'a'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] 'a'
                  ASSIGN __str[3] 'n'
                  ASSIGN __str[4] 'd'
                  ASSIGN __str[5] ' '
                  ASSIGN __str[6] 'b'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'a'
                  ASSIGN __str[9] 'r'
                  ASSIGN __str[10] 'e'
                  ASSIGN __str[11] ' '
                  ASSIGN __str[12] 'a'
                  ASSIGN __str[13] 'l'
                  ASSIGN __str[14] 'l'
                  ASSIGN __str[15] 'o'
                  ASSIGN __str[16] 'c'
                  ASSIGN __str[17] 'a'
                  ASSIGN __str[18] 't'
                  ASSIGN __str[19] 'e'
                  ASSIGN __str[20] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
   JUMP __endif__7
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__7x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Null Literal
               ASSIGN __null 0
               PUSH __null
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__7x1
      // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 14
                  ASSIGN __str[0] 'a'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] 'i'
                  ASSIGN __str[3] 's'
                  ASSIGN __str[4] ' '
                  ASSIGN __str[5] 'a'
                  ASSIGN __str[6] 'l'
                  ASSIGN __str[7] 'l'
                  ASSIGN __str[8] 'o'
                  ASSIGN __str[9] 'c'
                  ASSIGN __str[10] 'a'
                  ASSIGN __str[11] 't'
                  ASSIGN __str[12] 'e'
                  ASSIGN __str[13] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
      JUMP __endif__7
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__7x1:
      // Condition
      // Identifier - b
         PUSH __main__b
      POP __cond
      CMP __cond 0
      JEQ __else__7
      // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 14
                  ASSIGN __str[0] 'b'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] 'i'
                  ASSIGN __str[3] 's'
                  ASSIGN __str[4] ' '
                  ASSIGN __str[5] 'a'
                  ASSIGN __str[6] 'l'
                  ASSIGN __str[7] 'l'
                  ASSIGN __str[8] 'o'
                  ASSIGN __str[9] 'c'
                  ASSIGN __str[10] 'a'
                  ASSIGN __str[11] 't'
                  ASSIGN __str[12] 'e'
                  ASSIGN __str[13] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
      JUMP __endif__7
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else__7:
   //---------------------------------------------------------------------
   // Code Block
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 16
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] 'a'
               ASSIGN __str[3] 'n'
               ASSIGN __str[4] 'd'
               ASSIGN __str[5] ' '
               ASSIGN __str[6] 'b'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'a'
               ASSIGN __str[9] 'r'
               ASSIGN __str[10] 'e'
               ASSIGN __str[11] ' '
               ASSIGN __str[12] 'n'
               ASSIGN __str[13] 'u'
               ASSIGN __str[14] 'l'
               ASSIGN __str[15] 'l'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // End of if
   __endif__7:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__12x0
   // Body
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 6
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] '='
               ASSIGN __str[3] '='
               ASSIGN __str[4] ' '
               ASSIGN __str[5] 'b'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif__12
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__12x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif__12
      // Body
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 6
               ASSIGN __str[0] 'a'
               ASSIGN __str[1] ' '
               ASSIGN __str[2] '!'
               ASSIGN __str[3] '='
               ASSIGN __str[4] ' '
               ASSIGN __str[5] 'b'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif__12
   //---------------------------------------------------------------------
   // End of if
   __endif__12:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Array Allocator
         // Int Literal
            PUSH 5
         POP __size
         MALLOC __ptr __size
         PUSH __ptr
   // LHS
      // Variable Declaration
         ASSIGN __main__people1 0
   POP __rhs
   ASSIGN __main__people1 __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Variable Declaration
         ASSIGN __main__people2 0
   POP __rhs
   ASSIGN __main__people2 __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // AND
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // RHS
            // Identifier - people2
               PUSH __main__people2
         POP __rhs
         POP __lhs
         AND __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__13x0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 33
                  ASSIGN __str[0] 'p'
                  ASSIGN __str[1] 'e'
                  ASSIGN __str[2] 'o'
                  ASSIGN __str[3] 'p'
                  ASSIGN __str[4] 'l'
                  ASSIGN __str[5] 'e'
                  ASSIGN __str[6] '1'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'a'
                  ASSIGN __str[9] 'n'
                  ASSIGN __str[10] 'd'
                  ASSIGN __str[11] ' '
                  ASSIGN __str[12] 'p'
                  ASSIGN __str[13] 'e'
                  ASSIGN __str[14] 'o'
                  ASSIGN __str[15] 'p'
                  ASSIGN __str[16] 'l'
                  ASSIGN __str[17] 'e'
                  ASSIGN __str[18] '2'
                  ASSIGN __str[19] ' '
                  ASSIGN __str[20] 'a'
                  ASSIGN __str[21] 'r'
                  ASSIGN __str[22] 'e'
                  ASSIGN __str[23] ' '
                  ASSIGN __str[24] 'a'
                  ASSIGN __str[25] 'l'
                  ASSIGN __str[26] 'l'
                  ASSIGN __str[27] 'o'
                  ASSIGN __str[28] 'c'
                  ASSIGN __str[29] 'a'
                  ASSIGN __str[30] 't'
                  ASSIGN __str[31] 'e'
                  ASSIGN __str[32] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
   JUMP __endif__13
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__13x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // RHS
            // Null Literal
               ASSIGN __null 0
               PUSH __null
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__13x1
      // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 20
                  ASSIGN __str[0] 'p'
                  ASSIGN __str[1] 'e'
                  ASSIGN __str[2] 'o'
                  ASSIGN __str[3] 'p'
                  ASSIGN __str[4] 'l'
                  ASSIGN __str[5] 'e'
                  ASSIGN __str[6] '1'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'i'
                  ASSIGN __str[9] 's'
                  ASSIGN __str[10] ' '
                  ASSIGN __str[11] 'a'
                  ASSIGN __str[12] 'l'
                  ASSIGN __str[13] 'l'
                  ASSIGN __str[14] 'o'
                  ASSIGN __str[15] 'c'
                  ASSIGN __str[16] 'a'
                  ASSIGN __str[17] 't'
                  ASSIGN __str[18] 'e'
                  ASSIGN __str[19] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
      JUMP __endif__13
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__13x1:
      // Condition
      // Identifier - people2
         PUSH __main__people2
      POP __cond
      CMP __cond 0
      JEQ __else__13
      // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 20
                  ASSIGN __str[0] 'p'
                  ASSIGN __str[1] 'e'
                  ASSIGN __str[2] 'o'
                  ASSIGN __str[3] 'p'
                  ASSIGN __str[4] 'l'
                  ASSIGN __str[5] 'e'
                  ASSIGN __str[6] '2'
                  ASSIGN __str[7] ' '
                  ASSIGN __str[8] 'i'
                  ASSIGN __str[9] 's'
                  ASSIGN __str[10] ' '
                  ASSIGN __str[11] 'a'
                  ASSIGN __str[12] 'l'
                  ASSIGN __str[13] 'l'
                  ASSIGN __str[14] 'o'
                  ASSIGN __str[15] 'c'
                  ASSIGN __str[16] 'a'
                  ASSIGN __str[17] 't'
                  ASSIGN __str[18] 'e'
                  ASSIGN __str[19] 'd'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      //------------------------------------------------------------------
      JUMP __endif__13
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else__13:
   //---------------------------------------------------------------------
   // Code Block
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 28
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] 'a'
               ASSIGN __str[9] 'n'
               ASSIGN __str[10] 'd'
               ASSIGN __str[11] ' '
               ASSIGN __str[12] 'p'
               ASSIGN __str[13] 'e'
               ASSIGN __str[14] 'o'
               ASSIGN __str[15] 'p'
               ASSIGN __str[16] 'l'
               ASSIGN __str[17] 'e'
               ASSIGN __str[18] '2'
               ASSIGN __str[19] ' '
               ASSIGN __str[20] 'a'
               ASSIGN __str[21] 'r'
               ASSIGN __str[22] 'e'
               ASSIGN __str[23] ' '
               ASSIGN __str[24] 'n'
               ASSIGN __str[25] 'u'
               ASSIGN __str[26] 'l'
               ASSIGN __str[27] 'l'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // End of if
   __endif__13:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // RHS
            // Identifier - people2
               PUSH __main__people2
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif__18x0
   // Body
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '='
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'o'
               ASSIGN __str[14] 'p'
               ASSIGN __str[15] 'l'
               ASSIGN __str[16] 'e'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
   JUMP __endif__18
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif__18x0:
      // Condition
      // Not Equal
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // RHS
            // Identifier - people2
               PUSH __main__people2
         POP __rhs
         POP __lhs
         NEQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif__18
      // Body
      // Function Call - println(char[]) -> void
         // Arguments
            // String Literal
               MALLOC __str 18
               ASSIGN __str[0] 'p'
               ASSIGN __str[1] 'e'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'p'
               ASSIGN __str[4] 'l'
               ASSIGN __str[5] 'e'
               ASSIGN __str[6] '1'
               ASSIGN __str[7] ' '
               ASSIGN __str[8] '!'
               ASSIGN __str[9] '='
               ASSIGN __str[10] ' '
               ASSIGN __str[11] 'p'
               ASSIGN __str[12] 'e'
               ASSIGN __str[13] 'o'
               ASSIGN __str[14] 'p'
               ASSIGN __str[15] 'l'
               ASSIGN __str[16] 'e'
               ASSIGN __str[17] '2'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char__1
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      JUMP __endif__18
   //---------------------------------------------------------------------
   // End of if
   __endif__18:
//------------------------------------------------------------------------
// Assignment
   // RHS
      // Constructor Call - Person::Person() -> Person
         // Arguments
         // Pushing args in reverse order
         CALL __ctor____main__Person____Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // OFFSET
            // Int Literal
               PUSH 0
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Constructor Call - Person::Person() -> Person
         // Arguments
         // Pushing args in reverse order
         CALL __ctor____main__Person____Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // OFFSET
            // Int Literal
               PUSH 1
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // OFFSET
            // Int Literal
               PUSH 2
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Constructor Call - Person::Person() -> Person
         // Arguments
         // Pushing args in reverse order
         CALL __ctor____main__Person____Person
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // OFFSET
            // Int Literal
               PUSH 3
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Null Literal
         ASSIGN __null 0
         PUSH __null
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - people1
               PUSH __main__people1
         // OFFSET
            // Int Literal
               PUSH 4
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// For-Loop
// Init
   // Assignment
      // RHS
         // Int Literal
            PUSH 0
      // LHS
         // Variable Declaration
            ASSIGN __main__for__19__i 0
      POP __rhs
      ASSIGN __main__for__19__i __rhs
      PUSH __rhs
JUMP __forcond__19
__for__19:
   // Update
      // Pre-Increment
         // RHS
            // Identifier - i
               PUSH __main__for__19__i
         POP __rhs
         ADD __main__for__19__i __main__for__19__i 1
         ASSIGN __res __main__for__19__i
         PUSH __res
   __forcond__19:
   // Condition
      // Less Than
         // LHS
            // Identifier - i
               PUSH __main__for__19__i
         // RHS
            // Sizeof Operator
               // RHS
                  // Identifier - people1
                     PUSH __main__people1
               // Calculate array size
               POP __array
               SIZEOF __size __array
               PUSH __size
         POP __rhs
         POP __lhs
         LT __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endfor__19
   // Body
      //------------------------------------------------------------------
      // Code Block
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Subscript
                  // LHS
                     // Identifier - people1
                        PUSH __main__people1
                  // OFFSET
                     // Identifier - i
                        PUSH __main__for__19__i
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
               POP __cond
               CMP __cond 0
               JEQ __else__21
            // Body
               // Function Call - println(char[]) -> void
                  // Arguments
                     // String Literal
                        MALLOC __str 9
                        ASSIGN __str[0] 'a'
                        ASSIGN __str[1] 'l'
                        ASSIGN __str[2] 'l'
                        ASSIGN __str[3] 'o'
                        ASSIGN __str[4] 'c'
                        ASSIGN __str[5] 'a'
                        ASSIGN __str[6] 't'
                        ASSIGN __str[7] 'e'
                        ASSIGN __str[8] 'd'
                        PUSH __str
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** println
                  CALL println__char__1
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
            JUMP __endif__21
            //------------------------------------------------------------
            // Else-Statement
            __else__21:
            // Function Call - println(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 4
                     ASSIGN __str[0] 'n'
                     ASSIGN __str[1] 'u'
                     ASSIGN __str[2] 'l'
                     ASSIGN __str[3] 'l'
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            //------------------------------------------------------------
            // End of if
            __endif__21:
         //---------------------------------------------------------------
      //------------------------------------------------------------------
   // Repeat
   JUMP __for__19
   // End of For
   __endfor__19:
//------------------------------------------------------------------------
//========================================================================
//### END OF CODE ########################################################
//========================================================================

