// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__loop:
    // cond
    cmp __i __size
    jge __print__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__loop
__print__endloop:
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__loop:
    // cond
    cmp __i __size
    jge __println__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__loop
__println__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen
// void printInt (int intToPrint);
printInt:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void printFloat (float floatToPrint);
printFloat:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void printChar (char charToPrint);
printChar:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================



//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

// Assignment
   // RHS
      // Function Call
         // Arguments
         // Pushing args in reverse order
         // *** input
         CALL input
         // Remove args
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Variable Declaration
         ASSIGN __main__msg 0
   POP __rhs
   ASSIGN __main__msg __rhs
   PUSH __rhs
// Function Call
   // Arguments
      // Identifier - msg
         PUSH __main__msg
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call
   // Arguments
      // Literal
         MALLOC __str 1
         ASSIGN __str[0] ' '
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call
   // Arguments
      // Identifier - msg
         PUSH __main__msg
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call
   // Arguments
      // Literal
         MALLOC __str 1
         ASSIGN __str[0] ' '
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Function Call
   // Arguments
      // Identifier - msg
         PUSH __main__msg
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
//========================================================================
//### END OF CODE ########################################################
//========================================================================

