// AmyAssembly compiled from AmyScript
// Filename: testFiles/cond.amy
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__loop:
    // cond
    cmp __i __size
    jge __print__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__loop
__print__endloop:
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__loop:
    // cond
    cmp __i __size
    jge __println__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__loop
__println__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen
// void printInt (int intToPrint);
printInt:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void printFloat (float floatToPrint);
printFloat:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void printChar (char charToPrint);
printChar:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// converts an integer to a string
// char[] intToString (int val);
intToString:
    stackget __val 0

    return 0

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

// Assignment
   // RHS
      // Literal
         PUSH 10
   POP __rhs
   ASSIGN x __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 7
   POP __rhs
   ASSIGN y __rhs
   PUSH __rhs
// Assignment
   // RHS
      // Literal
         PUSH 7
   POP __rhs
   ASSIGN z __rhs
   PUSH __rhs
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // Equal
         // LHS
            // Identifier
               PUSH x
         // RHS
            // Literal
               PUSH 0
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif0x0
   // Body
      //------------------------------------------------------------------
      // If-Statement
         // Condition
            // Literal
               PUSH 1
            POP __cond
            CMP __cond 0
            JEQ __endif1
         // Body
            // Function Call
               // Arguments
                  // Identifier
                     PUSH x
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               CALL printInt
               // Remove args
               POP __null
               RESPONSE __retval
               PUSH __retval
         JUMP __endif1
         // End of if
         __endif1:
      //------------------------------------------------------------------
   JUMP __endif0
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif0x0:
      // Condition
      // Equal
         // LHS
            // Identifier
               PUSH x
         // RHS
            // Identifier
               PUSH y
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __elif0x1
      // Body
      // Function Call
         // Arguments
            // Identifier
               PUSH x
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL printInt
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
      JUMP __endif0
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Elif-Statement
   __elif0x1:
      // Condition
      // Equal
         // LHS
            // Identifier
               PUSH x
         // RHS
            // Addition
               // LHS
                  // Identifier
                     PUSH y
               // RHS
                  // Literal
                     PUSH 3
               POP __rhs
               POP __lhs
               ADD __res __lhs __rhs
               PUSH __res
         POP __rhs
         POP __lhs
         EQUAL __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __else0
      // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 7
               ASSIGN __str[0] 'W'
               ASSIGN __str[1] 'o'
               ASSIGN __str[2] 'o'
               ASSIGN __str[3] 'H'
               ASSIGN __str[4] 'o'
               ASSIGN __str[5] 'o'
               ASSIGN __str[6] '!'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
      JUMP __endif0
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Else-Statement
   __else0:
   // Function Call
      // Arguments
         // Literal
            MALLOC __str 5
            ASSIGN __str[0] 'N'
            ASSIGN __str[1] 'o'
            ASSIGN __str[2] 'p'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] '!'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      CALL println
      // Remove args
      POP __null
      RESPONSE __retval
      PUSH __retval
   //---------------------------------------------------------------------
   // End of if
   __endif0:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// If-Statement
   // Condition
      // OR
         // LHS
            // AND
               // LHS
                  // Equal
                     // LHS
                        // Identifier
                           PUSH y
                     // RHS
                        // Identifier
                           PUSH z
                     POP __rhs
                     POP __lhs
                     EQUAL __res __lhs __rhs
                     PUSH __res
               // RHS
                  // Equal
                     // LHS
                        // Identifier
                           PUSH z
                     // RHS
                        // Identifier
                           PUSH x
                     POP __rhs
                     POP __lhs
                     EQUAL __res __lhs __rhs
                     PUSH __res
               POP __rhs
               POP __lhs
               AND __res __lhs __rhs
               PUSH __res
         // RHS
            // Equal
               // LHS
                  // Addition
                     // LHS
                        // Identifier
                           PUSH z
                     // RHS
                        // Literal
                           PUSH 3
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
               // RHS
                  // Identifier
                     PUSH x
               POP __rhs
               POP __lhs
               EQUAL __res __lhs __rhs
               PUSH __res
         POP __rhs
         POP __lhs
         OR __res __lhs __rhs
         PUSH __res
      POP __cond
      CMP __cond 0
      JEQ __endif2
   // Body
      // Function Call
         // Arguments
            // Literal
               MALLOC __str 8
               ASSIGN __str[0] 'i'
               ASSIGN __str[1] 't'
               ASSIGN __str[2] 's'
               ASSIGN __str[3] ' '
               ASSIGN __str[4] 't'
               ASSIGN __str[5] 'r'
               ASSIGN __str[6] 'u'
               ASSIGN __str[7] 'e'
               PUSH __str
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         CALL println
         // Remove args
         POP __null
         RESPONSE __retval
         PUSH __retval
   JUMP __endif2
   // End of if
   __endif2:
//------------------------------------------------------------------------
// Function Call
   // Arguments
      // Literal
         MALLOC __str 14
         ASSIGN __str[0] 'I'
         ASSIGN __str[1] 'n'
         ASSIGN __str[2] 't'
         ASSIGN __str[3] 'e'
         ASSIGN __str[4] 'r'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] '.'
         ASSIGN __str[12] '.'
         ASSIGN __str[13] '.'
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   CALL println
   // Remove args
   POP __null
   RESPONSE __retval
   PUSH __retval
//========================================================================
//### END OF CODE ########################################################
//========================================================================

