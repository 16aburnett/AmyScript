
int x = 42;
float y = 3.14;
char c = 'X';

println (x);
println (y);
println (c);

//{
//    int a = 21;
//    int b = 39;
//    int c = a + b;
//
//    println (c);
//}
//{
//    float a = 0.25;
//    float b = 3.53;
//    float c = a + b;
//
//    println (c);
//}
//{
//    float a = 0.25;
//    float b = 100.0;
//    float c = a * b;
//
//    println (c);
//    println (a / b);
//    println (21 % 2);
//    println (34 % 7);
//}
//
//{
//    int x = 0;
//    println (++x);
//    println (x);
//    println (++x);
//    println (--x);
//    println (x);
//    println (-x);
//    println (!x);
//    println (~x);
//    int y = 0;
//    println (y = ++x);
//    println (y);
//}
//
//{
//    int x = 7;
//    println (x++);
//    println (x);
//    println (x--);
//    println (x);
//}
//
{
    println ("=== function");
    function int sum (int a, int b)
    {
        return a + b;
    }
    println (sum (7, 4));
    function float sum (float a, float b)
    {
        return a + b;
    }
    println (sum (0.25, 0.05));

    function int sum (int a, int b, int c)
    {
        function int sum (int a, int b)
        {
            return a + b;
        }
        return sum(sum(a,b),c);
    }
    println (sum(34,26,40));

    function void print (int x, char c, float f)
    {
        println (x);
        println (c);
        println (f);
    }
    print (24, 'A', 0.25);
}
{
    char[] str = "Hello, world!";
    println (str);
    free (str);
    println (str); // prints garbage
}
{
    print ("Enter name => ");
    char[] name = input ();
    print ("Hello, "); println (name);
}
{
    println ("=== If statements");
    float x = 3.14;
    if (x == 0.0)
    {
        println ("x == 0.0");
    }
    elif (x > 0.0)
    {
        println ("x > 0.0");
    }
    else
    {
        println ("x < 0.0");
    }
    function int max (int a, int b)
    {
        if (a >= b)
            return a;
        return b;
    }
    println (max (7, 4));
    println (max (4, 7));
    println (max (-4, -7));
    println (max (4, 4));
}
{
    println ("=== for loop");
    for (int i = 0; i < 10; ++i)
    {
        print (' ');
        print (i);
    }
    println ();
}
{
    println ("=== while loop");
    int i = 0;
    while (i < 21)
    {
        print (' '); print (i);
        ++i;
    }
    print ('\n');
}
{
    println ("=== arrays");
    int size = 10;
    int[] arr = new int[size];
    for (int i = 0; i < size; ++i)
    {
        arr[i] = i * i;
    }
    for (int i = 0; i < size; ++i)
    {
        print (' '); print (arr[i]);
    }
    println ();
}
{
    float[] arr = [3.14, 0.25, 0.0004, 10000.25];
    for (int i = 0; i < 4; ++i)
    {
        print (' '); print (arr[i]);
    }
    println ();
}
{
    char[] line = "AAA";
    println (line);
    line[1] = 'm';
    println (line);
    line[2] = 'y';
    println (line);
}
{
    println ("=== 2D array");
    int rows = 5;
    int cols = 5;
    char[][] board = new char[rows][];
    for (int i = 0; i < rows; ++i)
    {
        board[i] = new char[cols];
        for (int j = 0; j < cols; ++j)
        {
            board[i][j] = '.';
        }
    }
    for (int i = 0; i < rows; ++i)
    {
        for (int j = 0; j < cols; ++j)
        {
            print (board[i][j]);
        }
        println ();
    }
    println ();
    for (int i = 0; i < rows; ++i)
    {
        for (int j = 0; j < cols; ++j)
        {
            if ((i+j) % 2 == 0)
                board[i][j] = 'x';
        }
    }
    for (int i = 0; i < rows; ++i)
    {
        for (int j = 0; j < cols; ++j)
        {
            print (board[i][j]);
        }
        println ();
    }
}
{
    println ("=== function template");
    template <:T:>
    function T add (T a, T b)
    {
        return a + b;
    }
    println (add<:int:> (6, 3));
    println (add<:float:> (0.12, 12.22));
    template <:type:>
    function type default_value ()
    {
        return type();
    }
    println (default_value<:int:>() == 0);
    println (default_value<:float:>() == 0.0);
    println (default_value<:char:>() == '\0');
}
{
    println ("=== classes");
    class A
    {
        public field int x;
        constructor ()
        {
            this.x = 10;
        }
        public virtual void print ()
        {
            print ("   is A with values "); println (this.x);
        }
        public virtual int add (int v)
        {
            this.x += v;
            return this.x;
        }
    }
    class B inherits A
    {
        public field int y;
        constructor ()
        {
            this.x = 42;
            this.y = 14;
        }
        public virtual void print ()
        {
            print ("   is B with values "); print (this.x); print (','); print (' '); println (this.y);
        }
    }
    class C inherits A
    {
        public field float z;
        constructor ()
        {
            this.x = 24;
            this.z = 3.14;
        }
    }
    function void print (A a)
    {
        print ("is a A with value "); println (a.x);
        a.print ();
    }

    A a = new A ();
    B b = new B ();
    C c = new C ();

    print (a);
    print (b);
    print (c);

    println (a.add (5));
    println (b.add (5));
    println (c.add (5));

    print (a);
    print (b);
    print (c);
    
}
{
    println ("=== conversions");
    int x = 10;
    println (x);
    float y = intToFloat (x) + 0.25;
    println (y);
    println (floatToInt (y));
    char[] str = "3.1415e2";
    println (stringToFloat (str) * 2.0);
    char[] str2 = "12";
    println (stringToInt (str2) * 2);
    char c = '7';
    println (charToInt (c));
}
{
    println ("=== more class tests");
    class A
    {
        public field int x;
        public field float y;
        constructor ()
        {
            this.x = 10;
            this.y = 3.14;
        }
    }
    A a = new A ();
    println (a.x);
    a.x = 42;
    println (a.x);
    a.x += 20;
    println (a.x);
    a.x -= 13;
    println (a.x);
    a.x *= 2;
    println (a.x);
    a.x /= 3;
    println (a.x);
    println (++a.x);
    println (--a.x);
    println (-a.x);
    println (+a.x);
    println (!a.x);
    println (~a.x);
    println (a.x++);
    println (a.x);
    println (a.x--);
    println (a.x);
}