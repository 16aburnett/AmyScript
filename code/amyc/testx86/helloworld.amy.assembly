// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// dont execute library functions 

jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================

// Exits the program with the given exit code 
// void exit(int exit_code)
// - exit_code : 
exit__int:
    // ** not implemented for amyasm
    halt 

//========================================================================
// returns default float value
// float float ();
float:
    return 0.0

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int value
// int int ();
int:
    return 0

//========================================================================
// returns default char value
// char char ();
char:
    return '0'

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int from a given char
// int charToInt (char);
charToInt__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
null:
    return __null

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Mod
            // LHS
               // Multiplication
                  // LHS
                     // Addition
                        // LHS
                           // Addition
                              // LHS
                                 // Negative
                                    // RHS
                                       // Int Literal
                                          PUSH 17
                                    POP __rhs
                                    SUBTRACT __res 0 __rhs
                                    PUSH __res
                              // RHS
                                 // Multiplication
                                    // LHS
                                       // Int Literal
                                          PUSH 42
                                    // RHS
                                       // Addition
                                          // LHS
                                             // Int Literal
                                                PUSH 2
                                          // RHS
                                             // Int Literal
                                                PUSH 2
                                          POP __rhs
                                          POP __lhs
                                          ADD __res __lhs __rhs
                                          PUSH __res
                                    POP __rhs
                                    POP __lhs
                                    MULTIPLY __res __lhs __rhs
                                    PUSH __res
                              POP __rhs
                              POP __lhs
                              ADD __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Int Literal
                              PUSH 1
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Negative
                        // RHS
                           // Int Literal
                              PUSH 1
                        POP __rhs
                        SUBTRACT __res 0 __rhs
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  MULTIPLY __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__0__x 0
      POP __rhs
      ASSIGN __main__block__0__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Multiplication
            // LHS
               // Identifier - x
                  PUSH __main__block__0__x
            // RHS
               // Int Literal
                  PUSH 23
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__0__y 0
      POP __rhs
      ASSIGN __main__block__0__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Identifier - y
                  PUSH __main__block__0__y
            // RHS
               // Identifier - x
                  PUSH __main__block__0__x
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH '\101'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c0 0
      POP __rhs
      ASSIGN __main__block__1__c0 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH 'm'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c1 0
      POP __rhs
      ASSIGN __main__block__1__c1 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH 'y'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c2 0
      POP __rhs
      ASSIGN __main__block__1__c2 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH '\n'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c3 0
      POP __rhs
      ASSIGN __main__block__1__c3 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c0
            PUSH __main__block__1__c0
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c1
            PUSH __main__block__1__c1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c2
            PUSH __main__block__1__c2
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c3
            PUSH __main__block__1__c3
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '\'
            ASSIGN __str[1] '1'
            ASSIGN __str[2] '1'
            ASSIGN __str[3] '0'
            ASSIGN __str[4] 'e'
            ASSIGN __str[5] 'l'
            ASSIGN __str[6] 'l'
            ASSIGN __str[7] 'o'
            ASSIGN __str[8] ','
            ASSIGN __str[9] ' '
            PUSH __str
      // LHS
         // Variable Declaration
            ASSIGN __main__block__2__string0 0
      POP __rhs
      ASSIGN __main__block__2__string0 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // String Literal
            MALLOC __str 6
            ASSIGN __str[0] 'W'
            ASSIGN __str[1] 'o'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 'l'
            ASSIGN __str[4] 'd'
            ASSIGN __str[5] '!'
            PUSH __str
      // LHS
         // Variable Declaration
            ASSIGN __main__block__2__string1 0
      POP __rhs
      ASSIGN __main__block__2__string1 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // Identifier - string0
            PUSH __main__block__2__string0
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // Identifier - string1
            PUSH __main__block__2__string1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 1
            ASSIGN __str[0] '\n'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 1
      // LHS
         // Variable Declaration
            ASSIGN __main__block__3__x 0
      POP __rhs
      ASSIGN __main__block__3__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Bitwise Negation
            // RHS
               // Identifier - x
                  PUSH __main__block__3__x
            POP __rhs
            NOT __res __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__3__y 0
      POP __rhs
      ASSIGN __main__block__3__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // AND
            // LHS
               // AND
                  // LHS
                     // AND
                        // LHS
                           // Addition
                              // LHS
                                 // Identifier - x
                                    PUSH __main__block__3__x
                              // RHS
                                 // Identifier - y
                                    PUSH __main__block__3__y
                              POP __rhs
                              POP __lhs
                              ADD __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Pre-Increment
                              // RHS
                                 // Identifier - y
                                    PUSH __main__block__3__y
                              POP __rhs
                              ADD __main__block__3__y __main__block__3__y 1
                              ASSIGN __res __main__block__3__y
                              PUSH __res
                        POP __rhs
                        POP __lhs
                        AND __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Pre-Decrement
                        // RHS
                           // Identifier - x
                              PUSH __main__block__3__x
                        POP __rhs
                        SUBTRACT __main__block__3__x __main__block__3__x 1
                        ASSIGN __res __main__block__3__x
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  AND __res __lhs __rhs
                  PUSH __res
            // RHS
               // Negate
                  // RHS
                     // Post-Increment
                        ASSIGN __res __main__block__3__x
                        ADD __main__block__3__x __main__block__3__x 1
                        PUSH __res
                  POP __rhs
                  NOT __res __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            AND __res __lhs __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__3__z 0
      POP __rhs
      ASSIGN __main__block__3__z __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__3__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Char Literal
            PUSH ' '
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(int) -> void
      // Arguments
         // Identifier - y
            PUSH __main__block__3__y
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Char Literal
            PUSH ' '
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - z
            PUSH __main__block__3__z
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // If-Statement
      // Condition
         // Equal
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 1
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__4x0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - println(char) -> void
               // Arguments
                  // Char Literal
                     PUSH 'A'
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      JUMP __endif__4
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__4x0:
         // Condition
         // Not Equal
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 1
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            NEQUAL __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __else__4
         // Body
         // Function Call - println(char) -> void
            // Arguments
               // Char Literal
                  PUSH 'B'
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__4
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Else-Statement
      __else__4:
      // Function Call - println(char) -> void
         // Arguments
            // Char Literal
               PUSH 'C'
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      // Statement results can be ignored
      POP __void
      //------------------------------------------------------------------
      // End of if
      __endif__4:
   //---------------------------------------------------------------------
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 3
            ASSIGN __str[0] 'x'
            ASSIGN __str[1] ':'
            ASSIGN __str[2] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__3__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '<'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Less Than
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '<'
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Less Than or Equal to
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '='
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Equal
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '>'
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Greater Than or Equal to
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Greater Than
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // If-Statement
      // Condition
         // Less Than
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__6x0
      // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'y'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '<'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
      JUMP __endif__6
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__6x0:
         // Condition
         // Equal
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__6x1
         // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 6
                  ASSIGN __str[0] 'y'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '='
                  ASSIGN __str[3] '='
                  ASSIGN __str[4] ' '
                  ASSIGN __str[5] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__6
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__6x1:
         // Condition
         // Greater Than
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endif__6
         // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'y'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '>'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__6
      //------------------------------------------------------------------
      // End of if
      __endif__6:
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // If-Statement
      // Condition
         // Less Than or Equal to
            // LHS
               // Identifier - z
                  PUSH __main__block__3__z
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LE __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__7x0
      // Body
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Less Than
                  // LHS
                     // Identifier - z
                        PUSH __main__block__3__z
                  // RHS
                     // Int Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  LT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __else__8
            // Body
               // Function Call - println(char[]) -> void
                  // Arguments
                     // String Literal
                        MALLOC __str 5
                        ASSIGN __str[0] 'z'
                        ASSIGN __str[1] ' '
                        ASSIGN __str[2] '<'
                        ASSIGN __str[3] ' '
                        ASSIGN __str[4] '0'
                        PUSH __str
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** println
                  CALL println__char__1
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
               // Statement results can be ignored
               POP __void
            JUMP __endif__8
            //------------------------------------------------------------
            // Else-Statement
            __else__8:
            // Function Call - println(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 6
                     ASSIGN __str[0] 'z'
                     ASSIGN __str[1] ' '
                     ASSIGN __str[2] '='
                     ASSIGN __str[3] '='
                     ASSIGN __str[4] ' '
                     ASSIGN __str[5] '0'
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // End of if
            __endif__8:
         //---------------------------------------------------------------
      JUMP __endif__7
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__7x0:
         // Condition
         // Greater Than
            // LHS
               // Identifier - z
                  PUSH __main__block__3__z
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endif__7
         // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'z'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '>'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__7
      //------------------------------------------------------------------
      // End of if
      __endif__7:
   //---------------------------------------------------------------------
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__9__for__10__i 0
         POP __rhs
         ASSIGN __main__block__9__for__10__i __rhs
         PUSH __rhs
   JUMP __forcond__10
   __for__10:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__9__for__10__i
            POP __rhs
            ADD __main__block__9__for__10__i __main__block__9__for__10__i 1
            ASSIGN __res __main__block__9__for__10__i
            PUSH __res
      __forcond__10:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__9__for__10__i
            // RHS
               // Int Literal
                  PUSH 10
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__10
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Identifier - i
                     PUSH __main__block__9__for__10__i
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ' '
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__10
      // End of For
      __endfor__10:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 10
         // LHS
            // Variable Declaration
               ASSIGN __main__block__9__for__12__i 0
         POP __rhs
         ASSIGN __main__block__9__for__12__i __rhs
         PUSH __rhs
   JUMP __forcond__12
   __for__12:
      // Update
         // Pre-Decrement
            // RHS
               // Identifier - i
                  PUSH __main__block__9__for__12__i
            POP __rhs
            SUBTRACT __main__block__9__for__12__i __main__block__9__for__12__i 1
            ASSIGN __res __main__block__9__for__12__i
            PUSH __res
      __forcond__12:
      // Condition
         // Greater Than
            // LHS
               // Identifier - i
                  PUSH __main__block__9__for__12__i
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 5
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__12
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Identifier - i
                     PUSH __main__block__9__for__12__i
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ' '
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // If-Statement
               // Condition
                  // Less Than or Equal to
                     // LHS
                        // Identifier - i
                           PUSH __main__block__9__for__12__i
                     // RHS
                        // Int Literal
                           PUSH 0
                     POP __rhs
                     POP __lhs
                     LE __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endif__14
               // Body
                  // Break out of __for__12
                  JUMP __endfor__12
               JUMP __endif__14
               // End of if
               __endif__14:
            //------------------------------------------------------------
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__12
      // End of For
      __endfor__12:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 1
      // LHS
         // Variable Declaration
            ASSIGN __main__block__9__j 0
      POP __rhs
      ASSIGN __main__block__9__j __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // While-Loop
   __while__15:
      // Condition
         // Less Than
            // LHS
               // Identifier - j
                  PUSH __main__block__9__j
            // RHS
               // Int Literal
                  PUSH 100
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endwhile__15
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Multiplication
                     // LHS
                        // Identifier - j
                           PUSH __main__block__9__j
                     // RHS
                        // Identifier - j
                           PUSH __main__block__9__j
                     POP __rhs
                     POP __lhs
                     MULTIPLY __res __lhs __rhs
                     PUSH __res
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ' '
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Pre-Increment
               // RHS
                  // Identifier - j
                     PUSH __main__block__9__j
               POP __rhs
               ADD __main__block__9__j __main__block__9__j 1
               ASSIGN __res __main__block__9__j
               PUSH __res
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // If-Statement
               // Condition
                  // Less Than
                     // LHS
                        // Identifier - j
                           PUSH __main__block__9__j
                     // RHS
                        // Int Literal
                           PUSH 10
                     POP __rhs
                     POP __lhs
                     LT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __else__17
               // Body
                  // Continue in __while__15
                  JUMP __while__15
               JUMP __endif__17
               //---------------------------------------------------------
               // Else-Statement
               __else__17:
               // Break out of __while__15
               JUMP __endwhile__15
               //---------------------------------------------------------
               // End of if
               __endif__17:
            //------------------------------------------------------------
            // Pre-Decrement
               // RHS
                  // Identifier - j
                     PUSH __main__block__9__j
               POP __rhs
               SUBTRACT __main__block__9__j __main__block__9__j 1
               ASSIGN __res __main__block__9__j
               PUSH __res
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      JUMP __while__15
      // End of While
      __endwhile__15:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   //=====================================================================
   // Function Declaration - mul2(int) -> int
   JUMP __end____main__block__18____mul2__int
   __main__block__18____mul2__int:
      // Parameters
         // Param: a
         STACKGET __main__block__18__mul2__a 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Return
               // Multiplication
                  // LHS
                     // Identifier - a
                        PUSH __main__block__18__mul2__a
                  // RHS
                     // Int Literal
                        PUSH 2
                  POP __rhs
                  POP __lhs
                  MULTIPLY __res __lhs __rhs
                  PUSH __res
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__18____mul2__int:
   // End Function Declaration - __main__block__18____mul2__int
   //=====================================================================

   // Function Call - println(int) -> void
      // Arguments
         // Function Call - mul2(int) -> int
            // Arguments
               // Function Call - mul2(int) -> int
                  // Arguments
                     // Function Call - mul2(int) -> int
                        // Arguments
                           // Int Literal
                              PUSH 16
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** mul2
                        CALL __main__block__18____mul2__int
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** mul2
                  CALL __main__block__18____mul2__int
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** mul2
            CALL __main__block__18____mul2__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //=====================================================================
   // Function Declaration - add(int, int, int) -> int
   JUMP __end____main__block__18____add__int__int__int
   __main__block__18____add__int__int__int:
      // Parameters
         // Param: a
         STACKGET __main__block__18__add__a 0
         // Param: b
         STACKGET __main__block__18__add__b 1
         // Param: c
         STACKGET __main__block__18__add__c 2
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment - '='
               // RHS
                  // Addition
                     // LHS
                        // Addition
                           // LHS
                              // Identifier - a
                                 PUSH __main__block__18__add__a
                           // RHS
                              // Identifier - b
                                 PUSH __main__block__18__add__b
                           POP __rhs
                           POP __lhs
                           ADD __res __lhs __rhs
                           PUSH __res
                     // RHS
                        // Identifier - c
                           PUSH __main__block__18__add__c
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
               // LHS
                  // Variable Declaration
                     ASSIGN __main__block__18__add__block__20__d 0
               POP __rhs
               ASSIGN __main__block__18__add__block__20__d __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
            // Return
               // Identifier - d
                  PUSH __main__block__18__add__block__20__d
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__18____add__int__int__int:
   // End Function Declaration - __main__block__18____add__int__int__int
   //=====================================================================

   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] 'd'
            ASSIGN __str[2] 'd'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '('
            ASSIGN __str[5] '7'
            ASSIGN __str[6] ','
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '4'
            ASSIGN __str[9] ','
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '2'
            ASSIGN __str[12] '1'
            ASSIGN __str[13] ')'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '-'
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Function Call - add(int, int, int) -> int
            // Arguments
               // Int Literal
                  PUSH 7
               // Int Literal
                  PUSH 4
               // Int Literal
                  PUSH 21
               POP __arg2
               POP __arg1
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg2
            PUSH __arg1
            PUSH __arg0
            // *** add
            CALL __main__block__18____add__int__int__int
            // Remove args
            POP __void
            POP __void
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 10
      // LHS
         // Variable Declaration
            ASSIGN __main__block__18__x 0
      POP __rhs
      ASSIGN __main__block__18__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   //=====================================================================
   // Function Declaration - mulx(int) -> int
   JUMP __end____main__block__18____mulx__int
   __main__block__18____mulx__int:
      // Parameters
         // Param: a
         STACKGET __main__block__18__mulx__a 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Return
               // Multiplication
                  // LHS
                     // Identifier - a
                        PUSH __main__block__18__mulx__a
                  // RHS
                     // Identifier - x
                        PUSH __main__block__18__x
                  POP __rhs
                  POP __lhs
                  MULTIPLY __res __lhs __rhs
                  PUSH __res
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__18____mulx__int:
   // End Function Declaration - __main__block__18____mulx__int
   //=====================================================================

   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'x'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__18__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 14
            ASSIGN __str[0] ';'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 'u'
            ASSIGN __str[4] 'l'
            ASSIGN __str[5] 'x'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] '7'
            ASSIGN __str[9] ')'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '-'
            ASSIGN __str[12] '>'
            ASSIGN __str[13] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Function Call - mulx(int) -> int
            // Arguments
               // Int Literal
                  PUSH 7
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** mulx
            CALL __main__block__18____mulx__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 27
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'C'
         ASSIGN __str[13] 'o'
         ASSIGN __str[14] 'n'
         ASSIGN __str[15] 'v'
         ASSIGN __str[16] 'e'
         ASSIGN __str[17] 'r'
         ASSIGN __str[18] 's'
         ASSIGN __str[19] 'i'
         ASSIGN __str[20] 'o'
         ASSIGN __str[21] 'n'
         ASSIGN __str[22] 's'
         ASSIGN __str[23] ' '
         ASSIGN __str[24] '='
         ASSIGN __str[25] '='
         ASSIGN __str[26] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 28
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 'i'
            ASSIGN __str[4] 'n'
            ASSIGN __str[5] 'g'
            ASSIGN __str[6] 'T'
            ASSIGN __str[7] 'o'
            ASSIGN __str[8] 'I'
            ASSIGN __str[9] 'n'
            ASSIGN __str[10] 't'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '('
            ASSIGN __str[13] '\'
            ASSIGN __str[14] '"'
            ASSIGN __str[15] '-'
            ASSIGN __str[16] '4'
            ASSIGN __str[17] '7'
            ASSIGN __str[18] '\'
            ASSIGN __str[19] '"'
            ASSIGN __str[20] ')'
            ASSIGN __str[21] ' '
            ASSIGN __str[22] '-'
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '2'
            ASSIGN __str[25] ' '
            ASSIGN __str[26] '='
            ASSIGN __str[27] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Function Call - stringToInt(char[]) -> int
                  // Arguments
                     // String Literal
                        MALLOC __str 4
                        ASSIGN __str[0] '-'
                        ASSIGN __str[1] '4'
                        ASSIGN __str[2] '7'
                        ASSIGN __str[3] ' '
                        PUSH __str
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** stringToInt
                  CALL stringToInt__char__1
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 31
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 'i'
            ASSIGN __str[4] 'n'
            ASSIGN __str[5] 'g'
            ASSIGN __str[6] 'T'
            ASSIGN __str[7] 'o'
            ASSIGN __str[8] 'F'
            ASSIGN __str[9] 'l'
            ASSIGN __str[10] 'o'
            ASSIGN __str[11] 'a'
            ASSIGN __str[12] 't'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '('
            ASSIGN __str[15] '\'
            ASSIGN __str[16] '"'
            ASSIGN __str[17] '3'
            ASSIGN __str[18] '1'
            ASSIGN __str[19] '4'
            ASSIGN __str[20] '1'
            ASSIGN __str[21] '5'
            ASSIGN __str[22] 'e'
            ASSIGN __str[23] '-'
            ASSIGN __str[24] '4'
            ASSIGN __str[25] '\'
            ASSIGN __str[26] '"'
            ASSIGN __str[27] ')'
            ASSIGN __str[28] ' '
            ASSIGN __str[29] '='
            ASSIGN __str[30] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Function Call - stringToFloat(char[]) -> float
            // Arguments
               // String Literal
                  MALLOC __str 8
                  ASSIGN __str[0] '3'
                  ASSIGN __str[1] '1'
                  ASSIGN __str[2] '4'
                  ASSIGN __str[3] '1'
                  ASSIGN __str[4] '5'
                  ASSIGN __str[5] 'e'
                  ASSIGN __str[6] '-'
                  ASSIGN __str[7] '4'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** stringToFloat
            CALL stringToFloat__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 34
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'I'
         ASSIGN __str[13] 'n'
         ASSIGN __str[14] 't'
         ASSIGN __str[15] 'e'
         ASSIGN __str[16] 'g'
         ASSIGN __str[17] 'e'
         ASSIGN __str[18] 'r'
         ASSIGN __str[19] ' '
         ASSIGN __str[20] 'A'
         ASSIGN __str[21] 'r'
         ASSIGN __str[22] 'i'
         ASSIGN __str[23] 't'
         ASSIGN __str[24] 'h'
         ASSIGN __str[25] 'm'
         ASSIGN __str[26] 'e'
         ASSIGN __str[27] 't'
         ASSIGN __str[28] 'i'
         ASSIGN __str[29] 'c'
         ASSIGN __str[30] ' '
         ASSIGN __str[31] '='
         ASSIGN __str[32] '='
         ASSIGN __str[33] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '('
            ASSIGN __str[2] '7'
            ASSIGN __str[3] ')'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Negative
            // RHS
               // Int Literal
                  PUSH 7
            POP __rhs
            SUBTRACT __res 0 __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '('
            ASSIGN __str[2] '-'
            ASSIGN __str[3] '('
            ASSIGN __str[4] '7'
            ASSIGN __str[5] ')'
            ASSIGN __str[6] ')'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Negative
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 7
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            SUBTRACT __res 0 __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '7'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '+'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '4'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Addition
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '4'
            ASSIGN __str[2] '3'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '+'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '3'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '+'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '-'
            ASSIGN __str[11] '7'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '+'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '3'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Addition
            // LHS
               // Addition
                  // LHS
                     // Addition
                        // LHS
                           // Negative
                              // RHS
                                 // Int Literal
                                    PUSH 43
                              POP __rhs
                              SUBTRACT __res 0 __rhs
                              PUSH __res
                        // RHS
                           // Int Literal
                              PUSH 3
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Negative
                        // RHS
                           // Int Literal
                              PUSH 7
                        POP __rhs
                        SUBTRACT __res 0 __rhs
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  ADD __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 7
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 14
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 14
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 7
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 26
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '-'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '2'
            ASSIGN __str[12] '1'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '+'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '-'
            ASSIGN __str[17] '1'
            ASSIGN __str[18] '4'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] '+'
            ASSIGN __str[21] ' '
            ASSIGN __str[22] '7'
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '='
            ASSIGN __str[25] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Addition
            // LHS
               // Subtraction
                  // LHS
                     // Subtraction
                        // LHS
                           // Subtraction
                              // LHS
                                 // Negative
                                    // RHS
                                       // Int Literal
                                          PUSH 7
                                    POP __rhs
                                    SUBTRACT __res 0 __rhs
                                    PUSH __res
                              // RHS
                                 // Int Literal
                                    PUSH 14
                              POP __rhs
                              POP __lhs
                              SUBTRACT __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Int Literal
                              PUSH 21
                        POP __rhs
                        POP __lhs
                        SUBTRACT __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Negative
                        // RHS
                           // Int Literal
                              PUSH 14
                        POP __rhs
                        SUBTRACT __res 0 __rhs
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  SUBTRACT __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 7
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 7
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 14
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 14
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 7
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '/'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '/'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '1'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '/'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Int Literal
                  PUSH 1
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '%'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '%'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] '4'
            ASSIGN __str[1] '5'
            ASSIGN __str[2] '2'
            ASSIGN __str[3] '6'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '%'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '6'
            ASSIGN __str[8] '4'
            ASSIGN __str[9] '5'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 4526
            // RHS
               // Int Literal
                  PUSH 645
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '1'
            ASSIGN __str[2] '0'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '%'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '3'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 10
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '1'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '%'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 1
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 45
            ASSIGN __str[0] '('
            ASSIGN __str[1] '('
            ASSIGN __str[2] '7'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '-'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '4'
            ASSIGN __str[7] '9'
            ASSIGN __str[8] ')'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '/'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '2'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '*'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '-'
            ASSIGN __str[17] '1'
            ASSIGN __str[18] ' '
            ASSIGN __str[19] '+'
            ASSIGN __str[20] ' '
            ASSIGN __str[21] '3'
            ASSIGN __str[22] ' '
            ASSIGN __str[23] '*'
            ASSIGN __str[24] ' '
            ASSIGN __str[25] '3'
            ASSIGN __str[26] ')'
            ASSIGN __str[27] ' '
            ASSIGN __str[28] '%'
            ASSIGN __str[29] ' '
            ASSIGN __str[30] '('
            ASSIGN __str[31] '3'
            ASSIGN __str[32] ' '
            ASSIGN __str[33] '+'
            ASSIGN __str[34] ' '
            ASSIGN __str[35] '4'
            ASSIGN __str[36] ')'
            ASSIGN __str[37] ' '
            ASSIGN __str[38] '='
            ASSIGN __str[39] '='
            ASSIGN __str[40] ' '
            ASSIGN __str[41] '2'
            ASSIGN __str[42] ' '
            ASSIGN __str[43] '='
            ASSIGN __str[44] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Equal
            // LHS
               // Mod
                  // LHS
                     // Addition
                        // LHS
                           // Multiplication
                              // LHS
                                 // Division
                                    // LHS
                                       // Subtraction
                                          // LHS
                                             // Int Literal
                                                PUSH 7
                                          // RHS
                                             // Int Literal
                                                PUSH 49
                                          POP __rhs
                                          POP __lhs
                                          SUBTRACT __res __lhs __rhs
                                          PUSH __res
                                    // RHS
                                       // Int Literal
                                          PUSH 2
                                    POP __rhs
                                    POP __lhs
                                    DIVIDE __res __lhs __rhs
                                    PUSH __res
                              // RHS
                                 // Negative
                                    // RHS
                                       // Int Literal
                                          PUSH 1
                                    POP __rhs
                                    SUBTRACT __res 0 __rhs
                                    PUSH __res
                              POP __rhs
                              POP __lhs
                              MULTIPLY __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Multiplication
                              // LHS
                                 // Int Literal
                                    PUSH 3
                              // RHS
                                 // Int Literal
                                    PUSH 3
                              POP __rhs
                              POP __lhs
                              MULTIPLY __res __lhs __rhs
                              PUSH __res
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Addition
                        // LHS
                           // Int Literal
                              PUSH 3
                        // RHS
                           // Int Literal
                              PUSH 4
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  MOD __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 41
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'F'
         ASSIGN __str[13] 'l'
         ASSIGN __str[14] 'o'
         ASSIGN __str[15] 'a'
         ASSIGN __str[16] 't'
         ASSIGN __str[17] 'i'
         ASSIGN __str[18] 'n'
         ASSIGN __str[19] 'g'
         ASSIGN __str[20] ' '
         ASSIGN __str[21] 'P'
         ASSIGN __str[22] 'o'
         ASSIGN __str[23] 'i'
         ASSIGN __str[24] 'n'
         ASSIGN __str[25] 't'
         ASSIGN __str[26] ' '
         ASSIGN __str[27] 'A'
         ASSIGN __str[28] 'r'
         ASSIGN __str[29] 'i'
         ASSIGN __str[30] 't'
         ASSIGN __str[31] 'h'
         ASSIGN __str[32] 'm'
         ASSIGN __str[33] 'e'
         ASSIGN __str[34] 't'
         ASSIGN __str[35] 'i'
         ASSIGN __str[36] 'c'
         ASSIGN __str[37] ' '
         ASSIGN __str[38] '='
         ASSIGN __str[39] '='
         ASSIGN __str[40] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 3.14
      // LHS
         // Variable Declaration
            ASSIGN __main__block__24__x 0
      POP __rhs
      ASSIGN __main__block__24__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 0.0015
      // LHS
         // Variable Declaration
            ASSIGN __main__block__24__y 0
      POP __rhs
      ASSIGN __main__block__24__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] '3'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '1'
            ASSIGN __str[3] '4'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '+'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '0'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '0'
            ASSIGN __str[10] '0'
            ASSIGN __str[11] '1'
            ASSIGN __str[12] '5'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Addition
            // LHS
               // Identifier - x
                  PUSH __main__block__24__x
            // RHS
               // Identifier - y
                  PUSH __main__block__24__y
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 25
            ASSIGN __str[0] '6'
            ASSIGN __str[1] '4'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] '0'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '+'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '8'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '1'
            ASSIGN __str[10] '2'
            ASSIGN __str[11] '3'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '+'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '0'
            ASSIGN __str[16] '.'
            ASSIGN __str[17] '6'
            ASSIGN __str[18] '3'
            ASSIGN __str[19] '0'
            ASSIGN __str[20] '0'
            ASSIGN __str[21] '1'
            ASSIGN __str[22] ' '
            ASSIGN __str[23] '='
            ASSIGN __str[24] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Addition
            // LHS
               // Addition
                  // LHS
                     // Float Literal
                        PUSH 64.0
                  // RHS
                     // Float Literal
                        PUSH 8.123
                  POP __rhs
                  POP __lhs
                  ADD __res __lhs __rhs
                  PUSH __res
            // RHS
               // Float Literal
                  PUSH 0.63001
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '('
            ASSIGN __str[2] '3'
            ASSIGN __str[3] '.'
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '4'
            ASSIGN __str[6] ')'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Negative
            // RHS
               // Float Literal
                  PUSH 3.14
            POP __rhs
            SUBTRACT __res 0 __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] '3'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '1'
            ASSIGN __str[3] '4'
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '5'
            ASSIGN __str[6] '9'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '1'
            ASSIGN __str[11] '.'
            ASSIGN __str[12] '2'
            ASSIGN __str[13] '3'
            ASSIGN __str[14] '4'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '='
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subtraction
            // LHS
               // Float Literal
                  PUSH 3.14159
            // RHS
               // Float Literal
                  PUSH 1.234
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '5'
            ASSIGN __str[3] '9'
            ASSIGN __str[4] '4'
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '*'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '2'
            ASSIGN __str[10] '.'
            ASSIGN __str[11] '0'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Multiplication
            // LHS
               // Float Literal
                  PUSH 1.5943
            // RHS
               // Float Literal
                  PUSH 2.0
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 22
            ASSIGN __str[0] '0'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '0'
            ASSIGN __str[3] '0'
            ASSIGN __str[4] '0'
            ASSIGN __str[5] '0'
            ASSIGN __str[6] '4'
            ASSIGN __str[7] '3'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '*'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '1'
            ASSIGN __str[12] '0'
            ASSIGN __str[13] '0'
            ASSIGN __str[14] '0'
            ASSIGN __str[15] '0'
            ASSIGN __str[16] '0'
            ASSIGN __str[17] '.'
            ASSIGN __str[18] '0'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] '='
            ASSIGN __str[21] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Multiplication
            // LHS
               // Float Literal
                  PUSH 4.3e-05
            // RHS
               // Float Literal
                  PUSH 100000.0
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] '4'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] '5'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '/'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '2'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '0'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Division
            // LHS
               // Float Literal
                  PUSH 42.5
            // RHS
               // Float Literal
                  PUSH 2.0
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] '5'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '/'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '0'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '1'
            ASSIGN __str[10] '2'
            ASSIGN __str[11] '5'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Division
            // LHS
               // Float Literal
                  PUSH 12.5
            // RHS
               // Float Literal
                  PUSH 0.125
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - exit(int) -> void
   // Arguments
      // Int Literal
         PUSH 0
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** exit
   CALL exit__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'E'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'r'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'a'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'p'
            ASSIGN __str[9] 'h'
            ASSIGN __str[10] 'r'
            ASSIGN __str[11] 'a'
            ASSIGN __str[12] 's'
            ASSIGN __str[13] 'e'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - input() -> char[]
            // Arguments
            // Pushing args in reverse order
            // *** input
            CALL input
            // Remove args
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__line 0
      POP __rhs
      ASSIGN __main__block__25__line __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // Identifier - line
            PUSH __main__block__25__line
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'E'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'r'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'i'
            ASSIGN __str[7] 'n'
            ASSIGN __str[8] 't'
            ASSIGN __str[9] 'e'
            ASSIGN __str[10] 'g'
            ASSIGN __str[11] 'e'
            ASSIGN __str[12] 'r'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - input() -> char[]
            // Arguments
            // Pushing args in reverse order
            // *** input
            CALL input
            // Remove args
            RESPONSE __retval
            PUSH __retval
      POP __rhs
      ASSIGN __main__block__25__line __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - stringToInt(char[]) -> int
            // Arguments
               // Identifier - line
                  PUSH __main__block__25__line
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** stringToInt
            CALL stringToInt__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__x 0
      POP __rhs
      ASSIGN __main__block__25__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] 'x'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '*'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] 'x'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '='
            ASSIGN __str[7] '>'
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Identifier - x
                  PUSH __main__block__25__x
            // RHS
               // Identifier - x
                  PUSH __main__block__25__x
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] 'E'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'r'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'f'
            ASSIGN __str[7] 'l'
            ASSIGN __str[8] 'o'
            ASSIGN __str[9] 'a'
            ASSIGN __str[10] 't'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '='
            ASSIGN __str[14] '>'
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - input() -> char[]
            // Arguments
            // Pushing args in reverse order
            // *** input
            CALL input
            // Remove args
            RESPONSE __retval
            PUSH __retval
      POP __rhs
      ASSIGN __main__block__25__line __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - stringToFloat(char[]) -> float
            // Arguments
               // Identifier - line
                  PUSH __main__block__25__line
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** stringToFloat
            CALL stringToFloat__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__y 0
      POP __rhs
      ASSIGN __main__block__25__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'y'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - y
            PUSH __main__block__25__y
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - exit(int) -> void
   // Arguments
      // Int Literal
         PUSH 0
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** exit
   CALL exit__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

