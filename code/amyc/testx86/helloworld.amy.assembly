// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// dont execute library functions 

jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================

// Exits the program with the given exit code 
// void exit(int exit_code)
// - exit_code : 
exit__int:
    // ** not implemented for amyasm
    halt 

//========================================================================
// returns default float value
// float float ();
float:
    return 0.0

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int value
// int int ();
int:
    return 0

//========================================================================
// returns default char value
// char char ();
char:
    return '0'

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int from a given char
// int charToInt (char);
charToInt__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
null:
    return __null

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Mod
            // LHS
               // Multiplication
                  // LHS
                     // Addition
                        // LHS
                           // Addition
                              // LHS
                                 // Int Literal
                                    PUSH -17
                              // RHS
                                 // Multiplication
                                    // LHS
                                       // Int Literal
                                          PUSH 42
                                    // RHS
                                       // Addition
                                          // LHS
                                             // Int Literal
                                                PUSH 2
                                          // RHS
                                             // Int Literal
                                                PUSH 2
                                          POP __rhs
                                          POP __lhs
                                          ADD __res __lhs __rhs
                                          PUSH __res
                                    POP __rhs
                                    POP __lhs
                                    MULTIPLY __res __lhs __rhs
                                    PUSH __res
                              POP __rhs
                              POP __lhs
                              ADD __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Int Literal
                              PUSH 1
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Int Literal
                        PUSH -1
                  POP __rhs
                  POP __lhs
                  MULTIPLY __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__0__x 0
      POP __rhs
      ASSIGN __main__block__0__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Multiplication
            // LHS
               // Identifier - x
                  PUSH __main__block__0__x
            // RHS
               // Int Literal
                  PUSH 23
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__0__y 0
      POP __rhs
      ASSIGN __main__block__0__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Identifier - y
                  PUSH __main__block__0__y
            // RHS
               // Identifier - x
                  PUSH __main__block__0__x
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH '\101'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c0 0
      POP __rhs
      ASSIGN __main__block__1__c0 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH 'm'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c1 0
      POP __rhs
      ASSIGN __main__block__1__c1 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH 'y'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c2 0
      POP __rhs
      ASSIGN __main__block__1__c2 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH '\n'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__1__c3 0
      POP __rhs
      ASSIGN __main__block__1__c3 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c0
            PUSH __main__block__1__c0
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c1
            PUSH __main__block__1__c1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c2
            PUSH __main__block__1__c2
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Identifier - c3
            PUSH __main__block__1__c3
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '\1'
            ASSIGN __str[1] '1'
            ASSIGN __str[2] '0'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'l'
            ASSIGN __str[5] 'l'
            ASSIGN __str[6] 'o'
            ASSIGN __str[7] ','
            ASSIGN __str[8] ' '
            PUSH __str
      // LHS
         // Variable Declaration
            ASSIGN __main__block__2__string0 0
      POP __rhs
      ASSIGN __main__block__2__string0 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // String Literal
            MALLOC __str 6
            ASSIGN __str[0] 'W'
            ASSIGN __str[1] 'o'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 'l'
            ASSIGN __str[4] 'd'
            ASSIGN __str[5] '!'
            PUSH __str
      // LHS
         // Variable Declaration
            ASSIGN __main__block__2__string1 0
      POP __rhs
      ASSIGN __main__block__2__string1 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // Identifier - string0
            PUSH __main__block__2__string0
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // Identifier - string1
            PUSH __main__block__2__string1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 1
            ASSIGN __str[0] '\n'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 1
      // LHS
         // Variable Declaration
            ASSIGN __main__block__3__x 0
      POP __rhs
      ASSIGN __main__block__3__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Bitwise Negation
            // RHS
               // Identifier - x
                  PUSH __main__block__3__x
            POP __rhs
            NOT __res __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__3__y 0
      POP __rhs
      ASSIGN __main__block__3__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // AND
            // LHS
               // AND
                  // LHS
                     // AND
                        // LHS
                           // Addition
                              // LHS
                                 // Identifier - x
                                    PUSH __main__block__3__x
                              // RHS
                                 // Identifier - y
                                    PUSH __main__block__3__y
                              POP __rhs
                              POP __lhs
                              ADD __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Pre-Increment
                              // RHS
                                 // Identifier - y
                                    PUSH __main__block__3__y
                              POP __rhs
                              ADD __main__block__3__y __main__block__3__y 1
                              ASSIGN __res __main__block__3__y
                              PUSH __res
                        POP __rhs
                        POP __lhs
                        AND __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Pre-Decrement
                        // RHS
                           // Identifier - x
                              PUSH __main__block__3__x
                        POP __rhs
                        SUBTRACT __main__block__3__x __main__block__3__x 1
                        ASSIGN __res __main__block__3__x
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  AND __res __lhs __rhs
                  PUSH __res
            // RHS
               // Negate
                  // RHS
                     // Post-Increment
                        ASSIGN __res __main__block__3__x
                        ADD __main__block__3__x __main__block__3__x 1
                        PUSH __res
                  POP __rhs
                  NOT __res __rhs
                  PUSH __res
            POP __rhs
            POP __lhs
            AND __res __lhs __rhs
            PUSH __res
      // LHS
         // Variable Declaration
            ASSIGN __main__block__3__z 0
      POP __rhs
      ASSIGN __main__block__3__z __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__3__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Char Literal
            PUSH ' '
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(int) -> void
      // Arguments
         // Identifier - y
            PUSH __main__block__3__y
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char) -> void
      // Arguments
         // Char Literal
            PUSH ' '
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - z
            PUSH __main__block__3__z
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // If-Statement
      // Condition
         // Equal
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 1
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__4x0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - println(char) -> void
               // Arguments
                  // Char Literal
                     PUSH 'A'
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      JUMP __endif__4
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__4x0:
         // Condition
         // Not Equal
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH -1
            POP __rhs
            POP __lhs
            NEQUAL __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __else__4
         // Body
         // Function Call - println(char) -> void
            // Arguments
               // Char Literal
                  PUSH 'B'
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__4
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Else-Statement
      __else__4:
      // Function Call - println(char) -> void
         // Arguments
            // Char Literal
               PUSH 'C'
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** println
         CALL println__char
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      // Statement results can be ignored
      POP __void
      //------------------------------------------------------------------
      // End of if
      __endif__4:
   //---------------------------------------------------------------------
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 3
            ASSIGN __str[0] 'x'
            ASSIGN __str[1] ':'
            ASSIGN __str[2] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__3__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '<'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Less Than
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '<'
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Less Than or Equal to
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '='
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Equal
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '>'
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Greater Than or Equal to
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] 'x'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '0'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Greater Than
            // LHS
               // Identifier - x
                  PUSH __main__block__3__x
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // If-Statement
      // Condition
         // Less Than
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__6x0
      // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'y'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '<'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
      JUMP __endif__6
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__6x0:
         // Condition
         // Equal
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__6x1
         // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 6
                  ASSIGN __str[0] 'y'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '='
                  ASSIGN __str[3] '='
                  ASSIGN __str[4] ' '
                  ASSIGN __str[5] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__6
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__6x1:
         // Condition
         // Greater Than
            // LHS
               // Identifier - y
                  PUSH __main__block__3__y
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endif__6
         // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'y'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '>'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__6
      //------------------------------------------------------------------
      // End of if
      __endif__6:
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // If-Statement
      // Condition
         // Less Than or Equal to
            // LHS
               // Identifier - z
                  PUSH __main__block__3__z
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            LE __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __elif__7x0
      // Body
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Less Than
                  // LHS
                     // Identifier - z
                        PUSH __main__block__3__z
                  // RHS
                     // Int Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  LT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __else__8
            // Body
               // Function Call - println(char[]) -> void
                  // Arguments
                     // String Literal
                        MALLOC __str 5
                        ASSIGN __str[0] 'z'
                        ASSIGN __str[1] ' '
                        ASSIGN __str[2] '<'
                        ASSIGN __str[3] ' '
                        ASSIGN __str[4] '0'
                        PUSH __str
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** println
                  CALL println__char__1
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
               // Statement results can be ignored
               POP __void
            JUMP __endif__8
            //------------------------------------------------------------
            // Else-Statement
            __else__8:
            // Function Call - println(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 6
                     ASSIGN __str[0] 'z'
                     ASSIGN __str[1] ' '
                     ASSIGN __str[2] '='
                     ASSIGN __str[3] '='
                     ASSIGN __str[4] ' '
                     ASSIGN __str[5] '0'
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // End of if
            __endif__8:
         //---------------------------------------------------------------
      JUMP __endif__7
      //------------------------------------------------------------------
      // Elif-Statement
      __elif__7x0:
         // Condition
         // Greater Than
            // LHS
               // Identifier - z
                  PUSH __main__block__3__z
            // RHS
               // Int Literal
                  PUSH 0
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endif__7
         // Body
         // Function Call - println(char[]) -> void
            // Arguments
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'z'
                  ASSIGN __str[1] ' '
                  ASSIGN __str[2] '>'
                  ASSIGN __str[3] ' '
                  ASSIGN __str[4] '0'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** println
            CALL println__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         JUMP __endif__7
      //------------------------------------------------------------------
      // End of if
      __endif__7:
   //---------------------------------------------------------------------
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__9__for__10__i 0
         POP __rhs
         ASSIGN __main__block__9__for__10__i __rhs
         PUSH __rhs
   JUMP __forcond__10
   __for__10:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__9__for__10__i
            POP __rhs
            ADD __main__block__9__for__10__i __main__block__9__for__10__i 1
            ASSIGN __res __main__block__9__for__10__i
            PUSH __res
      __forcond__10:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__9__for__10__i
            // RHS
               // Int Literal
                  PUSH 10
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__10
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Identifier - i
                     PUSH __main__block__9__for__10__i
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ' '
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__10
      // End of For
      __endfor__10:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 10
         // LHS
            // Variable Declaration
               ASSIGN __main__block__9__for__12__i 0
         POP __rhs
         ASSIGN __main__block__9__for__12__i __rhs
         PUSH __rhs
   JUMP __forcond__12
   __for__12:
      // Update
         // Pre-Decrement
            // RHS
               // Identifier - i
                  PUSH __main__block__9__for__12__i
            POP __rhs
            SUBTRACT __main__block__9__for__12__i __main__block__9__for__12__i 1
            ASSIGN __res __main__block__9__for__12__i
            PUSH __res
      __forcond__12:
      // Condition
         // Greater Than
            // LHS
               // Identifier - i
                  PUSH __main__block__9__for__12__i
            // RHS
               // Int Literal
                  PUSH -5
            POP __rhs
            POP __lhs
            GT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__12
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Identifier - i
                     PUSH __main__block__9__for__12__i
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ' '
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // If-Statement
               // Condition
                  // Less Than or Equal to
                     // LHS
                        // Identifier - i
                           PUSH __main__block__9__for__12__i
                     // RHS
                        // Int Literal
                           PUSH 0
                     POP __rhs
                     POP __lhs
                     LE __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endif__14
               // Body
                  // Break out of __for__12
                  JUMP __endfor__12
               JUMP __endif__14
               // End of if
               __endif__14:
            //------------------------------------------------------------
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__12
      // End of For
      __endfor__12:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 1
      // LHS
         // Variable Declaration
            ASSIGN __main__block__9__j 0
      POP __rhs
      ASSIGN __main__block__9__j __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // While-Loop
   __while__15:
      // Condition
         // Less Than
            // LHS
               // Identifier - j
                  PUSH __main__block__9__j
            // RHS
               // Int Literal
                  PUSH 100
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endwhile__15
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Multiplication
                     // LHS
                        // Identifier - j
                           PUSH __main__block__9__j
                     // RHS
                        // Identifier - j
                           PUSH __main__block__9__j
                     POP __rhs
                     POP __lhs
                     MULTIPLY __res __lhs __rhs
                     PUSH __res
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ' '
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Pre-Increment
               // RHS
                  // Identifier - j
                     PUSH __main__block__9__j
               POP __rhs
               ADD __main__block__9__j __main__block__9__j 1
               ASSIGN __res __main__block__9__j
               PUSH __res
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // If-Statement
               // Condition
                  // Less Than
                     // LHS
                        // Identifier - j
                           PUSH __main__block__9__j
                     // RHS
                        // Int Literal
                           PUSH 10
                     POP __rhs
                     POP __lhs
                     LT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __else__17
               // Body
                  // Continue in __while__15
                  JUMP __while__15
               JUMP __endif__17
               //---------------------------------------------------------
               // Else-Statement
               __else__17:
               // Break out of __while__15
               JUMP __endwhile__15
               //---------------------------------------------------------
               // End of if
               __endif__17:
            //------------------------------------------------------------
            // Pre-Decrement
               // RHS
                  // Identifier - j
                     PUSH __main__block__9__j
               POP __rhs
               SUBTRACT __main__block__9__j __main__block__9__j 1
               ASSIGN __res __main__block__9__j
               PUSH __res
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      JUMP __while__15
      // End of While
      __endwhile__15:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Code Block
   //=====================================================================
   // Function Declaration - mul2(int) -> int
   JUMP __end____main__block__18____mul2__int
   __main__block__18____mul2__int:
      // Parameters
         // Param: a
         STACKGET __main__block__18__mul2__a 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Return
               // Multiplication
                  // LHS
                     // Identifier - a
                        PUSH __main__block__18__mul2__a
                  // RHS
                     // Int Literal
                        PUSH 2
                  POP __rhs
                  POP __lhs
                  MULTIPLY __res __lhs __rhs
                  PUSH __res
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__18____mul2__int:
   // End Function Declaration - __main__block__18____mul2__int
   //=====================================================================

   // Function Call - println(int) -> void
      // Arguments
         // Function Call - mul2(int) -> int
            // Arguments
               // Function Call - mul2(int) -> int
                  // Arguments
                     // Function Call - mul2(int) -> int
                        // Arguments
                           // Int Literal
                              PUSH 16
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** mul2
                        CALL __main__block__18____mul2__int
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** mul2
                  CALL __main__block__18____mul2__int
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** mul2
            CALL __main__block__18____mul2__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //=====================================================================
   // Function Declaration - add(int, int, int) -> int
   JUMP __end____main__block__18____add__int__int__int
   __main__block__18____add__int__int__int:
      // Parameters
         // Param: a
         STACKGET __main__block__18__add__a 0
         // Param: b
         STACKGET __main__block__18__add__b 1
         // Param: c
         STACKGET __main__block__18__add__c 2
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment - '='
               // RHS
                  // Addition
                     // LHS
                        // Addition
                           // LHS
                              // Identifier - a
                                 PUSH __main__block__18__add__a
                           // RHS
                              // Identifier - b
                                 PUSH __main__block__18__add__b
                           POP __rhs
                           POP __lhs
                           ADD __res __lhs __rhs
                           PUSH __res
                     // RHS
                        // Identifier - c
                           PUSH __main__block__18__add__c
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
               // LHS
                  // Variable Declaration
                     ASSIGN __main__block__18__add__block__20__d 0
               POP __rhs
               ASSIGN __main__block__18__add__block__20__d __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
            // Return
               // Identifier - d
                  PUSH __main__block__18__add__block__20__d
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__18____add__int__int__int:
   // End Function Declaration - __main__block__18____add__int__int__int
   //=====================================================================

   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] 'd'
            ASSIGN __str[2] 'd'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '('
            ASSIGN __str[5] '7'
            ASSIGN __str[6] ','
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '4'
            ASSIGN __str[9] ','
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '2'
            ASSIGN __str[12] '1'
            ASSIGN __str[13] ')'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '-'
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Function Call - add(int, int, int) -> int
            // Arguments
               // Int Literal
                  PUSH 7
               // Int Literal
                  PUSH 4
               // Int Literal
                  PUSH 21
               POP __arg2
               POP __arg1
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg2
            PUSH __arg1
            PUSH __arg0
            // *** add
            CALL __main__block__18____add__int__int__int
            // Remove args
            POP __void
            POP __void
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 10
      // LHS
         // Variable Declaration
            ASSIGN __main__block__18__x 0
      POP __rhs
      ASSIGN __main__block__18__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   //=====================================================================
   // Function Declaration - mulx(int) -> int
   JUMP __end____main__block__18____mulx__int
   __main__block__18____mulx__int:
      // Parameters
         // Param: a
         STACKGET __main__block__18__mulx__a 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Return
               // Multiplication
                  // LHS
                     // Identifier - a
                        PUSH __main__block__18__mulx__a
                  // RHS
                     // Identifier - x
                        PUSH __main__block__18__x
                  POP __rhs
                  POP __lhs
                  MULTIPLY __res __lhs __rhs
                  PUSH __res
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__18____mulx__int:
   // End Function Declaration - __main__block__18____mulx__int
   //=====================================================================

   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'x'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__18__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 14
            ASSIGN __str[0] ';'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 'u'
            ASSIGN __str[4] 'l'
            ASSIGN __str[5] 'x'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] '7'
            ASSIGN __str[9] ')'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '-'
            ASSIGN __str[12] '>'
            ASSIGN __str[13] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Function Call - mulx(int) -> int
            // Arguments
               // Int Literal
                  PUSH 7
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** mulx
            CALL __main__block__18____mulx__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 27
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'C'
         ASSIGN __str[13] 'o'
         ASSIGN __str[14] 'n'
         ASSIGN __str[15] 'v'
         ASSIGN __str[16] 'e'
         ASSIGN __str[17] 'r'
         ASSIGN __str[18] 's'
         ASSIGN __str[19] 'i'
         ASSIGN __str[20] 'o'
         ASSIGN __str[21] 'n'
         ASSIGN __str[22] 's'
         ASSIGN __str[23] ' '
         ASSIGN __str[24] '='
         ASSIGN __str[25] '='
         ASSIGN __str[26] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 26
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 'i'
            ASSIGN __str[4] 'n'
            ASSIGN __str[5] 'g'
            ASSIGN __str[6] 'T'
            ASSIGN __str[7] 'o'
            ASSIGN __str[8] 'I'
            ASSIGN __str[9] 'n'
            ASSIGN __str[10] 't'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '('
            ASSIGN __str[13] '\"'
            ASSIGN __str[14] '-'
            ASSIGN __str[15] '4'
            ASSIGN __str[16] '7'
            ASSIGN __str[17] '\"'
            ASSIGN __str[18] ')'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] '-'
            ASSIGN __str[21] ' '
            ASSIGN __str[22] '2'
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '='
            ASSIGN __str[25] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Function Call - stringToInt(char[]) -> int
                  // Arguments
                     // String Literal
                        MALLOC __str 4
                        ASSIGN __str[0] '-'
                        ASSIGN __str[1] '4'
                        ASSIGN __str[2] '7'
                        ASSIGN __str[3] ' '
                        PUSH __str
                     POP __arg0
                  // Pushing args in reverse order
                  PUSH __arg0
                  // *** stringToInt
                  CALL stringToInt__char__1
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 29
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] 'i'
            ASSIGN __str[4] 'n'
            ASSIGN __str[5] 'g'
            ASSIGN __str[6] 'T'
            ASSIGN __str[7] 'o'
            ASSIGN __str[8] 'F'
            ASSIGN __str[9] 'l'
            ASSIGN __str[10] 'o'
            ASSIGN __str[11] 'a'
            ASSIGN __str[12] 't'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '('
            ASSIGN __str[15] '\"'
            ASSIGN __str[16] '3'
            ASSIGN __str[17] '1'
            ASSIGN __str[18] '4'
            ASSIGN __str[19] '1'
            ASSIGN __str[20] '5'
            ASSIGN __str[21] 'e'
            ASSIGN __str[22] '-'
            ASSIGN __str[23] '4'
            ASSIGN __str[24] '\"'
            ASSIGN __str[25] ')'
            ASSIGN __str[26] ' '
            ASSIGN __str[27] '='
            ASSIGN __str[28] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Function Call - stringToFloat(char[]) -> float
            // Arguments
               // String Literal
                  MALLOC __str 8
                  ASSIGN __str[0] '3'
                  ASSIGN __str[1] '1'
                  ASSIGN __str[2] '4'
                  ASSIGN __str[3] '1'
                  ASSIGN __str[4] '5'
                  ASSIGN __str[5] 'e'
                  ASSIGN __str[6] '-'
                  ASSIGN __str[7] '4'
                  PUSH __str
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** stringToFloat
            CALL stringToFloat__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 34
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'I'
         ASSIGN __str[13] 'n'
         ASSIGN __str[14] 't'
         ASSIGN __str[15] 'e'
         ASSIGN __str[16] 'g'
         ASSIGN __str[17] 'e'
         ASSIGN __str[18] 'r'
         ASSIGN __str[19] ' '
         ASSIGN __str[20] 'A'
         ASSIGN __str[21] 'r'
         ASSIGN __str[22] 'i'
         ASSIGN __str[23] 't'
         ASSIGN __str[24] 'h'
         ASSIGN __str[25] 'm'
         ASSIGN __str[26] 'e'
         ASSIGN __str[27] 't'
         ASSIGN __str[28] 'i'
         ASSIGN __str[29] 'c'
         ASSIGN __str[30] ' '
         ASSIGN __str[31] '='
         ASSIGN __str[32] '='
         ASSIGN __str[33] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '('
            ASSIGN __str[2] '7'
            ASSIGN __str[3] ')'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Negative
            // RHS
               // Int Literal
                  PUSH 7
            POP __rhs
            SUBTRACT __res 0 __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '('
            ASSIGN __str[2] '-'
            ASSIGN __str[3] '('
            ASSIGN __str[4] '7'
            ASSIGN __str[5] ')'
            ASSIGN __str[6] ')'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Negative
            // RHS
               // Negative
                  // RHS
                     // Int Literal
                        PUSH 7
                  POP __rhs
                  SUBTRACT __res 0 __rhs
                  PUSH __res
            POP __rhs
            SUBTRACT __res 0 __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '7'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '+'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '4'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Addition
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '4'
            ASSIGN __str[2] '3'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '+'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '3'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '+'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '-'
            ASSIGN __str[11] '7'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '+'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '3'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Addition
            // LHS
               // Addition
                  // LHS
                     // Addition
                        // LHS
                           // Int Literal
                              PUSH -43
                        // RHS
                           // Int Literal
                              PUSH 3
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Int Literal
                        PUSH -7
                  POP __rhs
                  POP __lhs
                  ADD __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Int Literal
                  PUSH -7
            // RHS
               // Int Literal
                  PUSH -14
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH -14
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subtraction
            // LHS
               // Int Literal
                  PUSH -7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 26
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '-'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '-'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '2'
            ASSIGN __str[12] '1'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '+'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '-'
            ASSIGN __str[17] '1'
            ASSIGN __str[18] '4'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] '+'
            ASSIGN __str[21] ' '
            ASSIGN __str[22] '7'
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '='
            ASSIGN __str[25] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Addition
            // LHS
               // Subtraction
                  // LHS
                     // Subtraction
                        // LHS
                           // Subtraction
                              // LHS
                                 // Int Literal
                                    PUSH -7
                              // RHS
                                 // Int Literal
                                    PUSH 14
                              POP __rhs
                              POP __lhs
                              SUBTRACT __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Int Literal
                              PUSH 21
                        POP __rhs
                        POP __lhs
                        SUBTRACT __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Int Literal
                        PUSH -14
                  POP __rhs
                  POP __lhs
                  SUBTRACT __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 7
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Int Literal
                  PUSH -7
            // RHS
               // Int Literal
                  PUSH -14
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '-'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Int Literal
                  PUSH 7
            // RHS
               // Int Literal
                  PUSH -14
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '7'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '*'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Int Literal
                  PUSH -7
            // RHS
               // Int Literal
                  PUSH 14
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '/'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '/'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '1'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '/'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Division
            // LHS
               // Int Literal
                  PUSH 1
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '%'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '0'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '%'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 10
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] '4'
            ASSIGN __str[1] '5'
            ASSIGN __str[2] '2'
            ASSIGN __str[3] '6'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '%'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '6'
            ASSIGN __str[8] '4'
            ASSIGN __str[9] '5'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 4526
            // RHS
               // Int Literal
                  PUSH 645
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '1'
            ASSIGN __str[2] '0'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '%'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '3'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH -10
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] ' '
            ASSIGN __str[1] '1'
            ASSIGN __str[2] ' '
            ASSIGN __str[3] '%'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Mod
            // LHS
               // Int Literal
                  PUSH 1
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            MOD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 45
            ASSIGN __str[0] '('
            ASSIGN __str[1] '('
            ASSIGN __str[2] '7'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '-'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '4'
            ASSIGN __str[7] '9'
            ASSIGN __str[8] ')'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '/'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '2'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '*'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '-'
            ASSIGN __str[17] '1'
            ASSIGN __str[18] ' '
            ASSIGN __str[19] '+'
            ASSIGN __str[20] ' '
            ASSIGN __str[21] '3'
            ASSIGN __str[22] ' '
            ASSIGN __str[23] '*'
            ASSIGN __str[24] ' '
            ASSIGN __str[25] '3'
            ASSIGN __str[26] ')'
            ASSIGN __str[27] ' '
            ASSIGN __str[28] '%'
            ASSIGN __str[29] ' '
            ASSIGN __str[30] '('
            ASSIGN __str[31] '3'
            ASSIGN __str[32] ' '
            ASSIGN __str[33] '+'
            ASSIGN __str[34] ' '
            ASSIGN __str[35] '4'
            ASSIGN __str[36] ')'
            ASSIGN __str[37] ' '
            ASSIGN __str[38] '='
            ASSIGN __str[39] '='
            ASSIGN __str[40] ' '
            ASSIGN __str[41] '2'
            ASSIGN __str[42] ' '
            ASSIGN __str[43] '='
            ASSIGN __str[44] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Equal
            // LHS
               // Mod
                  // LHS
                     // Addition
                        // LHS
                           // Multiplication
                              // LHS
                                 // Division
                                    // LHS
                                       // Subtraction
                                          // LHS
                                             // Int Literal
                                                PUSH 7
                                          // RHS
                                             // Int Literal
                                                PUSH 49
                                          POP __rhs
                                          POP __lhs
                                          SUBTRACT __res __lhs __rhs
                                          PUSH __res
                                    // RHS
                                       // Int Literal
                                          PUSH 2
                                    POP __rhs
                                    POP __lhs
                                    DIVIDE __res __lhs __rhs
                                    PUSH __res
                              // RHS
                                 // Int Literal
                                    PUSH -1
                              POP __rhs
                              POP __lhs
                              MULTIPLY __res __lhs __rhs
                              PUSH __res
                        // RHS
                           // Multiplication
                              // LHS
                                 // Int Literal
                                    PUSH 3
                              // RHS
                                 // Int Literal
                                    PUSH 3
                              POP __rhs
                              POP __lhs
                              MULTIPLY __res __lhs __rhs
                              PUSH __res
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  // RHS
                     // Addition
                        // LHS
                           // Int Literal
                              PUSH 3
                        // RHS
                           // Int Literal
                              PUSH 4
                        POP __rhs
                        POP __lhs
                        ADD __res __lhs __rhs
                        PUSH __res
                  POP __rhs
                  POP __lhs
                  MOD __res __lhs __rhs
                  PUSH __res
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            POP __lhs
            EQUAL __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 41
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'F'
         ASSIGN __str[13] 'l'
         ASSIGN __str[14] 'o'
         ASSIGN __str[15] 'a'
         ASSIGN __str[16] 't'
         ASSIGN __str[17] 'i'
         ASSIGN __str[18] 'n'
         ASSIGN __str[19] 'g'
         ASSIGN __str[20] ' '
         ASSIGN __str[21] 'P'
         ASSIGN __str[22] 'o'
         ASSIGN __str[23] 'i'
         ASSIGN __str[24] 'n'
         ASSIGN __str[25] 't'
         ASSIGN __str[26] ' '
         ASSIGN __str[27] 'A'
         ASSIGN __str[28] 'r'
         ASSIGN __str[29] 'i'
         ASSIGN __str[30] 't'
         ASSIGN __str[31] 'h'
         ASSIGN __str[32] 'm'
         ASSIGN __str[33] 'e'
         ASSIGN __str[34] 't'
         ASSIGN __str[35] 'i'
         ASSIGN __str[36] 'c'
         ASSIGN __str[37] ' '
         ASSIGN __str[38] '='
         ASSIGN __str[39] '='
         ASSIGN __str[40] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 3.14
      // LHS
         // Variable Declaration
            ASSIGN __main__block__24__x 0
      POP __rhs
      ASSIGN __main__block__24__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 0.0015
      // LHS
         // Variable Declaration
            ASSIGN __main__block__24__y 0
      POP __rhs
      ASSIGN __main__block__24__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] '3'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '1'
            ASSIGN __str[3] '4'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '+'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '0'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '0'
            ASSIGN __str[10] '0'
            ASSIGN __str[11] '1'
            ASSIGN __str[12] '5'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Addition
            // LHS
               // Identifier - x
                  PUSH __main__block__24__x
            // RHS
               // Identifier - y
                  PUSH __main__block__24__y
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 25
            ASSIGN __str[0] '6'
            ASSIGN __str[1] '4'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] '0'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '+'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '8'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '1'
            ASSIGN __str[10] '2'
            ASSIGN __str[11] '3'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '+'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '0'
            ASSIGN __str[16] '.'
            ASSIGN __str[17] '6'
            ASSIGN __str[18] '3'
            ASSIGN __str[19] '0'
            ASSIGN __str[20] '0'
            ASSIGN __str[21] '1'
            ASSIGN __str[22] ' '
            ASSIGN __str[23] '='
            ASSIGN __str[24] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Addition
            // LHS
               // Addition
                  // LHS
                     // Float Literal
                        PUSH 64.0
                  // RHS
                     // Float Literal
                        PUSH 8.123
                  POP __rhs
                  POP __lhs
                  ADD __res __lhs __rhs
                  PUSH __res
            // RHS
               // Float Literal
                  PUSH 0.63001
            POP __rhs
            POP __lhs
            ADD __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] '-'
            ASSIGN __str[1] '('
            ASSIGN __str[2] '3'
            ASSIGN __str[3] '.'
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '4'
            ASSIGN __str[6] ')'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Negative
            // RHS
               // Float Literal
                  PUSH 3.14
            POP __rhs
            SUBTRACT __res 0 __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] '3'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '1'
            ASSIGN __str[3] '4'
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '5'
            ASSIGN __str[6] '9'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '1'
            ASSIGN __str[11] '.'
            ASSIGN __str[12] '2'
            ASSIGN __str[13] '3'
            ASSIGN __str[14] '4'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '='
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subtraction
            // LHS
               // Float Literal
                  PUSH 3.14159
            // RHS
               // Float Literal
                  PUSH 1.234
            POP __rhs
            POP __lhs
            SUBTRACT __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '5'
            ASSIGN __str[3] '9'
            ASSIGN __str[4] '4'
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '*'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '2'
            ASSIGN __str[10] '.'
            ASSIGN __str[11] '0'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Multiplication
            // LHS
               // Float Literal
                  PUSH 1.5943
            // RHS
               // Float Literal
                  PUSH 2.0
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] '0'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] '0'
            ASSIGN __str[3] '0'
            ASSIGN __str[4] '0'
            ASSIGN __str[5] '0'
            ASSIGN __str[6] '4'
            ASSIGN __str[7] '3'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '*'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '1'
            ASSIGN __str[12] '.'
            ASSIGN __str[13] '0'
            ASSIGN __str[14] 'e'
            ASSIGN __str[15] '5'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Multiplication
            // LHS
               // Float Literal
                  PUSH 4.3e-05
            // RHS
               // Float Literal
                  PUSH 100000.0
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] '4'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] '5'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '/'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '2'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '0'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Division
            // LHS
               // Float Literal
                  PUSH 42.5
            // RHS
               // Float Literal
                  PUSH 2.0
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] '1'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] '5'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '/'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '0'
            ASSIGN __str[8] '.'
            ASSIGN __str[9] '1'
            ASSIGN __str[10] '2'
            ASSIGN __str[11] '5'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Division
            // LHS
               // Float Literal
                  PUSH 12.5
            // RHS
               // Float Literal
                  PUSH 0.125
            POP __rhs
            POP __lhs
            DIVIDE __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 37
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'A'
         ASSIGN __str[13] 's'
         ASSIGN __str[14] 's'
         ASSIGN __str[15] 'i'
         ASSIGN __str[16] 'g'
         ASSIGN __str[17] 'n'
         ASSIGN __str[18] 'm'
         ASSIGN __str[19] 'e'
         ASSIGN __str[20] 'n'
         ASSIGN __str[21] 't'
         ASSIGN __str[22] ' '
         ASSIGN __str[23] 'A'
         ASSIGN __str[24] 'r'
         ASSIGN __str[25] 'i'
         ASSIGN __str[26] 't'
         ASSIGN __str[27] 'h'
         ASSIGN __str[28] 'm'
         ASSIGN __str[29] 'e'
         ASSIGN __str[30] 't'
         ASSIGN __str[31] 'i'
         ASSIGN __str[32] 'c'
         ASSIGN __str[33] ' '
         ASSIGN __str[34] '='
         ASSIGN __str[35] '='
         ASSIGN __str[36] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 21
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__x 0
      POP __rhs
      ASSIGN __main__block__25__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] 'x'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '='
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '2'
            ASSIGN __str[9] '1'
            ASSIGN __str[10] ';'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '>'
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - x
            PUSH __main__block__25__x
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 3.14
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__y 0
      POP __rhs
      ASSIGN __main__block__25__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'y'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '3'
            ASSIGN __str[11] '.'
            ASSIGN __str[12] '1'
            ASSIGN __str[13] '4'
            ASSIGN __str[14] ';'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '='
            ASSIGN __str[17] '>'
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - y
            PUSH __main__block__25__y
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 0.0021
      POP __rhs
      ASSIGN __main__block__25__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] 'y'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '0'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '0'
            ASSIGN __str[7] '0'
            ASSIGN __str[8] '2'
            ASSIGN __str[9] '1'
            ASSIGN __str[10] ';'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '>'
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - y
            PUSH __main__block__25__y
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH 'A'
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__c 0
      POP __rhs
      ASSIGN __main__block__25__c __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 17
            ASSIGN __str[0] 'c'
            ASSIGN __str[1] 'h'
            ASSIGN __str[2] 'a'
            ASSIGN __str[3] 'r'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] 'c'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '\''
            ASSIGN __str[10] 'A'
            ASSIGN __str[11] '\''
            ASSIGN __str[12] ';'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '>'
            ASSIGN __str[16] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Identifier - c
            PUSH __main__block__25__c
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Char Literal
            PUSH 'm'
      POP __rhs
      ASSIGN __main__block__25__c __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 12
            ASSIGN __str[0] 'c'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '\''
            ASSIGN __str[5] 'm'
            ASSIGN __str[6] '\''
            ASSIGN __str[7] ';'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '='
            ASSIGN __str[10] '>'
            ASSIGN __str[11] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Identifier - c
            PUSH __main__block__25__c
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'p'
            ASSIGN __str[1] 'r'
            ASSIGN __str[2] 'i'
            ASSIGN __str[3] 'n'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] '('
            ASSIGN __str[6] 'c'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '\''
            ASSIGN __str[11] 'y'
            ASSIGN __str[12] '\''
            ASSIGN __str[13] ')'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Char Literal
                  PUSH 'y'
            POP __rhs
            ASSIGN __main__block__25__c __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 16
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__a 0
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '6'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '+'
            ASSIGN __str[9] '+'
            ASSIGN __str[10] 'a'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '>'
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Pre-Increment
            // RHS
               // Identifier - a
                  PUSH __main__block__25__a
            POP __rhs
            ADD __main__block__25__a __main__block__25__a 1
            ASSIGN __res __main__block__25__a
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - a
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 3.14
      // LHS
         // Variable Declaration
            ASSIGN __main__block__25__b 0
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 17
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '3'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '+'
            ASSIGN __str[11] '+'
            ASSIGN __str[12] 'b'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '>'
            ASSIGN __str[16] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Pre-Increment
            // RHS
               // Identifier - b
                  PUSH __main__block__25__b
            POP __rhs
            ADD __main__block__25__b __main__block__25__b 1
            ASSIGN __res __main__block__25__b
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - b
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 42
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '4'
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] '+'
            ASSIGN __str[10] '+'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '>'
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Post-Increment
            ASSIGN __res __main__block__25__a
            ADD __main__block__25__a __main__block__25__a 1
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - a
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 6.28
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 17
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '6'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '2'
            ASSIGN __str[7] '8'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'b'
            ASSIGN __str[11] '+'
            ASSIGN __str[12] '+'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '>'
            ASSIGN __str[16] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Post-Increment
            ASSIGN __res __main__block__25__b
            ADD __main__block__25__b __main__block__25__b 1
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - b
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 16
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '6'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '-'
            ASSIGN __str[9] '-'
            ASSIGN __str[10] 'a'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '>'
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Pre-Decrement
            // RHS
               // Identifier - a
                  PUSH __main__block__25__a
            POP __rhs
            SUBTRACT __main__block__25__a __main__block__25__a 1
            ASSIGN __res __main__block__25__a
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - a
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 3.14
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 17
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '3'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '-'
            ASSIGN __str[11] '-'
            ASSIGN __str[12] 'b'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '>'
            ASSIGN __str[16] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Pre-Decrement
            // RHS
               // Identifier - b
                  PUSH __main__block__25__b
            POP __rhs
            SUBTRACT __main__block__25__b __main__block__25__b 1
            ASSIGN __res __main__block__25__b
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - b
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 42
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 15
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '4'
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] '-'
            ASSIGN __str[10] '-'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '>'
            ASSIGN __str[14] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Post-Decrement
            ASSIGN __res __main__block__25__a
            SUBTRACT __main__block__25__a __main__block__25__a 1
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Identifier - a
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH -6.28
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '-'
            ASSIGN __str[5] '6'
            ASSIGN __str[6] '.'
            ASSIGN __str[7] '2'
            ASSIGN __str[8] '8'
            ASSIGN __str[9] ';'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] 'b'
            ASSIGN __str[12] '-'
            ASSIGN __str[13] '-'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Post-Decrement
            ASSIGN __res __main__block__25__b
            SUBTRACT __main__block__25__b __main__block__25__b 1
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - b
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '3'
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '+'
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '6'
            ASSIGN __str[14] '3'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '='
            ASSIGN __str[17] '>'
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 32
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '+='
            // RHS
               // Int Literal
                  PUSH 63
            POP __rhs
            ADD __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 23
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '3'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '1'
            ASSIGN __str[7] '4'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'b'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '+'
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '0'
            ASSIGN __str[16] '.'
            ASSIGN __str[17] '2'
            ASSIGN __str[18] '5'
            ASSIGN __str[19] ' '
            ASSIGN __str[20] '='
            ASSIGN __str[21] '>'
            ASSIGN __str[22] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 3.14
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Assignment - '+='
            // RHS
               // Float Literal
                  PUSH 0.25
            POP __rhs
            ADD __main__block__25__b __main__block__25__b __rhs
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '3'
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '-'
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '4'
            ASSIGN __str[14] '7'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '='
            ASSIGN __str[17] '>'
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 32
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '-='
            // RHS
               // Int Literal
                  PUSH 47
            POP __rhs
            SUBTRACT __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 24
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '-'
            ASSIGN __str[5] '3'
            ASSIGN __str[6] '.'
            ASSIGN __str[7] '1'
            ASSIGN __str[8] '4'
            ASSIGN __str[9] ';'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] 'b'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '-'
            ASSIGN __str[14] '='
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '1'
            ASSIGN __str[17] '.'
            ASSIGN __str[18] '2'
            ASSIGN __str[19] '1'
            ASSIGN __str[20] ' '
            ASSIGN __str[21] '='
            ASSIGN __str[22] '>'
            ASSIGN __str[23] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH -3.14
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Assignment - '-='
            // RHS
               // Float Literal
                  PUSH 1.21
            POP __rhs
            SUBTRACT __main__block__25__b __main__block__25__b __rhs
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '2'
            ASSIGN __str[5] ';'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] 'a'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '*'
            ASSIGN __str[10] '='
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '1'
            ASSIGN __str[13] '6'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 2
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '*='
            // RHS
               // Int Literal
                  PUSH 16
            POP __rhs
            MULTIPLY __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 22
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '0'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '5'
            ASSIGN __str[7] ';'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] 'b'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '*'
            ASSIGN __str[12] '='
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '5'
            ASSIGN __str[15] '7'
            ASSIGN __str[16] '.'
            ASSIGN __str[17] '0'
            ASSIGN __str[18] ' '
            ASSIGN __str[19] '='
            ASSIGN __str[20] '>'
            ASSIGN __str[21] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 0.5
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Assignment - '*='
            // RHS
               // Float Literal
                  PUSH 57.0
            POP __rhs
            MULTIPLY __main__block__25__b __main__block__25__b __rhs
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 20
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '2'
            ASSIGN __str[5] '5'
            ASSIGN __str[6] '6'
            ASSIGN __str[7] ';'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] 'a'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '/'
            ASSIGN __str[12] '='
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '6'
            ASSIGN __str[15] '4'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] '>'
            ASSIGN __str[19] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 256
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '/='
            // RHS
               // Int Literal
                  PUSH 64
            POP __rhs
            DIVIDE __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 20
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '2'
            ASSIGN __str[5] '5'
            ASSIGN __str[6] '6'
            ASSIGN __str[7] ';'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] 'a'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '/'
            ASSIGN __str[12] '='
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '6'
            ASSIGN __str[15] '5'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] '>'
            ASSIGN __str[19] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 256
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '/='
            // RHS
               // Int Literal
                  PUSH 65
            POP __rhs
            DIVIDE __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 22
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '2'
            ASSIGN __str[5] '5'
            ASSIGN __str[6] '.'
            ASSIGN __str[7] '0'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'b'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '/'
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '3'
            ASSIGN __str[16] '.'
            ASSIGN __str[17] '0'
            ASSIGN __str[18] ' '
            ASSIGN __str[19] '='
            ASSIGN __str[20] '>'
            ASSIGN __str[21] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 25.0
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Assignment - '/='
            // RHS
               // Float Literal
                  PUSH 3.0
            POP __rhs
            DIVIDE __main__block__25__b __main__block__25__b __rhs
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 25
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '0'
            ASSIGN __str[5] '.'
            ASSIGN __str[6] '4'
            ASSIGN __str[7] '3'
            ASSIGN __str[8] '5'
            ASSIGN __str[9] ';'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] 'b'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '/'
            ASSIGN __str[14] '='
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '4'
            ASSIGN __str[17] '3'
            ASSIGN __str[18] '5'
            ASSIGN __str[19] '.'
            ASSIGN __str[20] '0'
            ASSIGN __str[21] ' '
            ASSIGN __str[22] '='
            ASSIGN __str[23] '>'
            ASSIGN __str[24] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Float Literal
            PUSH 0.435
      POP __rhs
      ASSIGN __main__block__25__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Assignment - '/='
            // RHS
               // Float Literal
                  PUSH 435.0
            POP __rhs
            DIVIDE __main__block__25__b __main__block__25__b __rhs
            PUSH __main__block__25__b
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 20
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '2'
            ASSIGN __str[5] '3'
            ASSIGN __str[6] '5'
            ASSIGN __str[7] '2'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'a'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '%'
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '2'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] '>'
            ASSIGN __str[19] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 2352
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '%='
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            MOD __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 19
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '1'
            ASSIGN __str[5] '3'
            ASSIGN __str[6] '7'
            ASSIGN __str[7] ';'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] 'a'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '%'
            ASSIGN __str[12] '='
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '3'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] '='
            ASSIGN __str[17] '>'
            ASSIGN __str[18] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 137
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '%='
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            MOD __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 20
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '2'
            ASSIGN __str[5] '3'
            ASSIGN __str[6] '5'
            ASSIGN __str[7] '3'
            ASSIGN __str[8] ';'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'a'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '%'
            ASSIGN __str[13] '='
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '5'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '='
            ASSIGN __str[18] '>'
            ASSIGN __str[19] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 2353
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '%='
            // RHS
               // Int Literal
                  PUSH 5
            POP __rhs
            MOD __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '-'
            ASSIGN __str[5] '7'
            ASSIGN __str[6] ';'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'a'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '%'
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '2'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Int Literal
            PUSH -7
      POP __rhs
      ASSIGN __main__block__25__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '%='
            // RHS
               // Int Literal
                  PUSH 2
            POP __rhs
            MOD __main__block__25__a __main__block__25__a __rhs
            PUSH __main__block__25__a
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 24
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'E'
         ASSIGN __str[13] 'q'
         ASSIGN __str[14] 'u'
         ASSIGN __str[15] 'a'
         ASSIGN __str[16] 'l'
         ASSIGN __str[17] 'i'
         ASSIGN __str[18] 't'
         ASSIGN __str[19] 'y'
         ASSIGN __str[20] ' '
         ASSIGN __str[21] '='
         ASSIGN __str[22] '='
         ASSIGN __str[23] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 26
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'I'
         ASSIGN __str[13] 'n'
         ASSIGN __str[14] 'e'
         ASSIGN __str[15] 'q'
         ASSIGN __str[16] 'u'
         ASSIGN __str[17] 'a'
         ASSIGN __str[18] 'l'
         ASSIGN __str[19] 'i'
         ASSIGN __str[20] 't'
         ASSIGN __str[21] 'y'
         ASSIGN __str[22] ' '
         ASSIGN __str[23] '='
         ASSIGN __str[24] '='
         ASSIGN __str[25] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 22
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'A'
         ASSIGN __str[13] 'r'
         ASSIGN __str[14] 'r'
         ASSIGN __str[15] 'a'
         ASSIGN __str[16] 'y'
         ASSIGN __str[17] 's'
         ASSIGN __str[18] ' '
         ASSIGN __str[19] '='
         ASSIGN __str[20] '='
         ASSIGN __str[21] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Int Literal
               PUSH 7
            // Int Literal
               PUSH 3
            // Int Literal
               PUSH 19
            // Int Literal
               PUSH -42
            POP __elem3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 4
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            ASSIGN __list[3] __elem3
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__26__nums 0
      POP __rhs
      ASSIGN __main__block__26__nums __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 29
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] '['
            ASSIGN __str[4] ']'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'n'
            ASSIGN __str[7] 'u'
            ASSIGN __str[8] 'm'
            ASSIGN __str[9] 's'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '['
            ASSIGN __str[14] '7'
            ASSIGN __str[15] ','
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '3'
            ASSIGN __str[18] ','
            ASSIGN __str[19] ' '
            ASSIGN __str[20] '1'
            ASSIGN __str[21] '9'
            ASSIGN __str[22] ','
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '-'
            ASSIGN __str[25] '4'
            ASSIGN __str[26] '2'
            ASSIGN __str[27] ']'
            ASSIGN __str[28] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Float Literal
               PUSH 3.14
            // Float Literal
               PUSH 0.25
            // Float Literal
               PUSH 2.0
            // Float Literal
               PUSH 6.28
            POP __elem3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 4
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            ASSIGN __list[3] __elem3
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__26__floats 0
      POP __rhs
      ASSIGN __main__block__26__floats __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 41
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] '['
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'f'
            ASSIGN __str[9] 'l'
            ASSIGN __str[10] 'o'
            ASSIGN __str[11] 'a'
            ASSIGN __str[12] 't'
            ASSIGN __str[13] 's'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] ' '
            ASSIGN __str[17] '['
            ASSIGN __str[18] '3'
            ASSIGN __str[19] '.'
            ASSIGN __str[20] '1'
            ASSIGN __str[21] '4'
            ASSIGN __str[22] ','
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '0'
            ASSIGN __str[25] '.'
            ASSIGN __str[26] '2'
            ASSIGN __str[27] '5'
            ASSIGN __str[28] ','
            ASSIGN __str[29] ' '
            ASSIGN __str[30] '2'
            ASSIGN __str[31] '.'
            ASSIGN __str[32] '0'
            ASSIGN __str[33] ','
            ASSIGN __str[34] ' '
            ASSIGN __str[35] '6'
            ASSIGN __str[36] '.'
            ASSIGN __str[37] '2'
            ASSIGN __str[38] '8'
            ASSIGN __str[39] ']'
            ASSIGN __str[40] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Char Literal
               PUSH 'H'
            // Char Literal
               PUSH 'e'
            // Char Literal
               PUSH 'l'
            // Char Literal
               PUSH 'l'
            // Char Literal
               PUSH 'o'
            POP __elem4
            POP __elem3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 5
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            ASSIGN __list[3] __elem3
            ASSIGN __list[4] __elem4
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__26__str 0
      POP __rhs
      ASSIGN __main__block__26__str __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 39
            ASSIGN __str[0] 'c'
            ASSIGN __str[1] 'h'
            ASSIGN __str[2] 'a'
            ASSIGN __str[3] 'r'
            ASSIGN __str[4] '['
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] 's'
            ASSIGN __str[8] 't'
            ASSIGN __str[9] 'r'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '['
            ASSIGN __str[14] '\''
            ASSIGN __str[15] 'H'
            ASSIGN __str[16] '\''
            ASSIGN __str[17] ','
            ASSIGN __str[18] ' '
            ASSIGN __str[19] '\''
            ASSIGN __str[20] 'e'
            ASSIGN __str[21] '\''
            ASSIGN __str[22] ','
            ASSIGN __str[23] ' '
            ASSIGN __str[24] '\''
            ASSIGN __str[25] 'l'
            ASSIGN __str[26] '\''
            ASSIGN __str[27] ','
            ASSIGN __str[28] ' '
            ASSIGN __str[29] '\''
            ASSIGN __str[30] 'l'
            ASSIGN __str[31] '\''
            ASSIGN __str[32] ','
            ASSIGN __str[33] ' '
            ASSIGN __str[34] '\''
            ASSIGN __str[35] 'o'
            ASSIGN __str[36] '\''
            ASSIGN __str[37] ']'
            ASSIGN __str[38] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Int Literal
               PUSH 3
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Variable Declaration
            ASSIGN __main__block__26__ints 0
      POP __rhs
      ASSIGN __main__block__26__ints __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 24
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] '['
            ASSIGN __str[4] ']'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'i'
            ASSIGN __str[7] 'n'
            ASSIGN __str[8] 't'
            ASSIGN __str[9] 's'
            ASSIGN __str[10] ' '
            ASSIGN __str[11] '='
            ASSIGN __str[12] ' '
            ASSIGN __str[13] 'n'
            ASSIGN __str[14] 'e'
            ASSIGN __str[15] 'w'
            ASSIGN __str[16] ' '
            ASSIGN __str[17] 'i'
            ASSIGN __str[18] 'n'
            ASSIGN __str[19] 't'
            ASSIGN __str[20] '['
            ASSIGN __str[21] '3'
            ASSIGN __str[22] ']'
            ASSIGN __str[23] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'n'
            ASSIGN __str[1] 'u'
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '0'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - nums
                  PUSH __main__block__26__nums
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'n'
            ASSIGN __str[1] 'u'
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '1'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - nums
                  PUSH __main__block__26__nums
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'n'
            ASSIGN __str[1] 'u'
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - nums
                  PUSH __main__block__26__nums
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'n'
            ASSIGN __str[1] 'u'
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '3'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - nums
                  PUSH __main__block__26__nums
            // OFFSET
               // Int Literal
                  PUSH 3
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 's'
            ASSIGN __str[6] '['
            ASSIGN __str[7] '0'
            ASSIGN __str[8] ']'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '='
            ASSIGN __str[11] '>'
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - floats
                  PUSH __main__block__26__floats
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 's'
            ASSIGN __str[6] '['
            ASSIGN __str[7] '1'
            ASSIGN __str[8] ']'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '='
            ASSIGN __str[11] '>'
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - floats
                  PUSH __main__block__26__floats
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 's'
            ASSIGN __str[6] '['
            ASSIGN __str[7] '2'
            ASSIGN __str[8] ']'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '='
            ASSIGN __str[11] '>'
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - floats
                  PUSH __main__block__26__floats
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 's'
            ASSIGN __str[6] '['
            ASSIGN __str[7] '3'
            ASSIGN __str[8] ']'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '='
            ASSIGN __str[11] '>'
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - floats
                  PUSH __main__block__26__floats
            // OFFSET
               // Int Literal
                  PUSH 3
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '0'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '1'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '2'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '3'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 3
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '4'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 4
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'p'
            ASSIGN __str[1] 'r'
            ASSIGN __str[2] 'i'
            ASSIGN __str[3] 'n'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 'l'
            ASSIGN __str[6] 'n'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '('
            ASSIGN __str[9] 's'
            ASSIGN __str[10] 't'
            ASSIGN __str[11] 'r'
            ASSIGN __str[12] ')'
            ASSIGN __str[13] ';'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // Identifier - str
            PUSH __main__block__26__str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '0'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - ints
                  PUSH __main__block__26__ints
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '1'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - ints
                  PUSH __main__block__26__ints
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - ints
                  PUSH __main__block__26__ints
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'n'
            ASSIGN __str[1] 'u'
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '-'
            ASSIGN __str[11] '1'
            ASSIGN __str[12] '7'
            ASSIGN __str[13] ';'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Int Literal
                  PUSH -17
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - nums
                        PUSH __main__block__26__nums
                  // OFFSET
                     // Int Literal
                        PUSH 2
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'n'
            ASSIGN __str[1] 'u'
            ASSIGN __str[2] 'm'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] '>'
            ASSIGN __str[10] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - nums
                  PUSH __main__block__26__nums
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 24
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 's'
            ASSIGN __str[6] '['
            ASSIGN __str[7] '1'
            ASSIGN __str[8] ']'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '='
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '1'
            ASSIGN __str[13] '2'
            ASSIGN __str[14] '3'
            ASSIGN __str[15] '.'
            ASSIGN __str[16] '4'
            ASSIGN __str[17] '5'
            ASSIGN __str[18] '6'
            ASSIGN __str[19] ';'
            ASSIGN __str[20] ' '
            ASSIGN __str[21] '='
            ASSIGN __str[22] '>'
            ASSIGN __str[23] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Float Literal
                  PUSH 123.456
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - floats
                        PUSH __main__block__26__floats
                  // OFFSET
                     // Int Literal
                        PUSH 1
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'f'
            ASSIGN __str[1] 'l'
            ASSIGN __str[2] 'o'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 's'
            ASSIGN __str[6] '['
            ASSIGN __str[7] '1'
            ASSIGN __str[8] ']'
            ASSIGN __str[9] ' '
            ASSIGN __str[10] '='
            ASSIGN __str[11] '>'
            ASSIGN __str[12] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - floats
                  PUSH __main__block__26__floats
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '0'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '\''
            ASSIGN __str[10] 'A'
            ASSIGN __str[11] '\''
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] '>'
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Char Literal
                  PUSH 'A'
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - str
                        PUSH __main__block__26__str
                  // OFFSET
                     // Int Literal
                        PUSH 0
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '0'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '1'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '\''
            ASSIGN __str[10] 'm'
            ASSIGN __str[11] '\''
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] '>'
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Char Literal
                  PUSH 'm'
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - str
                        PUSH __main__block__26__str
                  // OFFSET
                     // Int Literal
                        PUSH 1
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '1'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '2'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '\''
            ASSIGN __str[10] 'y'
            ASSIGN __str[11] '\''
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '='
            ASSIGN __str[14] '>'
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Char Literal
                  PUSH 'y'
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - str
                        PUSH __main__block__26__str
                  // OFFSET
                     // Int Literal
                        PUSH 2
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '2'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 17
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '3'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] ' '
            ASSIGN __str[9] '\''
            ASSIGN __str[10] '\\'
            ASSIGN __str[11] '0'
            ASSIGN __str[12] '\''
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '>'
            ASSIGN __str[16] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Char Literal
                  PUSH '\0'
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - str
                        PUSH __main__block__26__str
                  // OFFSET
                     // Int Literal
                        PUSH 3
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '3'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 3
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 10
            ASSIGN __str[0] 's'
            ASSIGN __str[1] 't'
            ASSIGN __str[2] 'r'
            ASSIGN __str[3] '['
            ASSIGN __str[4] '4'
            ASSIGN __str[5] ']'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '='
            ASSIGN __str[8] '>'
            ASSIGN __str[9] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char) -> void
      // Arguments
         // Subscript
            // LHS
               // Identifier - str
                  PUSH __main__block__26__str
            // OFFSET
               // Int Literal
                  PUSH 4
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'p'
            ASSIGN __str[1] 'r'
            ASSIGN __str[2] 'i'
            ASSIGN __str[3] 'n'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] 'l'
            ASSIGN __str[6] 'n'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '('
            ASSIGN __str[9] 's'
            ASSIGN __str[10] 't'
            ASSIGN __str[11] 'r'
            ASSIGN __str[12] ')'
            ASSIGN __str[13] ';'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // Identifier - str
            PUSH __main__block__26__str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 21
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '0'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'n'
            ASSIGN __str[11] 'u'
            ASSIGN __str[12] 'm'
            ASSIGN __str[13] 's'
            ASSIGN __str[14] '['
            ASSIGN __str[15] '0'
            ASSIGN __str[16] ']'
            ASSIGN __str[17] ' '
            ASSIGN __str[18] '='
            ASSIGN __str[19] '>'
            ASSIGN __str[20] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Subscript
                  // LHS
                     // Identifier - nums
                        PUSH __main__block__26__nums
                  // OFFSET
                     // Int Literal
                        PUSH 0
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - ints
                        PUSH __main__block__26__ints
                  // OFFSET
                     // Int Literal
                        PUSH 0
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 21
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '1'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'n'
            ASSIGN __str[11] 'u'
            ASSIGN __str[12] 'm'
            ASSIGN __str[13] 's'
            ASSIGN __str[14] '['
            ASSIGN __str[15] '1'
            ASSIGN __str[16] ']'
            ASSIGN __str[17] ' '
            ASSIGN __str[18] '='
            ASSIGN __str[19] '>'
            ASSIGN __str[20] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Subscript
                  // LHS
                     // Identifier - nums
                        PUSH __main__block__26__nums
                  // OFFSET
                     // Int Literal
                        PUSH 1
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - ints
                        PUSH __main__block__26__ints
                  // OFFSET
                     // Int Literal
                        PUSH 1
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 21
            ASSIGN __str[0] 'i'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] '['
            ASSIGN __str[5] '2'
            ASSIGN __str[6] ']'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] '='
            ASSIGN __str[9] ' '
            ASSIGN __str[10] 'n'
            ASSIGN __str[11] 'u'
            ASSIGN __str[12] 'm'
            ASSIGN __str[13] 's'
            ASSIGN __str[14] '['
            ASSIGN __str[15] '2'
            ASSIGN __str[16] ']'
            ASSIGN __str[17] ' '
            ASSIGN __str[18] '='
            ASSIGN __str[19] '>'
            ASSIGN __str[20] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Assignment - '='
            // RHS
               // Subscript
                  // LHS
                     // Identifier - nums
                        PUSH __main__block__26__nums
                  // OFFSET
                     // Int Literal
                        PUSH 2
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - ints
                        PUSH __main__block__26__ints
                  // OFFSET
                     // Int Literal
                        PUSH 2
                  POP __offset
                  POP __pointer
            POP __rhs
            ASSIGN __pointer[__offset] __rhs
            PUSH __rhs
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 26
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'A'
         ASSIGN __str[13] 'r'
         ASSIGN __str[14] 'r'
         ASSIGN __str[15] 'a'
         ASSIGN __str[16] 'y'
         ASSIGN __str[17] ' '
         ASSIGN __str[18] 'C'
         ASSIGN __str[19] 'o'
         ASSIGN __str[20] 'n'
         ASSIGN __str[21] 't'
         ASSIGN __str[22] ' '
         ASSIGN __str[23] '='
         ASSIGN __str[24] '='
         ASSIGN __str[25] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   //=====================================================================
   // Function Template - 
      // Instances:
         //===============================================================
         // Function Declaration - printArray<:int:>(int[], int) -> void
         JUMP __end____main__block__27____printArray__int____int__1__int
         __main__block__27____printArray__int____int__1__int:
            // Parameters
               // Param: arr
               STACKGET __main__block__27__printArray__arr 0
               // Param: size
               STACKGET __main__block__27__printArray__size 1
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Function Call - print(char) -> void
                     // Arguments
                        // Char Literal
                           PUSH '['
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** print
                     CALL print__char
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Greater Than
                           // LHS
                              // Identifier - size
                                 PUSH __main__block__27__printArray__size
                           // RHS
                              // Int Literal
                                 PUSH 0
                           POP __rhs
                           POP __lhs
                           GT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__29
                     // Body
                        // Function Call - print(int) -> void
                           // Arguments
                              // Subscript
                                 // LHS
                                    // Identifier - arr
                                       PUSH __main__block__27__printArray__arr
                                 // OFFSET
                                    // Int Literal
                                       PUSH 0
                                 POP __offset
                                 POP __pointer
                                 PUSH __pointer[__offset]
                              POP __arg0
                           // Pushing args in reverse order
                           PUSH __arg0
                           // *** print
                           CALL print__int
                           // Remove args
                           POP __void
                           RESPONSE __retval
                           PUSH __retval
                        // Statement results can be ignored
                        POP __void
                     JUMP __endif__29
                     // End of if
                     __endif__29:
                  //------------------------------------------------------
                  //------------------------------------------------------
                  // For-Loop
                  // Init
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 1
                        // LHS
                           // Variable Declaration
                              ASSIGN __main__block__27__printArray__block__28__for__30__i 0
                        POP __rhs
                        ASSIGN __main__block__27__printArray__block__28__for__30__i __rhs
                        PUSH __rhs
                  JUMP __forcond__30
                  __for__30:
                     // Update
                        // Pre-Increment
                           // RHS
                              // Identifier - i
                                 PUSH __main__block__27__printArray__block__28__for__30__i
                           POP __rhs
                           ADD __main__block__27__printArray__block__28__for__30__i __main__block__27__printArray__block__28__for__30__i 1
                           ASSIGN __res __main__block__27__printArray__block__28__for__30__i
                           PUSH __res
                     __forcond__30:
                     // Condition
                        // Less Than
                           // LHS
                              // Identifier - i
                                 PUSH __main__block__27__printArray__block__28__for__30__i
                           // RHS
                              // Identifier - size
                                 PUSH __main__block__27__printArray__size
                           POP __rhs
                           POP __lhs
                           LT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endfor__30
                     // Body
                        //------------------------------------------------
                        // Code Block
                           // Function Call - print(char[]) -> void
                              // Arguments
                                 // String Literal
                                    MALLOC __str 2
                                    ASSIGN __str[0] ','
                                    ASSIGN __str[1] ' '
                                    PUSH __str
                                 POP __arg0
                              // Pushing args in reverse order
                              PUSH __arg0
                              // *** print
                              CALL print__char__1
                              // Remove args
                              POP __void
                              RESPONSE __retval
                              PUSH __retval
                           // Statement results can be ignored
                           POP __void
                           // Function Call - print(int) -> void
                              // Arguments
                                 // Subscript
                                    // LHS
                                       // Identifier - arr
                                          PUSH __main__block__27__printArray__arr
                                    // OFFSET
                                       // Identifier - i
                                          PUSH __main__block__27__printArray__block__28__for__30__i
                                    POP __offset
                                    POP __pointer
                                    PUSH __pointer[__offset]
                                 POP __arg0
                              // Pushing args in reverse order
                              PUSH __arg0
                              // *** print
                              CALL print__int
                              // Remove args
                              POP __void
                              RESPONSE __retval
                              PUSH __retval
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     // Repeat
                     JUMP __for__30
                     // End of For
                     __endfor__30:
                  //------------------------------------------------------
                  // Function Call - println(char) -> void
                     // Arguments
                        // Char Literal
                           PUSH ']'
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** println
                     CALL println__char
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
            RETURN 0
         __end____main__block__27____printArray__int____int__1__int:
         // End Function Declaration - __main__block__27____printArray__int____int__1__int
         //===============================================================

         //===============================================================
         // Function Declaration - printArray<:float:>(float[], int) -> void
         JUMP __end____main__block__27____printArray__float____float__1__int
         __main__block__27____printArray__float____float__1__int:
            // Parameters
               // Param: arr
               STACKGET __main__block__27__printArray__arr 0
               // Param: size
               STACKGET __main__block__27__printArray__size 1
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Function Call - print(char) -> void
                     // Arguments
                        // Char Literal
                           PUSH '['
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** print
                     CALL print__char
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Greater Than
                           // LHS
                              // Identifier - size
                                 PUSH __main__block__27__printArray__size
                           // RHS
                              // Int Literal
                                 PUSH 0
                           POP __rhs
                           POP __lhs
                           GT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__33
                     // Body
                        // Function Call - print(float) -> void
                           // Arguments
                              // Subscript
                                 // LHS
                                    // Identifier - arr
                                       PUSH __main__block__27__printArray__arr
                                 // OFFSET
                                    // Int Literal
                                       PUSH 0
                                 POP __offset
                                 POP __pointer
                                 PUSH __pointer[__offset]
                              POP __arg0
                           // Pushing args in reverse order
                           PUSH __arg0
                           // *** print
                           CALL print__float
                           // Remove args
                           POP __void
                           RESPONSE __retval
                           PUSH __retval
                        // Statement results can be ignored
                        POP __void
                     JUMP __endif__33
                     // End of if
                     __endif__33:
                  //------------------------------------------------------
                  //------------------------------------------------------
                  // For-Loop
                  // Init
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 1
                        // LHS
                           // Variable Declaration
                              ASSIGN __main__block__27__printArray__block__32__for__34__i 0
                        POP __rhs
                        ASSIGN __main__block__27__printArray__block__32__for__34__i __rhs
                        PUSH __rhs
                  JUMP __forcond__34
                  __for__34:
                     // Update
                        // Pre-Increment
                           // RHS
                              // Identifier - i
                                 PUSH __main__block__27__printArray__block__32__for__34__i
                           POP __rhs
                           ADD __main__block__27__printArray__block__32__for__34__i __main__block__27__printArray__block__32__for__34__i 1
                           ASSIGN __res __main__block__27__printArray__block__32__for__34__i
                           PUSH __res
                     __forcond__34:
                     // Condition
                        // Less Than
                           // LHS
                              // Identifier - i
                                 PUSH __main__block__27__printArray__block__32__for__34__i
                           // RHS
                              // Identifier - size
                                 PUSH __main__block__27__printArray__size
                           POP __rhs
                           POP __lhs
                           LT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endfor__34
                     // Body
                        //------------------------------------------------
                        // Code Block
                           // Function Call - print(char[]) -> void
                              // Arguments
                                 // String Literal
                                    MALLOC __str 2
                                    ASSIGN __str[0] ','
                                    ASSIGN __str[1] ' '
                                    PUSH __str
                                 POP __arg0
                              // Pushing args in reverse order
                              PUSH __arg0
                              // *** print
                              CALL print__char__1
                              // Remove args
                              POP __void
                              RESPONSE __retval
                              PUSH __retval
                           // Statement results can be ignored
                           POP __void
                           // Function Call - print(float) -> void
                              // Arguments
                                 // Subscript
                                    // LHS
                                       // Identifier - arr
                                          PUSH __main__block__27__printArray__arr
                                    // OFFSET
                                       // Identifier - i
                                          PUSH __main__block__27__printArray__block__32__for__34__i
                                    POP __offset
                                    POP __pointer
                                    PUSH __pointer[__offset]
                                 POP __arg0
                              // Pushing args in reverse order
                              PUSH __arg0
                              // *** print
                              CALL print__float
                              // Remove args
                              POP __void
                              RESPONSE __retval
                              PUSH __retval
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     // Repeat
                     JUMP __for__34
                     // End of For
                     __endfor__34:
                  //------------------------------------------------------
                  // Function Call - println(char) -> void
                     // Arguments
                        // Char Literal
                           PUSH ']'
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** println
                     CALL println__char
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
            RETURN 0
         __end____main__block__27____printArray__float____float__1__int:
         // End Function Declaration - __main__block__27____printArray__float____float__1__int
         //===============================================================

   // End Function Template - 
   //=====================================================================

   //=====================================================================
   // Function Declaration - printArray(char[], int) -> void
   JUMP __end____main__block__27____printArray__char__1__int
   __main__block__27____printArray__char__1__int:
      // Parameters
         // Param: arr
         STACKGET __main__block__27__printArray__arr 0
         // Param: size
         STACKGET __main__block__27__printArray__size 1
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH '['
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            //------------------------------------------------------------
            // If-Statement
               // Condition
                  // Greater Than
                     // LHS
                        // Identifier - size
                           PUSH __main__block__27__printArray__size
                     // RHS
                        // Int Literal
                           PUSH 0
                     POP __rhs
                     POP __lhs
                     GT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endif__37
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Function Call - print(char) -> void
                        // Arguments
                           // Char Literal
                              PUSH '\''
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                     // Function Call - print(char) -> void
                        // Arguments
                           // Subscript
                              // LHS
                                 // Identifier - arr
                                    PUSH __main__block__27__printArray__arr
                              // OFFSET
                                 // Int Literal
                                    PUSH 0
                              POP __offset
                              POP __pointer
                              PUSH __pointer[__offset]
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                     // Function Call - print(char) -> void
                        // Arguments
                           // Char Literal
                              PUSH '\''
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                  //------------------------------------------------------
               JUMP __endif__37
               // End of if
               __endif__37:
            //------------------------------------------------------------
            //------------------------------------------------------------
            // For-Loop
            // Init
               // Assignment - '='
                  // RHS
                     // Int Literal
                        PUSH 1
                  // LHS
                     // Variable Declaration
                        ASSIGN __main__block__27__printArray__block__36__for__39__i 0
                  POP __rhs
                  ASSIGN __main__block__27__printArray__block__36__for__39__i __rhs
                  PUSH __rhs
            JUMP __forcond__39
            __for__39:
               // Update
                  // Pre-Increment
                     // RHS
                        // Identifier - i
                           PUSH __main__block__27__printArray__block__36__for__39__i
                     POP __rhs
                     ADD __main__block__27__printArray__block__36__for__39__i __main__block__27__printArray__block__36__for__39__i 1
                     ASSIGN __res __main__block__27__printArray__block__36__for__39__i
                     PUSH __res
               __forcond__39:
               // Condition
                  // Less Than
                     // LHS
                        // Identifier - i
                           PUSH __main__block__27__printArray__block__36__for__39__i
                     // RHS
                        // Identifier - size
                           PUSH __main__block__27__printArray__size
                     POP __rhs
                     POP __lhs
                     LT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endfor__39
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Function Call - print(char[]) -> void
                        // Arguments
                           // String Literal
                              MALLOC __str 2
                              ASSIGN __str[0] ','
                              ASSIGN __str[1] ' '
                              PUSH __str
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char__1
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                     // Function Call - print(char) -> void
                        // Arguments
                           // Char Literal
                              PUSH '\''
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                     // Function Call - print(char) -> void
                        // Arguments
                           // Subscript
                              // LHS
                                 // Identifier - arr
                                    PUSH __main__block__27__printArray__arr
                              // OFFSET
                                 // Identifier - i
                                    PUSH __main__block__27__printArray__block__36__for__39__i
                              POP __offset
                              POP __pointer
                              PUSH __pointer[__offset]
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                     // Function Call - print(char) -> void
                        // Arguments
                           // Char Literal
                              PUSH '\''
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg0
                        // *** print
                        CALL print__char
                        // Remove args
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                     // Statement results can be ignored
                     POP __void
                  //------------------------------------------------------
               // Repeat
               JUMP __for__39
               // End of For
               __endfor__39:
            //------------------------------------------------------------
            // Function Call - println(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ']'
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__27____printArray__char__1__int:
   // End Function Declaration - __main__block__27____printArray__char__1__int
   //=====================================================================

   // Assignment - '='
      // RHS
         // Int Literal
            PUSH 10
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__n 0
      POP __rhs
      ASSIGN __main__block__27__n __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Identifier - n
               PUSH __main__block__27__n
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__arr 0
      POP __rhs
      ASSIGN __main__block__27__arr __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__27__for__41__i 0
         POP __rhs
         ASSIGN __main__block__27__for__41__i __rhs
         PUSH __rhs
   JUMP __forcond__41
   __for__41:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__27__for__41__i
            POP __rhs
            ADD __main__block__27__for__41__i __main__block__27__for__41__i 1
            ASSIGN __res __main__block__27__for__41__i
            PUSH __res
      __forcond__41:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__27__for__41__i
            // RHS
               // Identifier - n
                  PUSH __main__block__27__n
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__41
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment - '='
               // RHS
                  // Identifier - i
                     PUSH __main__block__27__for__41__i
               // LHS
                  // Subscript assignment
                     // LHS
                        // Identifier - arr
                           PUSH __main__block__27__arr
                     // OFFSET
                        // Identifier - i
                           PUSH __main__block__27__for__41__i
                     POP __offset
                     POP __pointer
               POP __rhs
               ASSIGN __pointer[__offset] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__41
      // End of For
      __endfor__41:
   //---------------------------------------------------------------------
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - arr
            PUSH __main__block__27__arr
         // Identifier - n
            PUSH __main__block__27__n
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__27__for__43__i 0
         POP __rhs
         ASSIGN __main__block__27__for__43__i __rhs
         PUSH __rhs
   JUMP __forcond__43
   __for__43:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__27__for__43__i
            POP __rhs
            ADD __main__block__27__for__43__i __main__block__27__for__43__i 1
            ASSIGN __res __main__block__27__for__43__i
            PUSH __res
      __forcond__43:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__27__for__43__i
            // RHS
               // Identifier - n
                  PUSH __main__block__27__n
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__43
      // Body
         // Assignment - '*='
            // RHS
               // Int Literal
                  PUSH 2
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - arr
                        PUSH __main__block__27__arr
                  // OFFSET
                     // Identifier - i
                        PUSH __main__block__27__for__43__i
                  POP __offset
                  POP __pointer
            POP __rhs
            MULTIPLY __pointer[__offset] __pointer[__offset] __rhs
            PUSH __pointer[__offset]
         // Statement results can be ignored
         POP __void
      // Repeat
      JUMP __for__43
      // End of For
      __endfor__43:
   //---------------------------------------------------------------------
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - arr
            PUSH __main__block__27__arr
         // Identifier - n
            PUSH __main__block__27__n
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__27__for__44__i 0
         POP __rhs
         ASSIGN __main__block__27__for__44__i __rhs
         PUSH __rhs
   JUMP __forcond__44
   __for__44:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__27__for__44__i
            POP __rhs
            ADD __main__block__27__for__44__i __main__block__27__for__44__i 1
            ASSIGN __res __main__block__27__for__44__i
            PUSH __res
      __forcond__44:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__27__for__44__i
            // RHS
               // Identifier - n
                  PUSH __main__block__27__n
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__44
      // Body
         // Assignment - '+='
            // RHS
               // Int Literal
                  PUSH 2
            // LHS
               // Subscript assignment
                  // LHS
                     // Identifier - arr
                        PUSH __main__block__27__arr
                  // OFFSET
                     // Identifier - i
                        PUSH __main__block__27__for__44__i
                  POP __offset
                  POP __pointer
            POP __rhs
            ADD __pointer[__offset] __pointer[__offset] __rhs
            PUSH __pointer[__offset]
         // Statement results can be ignored
         POP __void
      // Repeat
      JUMP __for__44
      // End of For
      __endfor__44:
   //---------------------------------------------------------------------
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - arr
            PUSH __main__block__27__arr
         // Identifier - n
            PUSH __main__block__27__n
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Int Literal
               PUSH 3
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__floats 0
      POP __rhs
      ASSIGN __main__block__27__floats __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__27__for__45__i 0
         POP __rhs
         ASSIGN __main__block__27__for__45__i __rhs
         PUSH __rhs
   JUMP __forcond__45
   __for__45:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__27__for__45__i
            POP __rhs
            ADD __main__block__27__for__45__i __main__block__27__for__45__i 1
            ASSIGN __res __main__block__27__for__45__i
            PUSH __res
      __forcond__45:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__27__for__45__i
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__45
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment - '='
               // RHS
                  // Function Call - intToFloat(int) -> float
                     // Arguments
                        // Identifier - i
                           PUSH __main__block__27__for__45__i
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** intToFloat
                     CALL intToFloat__int
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
               // LHS
                  // Subscript assignment
                     // LHS
                        // Identifier - floats
                           PUSH __main__block__27__floats
                     // OFFSET
                        // Identifier - i
                           PUSH __main__block__27__for__45__i
                     POP __offset
                     POP __pointer
               POP __rhs
               ASSIGN __pointer[__offset] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__45
      // End of For
      __endfor__45:
   //---------------------------------------------------------------------
   // Function Call - printArray<:float:>(float[], int) -> void
      // Arguments
         // Identifier - floats
            PUSH __main__block__27__floats
         // Int Literal
            PUSH 3
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__float____float__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__27__for__47__i 0
         POP __rhs
         ASSIGN __main__block__27__for__47__i __rhs
         PUSH __rhs
   JUMP __forcond__47
   __for__47:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__27__for__47__i
            POP __rhs
            ADD __main__block__27__for__47__i __main__block__27__for__47__i 1
            ASSIGN __res __main__block__27__for__47__i
            PUSH __res
      __forcond__47:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__27__for__47__i
            // RHS
               // Int Literal
                  PUSH 3
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__47
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment - '/='
               // RHS
                  // Float Literal
                     PUSH 3.25
               // LHS
                  // Subscript assignment
                     // LHS
                        // Identifier - floats
                           PUSH __main__block__27__floats
                     // OFFSET
                        // Identifier - i
                           PUSH __main__block__27__for__47__i
                     POP __offset
                     POP __pointer
               POP __rhs
               DIVIDE __pointer[__offset] __pointer[__offset] __rhs
               PUSH __pointer[__offset]
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__47
      // End of For
      __endfor__47:
   //---------------------------------------------------------------------
   // Function Call - printArray<:float:>(float[], int) -> void
      // Arguments
         // Identifier - floats
            PUSH __main__block__27__floats
         // Int Literal
            PUSH 3
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__float____float__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'H'
            ASSIGN __str[1] 'e'
            ASSIGN __str[2] 'l'
            ASSIGN __str[3] 'l'
            ASSIGN __str[4] 'o'
            ASSIGN __str[5] ','
            ASSIGN __str[6] ' '
            ASSIGN __str[7] 'w'
            ASSIGN __str[8] 'o'
            ASSIGN __str[9] 'r'
            ASSIGN __str[10] 'l'
            ASSIGN __str[11] 'd'
            ASSIGN __str[12] '!'
            PUSH __str
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__str 0
      POP __rhs
      ASSIGN __main__block__27__str __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - printArray(char[], int) -> void
      // Arguments
         // Identifier - str
            PUSH __main__block__27__str
         // Int Literal
            PUSH 13
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__char__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // Identifier - str
            PUSH __main__block__27__str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //=====================================================================
   // Function Declaration - add(int[], int[], int[], int) -> void
   JUMP __end____main__block__27____add__int__1__int__1__int__1__int
   __main__block__27____add__int__1__int__1__int__1__int:
      // Parameters
         // Param: a
         STACKGET __main__block__27__add__a 0
         // Param: b
         STACKGET __main__block__27__add__b 1
         // Param: c
         STACKGET __main__block__27__add__c 2
         // Param: n
         STACKGET __main__block__27__add__n 3
      // Body
         //---------------------------------------------------------------
         // Code Block
            //------------------------------------------------------------
            // For-Loop
            // Init
               // Assignment - '='
                  // RHS
                     // Int Literal
                        PUSH 0
                  // LHS
                     // Variable Declaration
                        ASSIGN __main__block__27__add__block__49__for__50__i 0
                  POP __rhs
                  ASSIGN __main__block__27__add__block__49__for__50__i __rhs
                  PUSH __rhs
            JUMP __forcond__50
            __for__50:
               // Update
                  // Pre-Increment
                     // RHS
                        // Identifier - i
                           PUSH __main__block__27__add__block__49__for__50__i
                     POP __rhs
                     ADD __main__block__27__add__block__49__for__50__i __main__block__27__add__block__49__for__50__i 1
                     ASSIGN __res __main__block__27__add__block__49__for__50__i
                     PUSH __res
               __forcond__50:
               // Condition
                  // Less Than
                     // LHS
                        // Identifier - i
                           PUSH __main__block__27__add__block__49__for__50__i
                     // RHS
                        // Identifier - n
                           PUSH __main__block__27__add__n
                     POP __rhs
                     POP __lhs
                     LT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endfor__50
               // Body
                  // Assignment - '='
                     // RHS
                        // Addition
                           // LHS
                              // Subscript
                                 // LHS
                                    // Identifier - a
                                       PUSH __main__block__27__add__a
                                 // OFFSET
                                    // Identifier - i
                                       PUSH __main__block__27__add__block__49__for__50__i
                                 POP __offset
                                 POP __pointer
                                 PUSH __pointer[__offset]
                           // RHS
                              // Subscript
                                 // LHS
                                    // Identifier - b
                                       PUSH __main__block__27__add__b
                                 // OFFSET
                                    // Identifier - i
                                       PUSH __main__block__27__add__block__49__for__50__i
                                 POP __offset
                                 POP __pointer
                                 PUSH __pointer[__offset]
                           POP __rhs
                           POP __lhs
                           ADD __res __lhs __rhs
                           PUSH __res
                     // LHS
                        // Subscript assignment
                           // LHS
                              // Identifier - c
                                 PUSH __main__block__27__add__c
                           // OFFSET
                              // Identifier - i
                                 PUSH __main__block__27__add__block__49__for__50__i
                           POP __offset
                           POP __pointer
                     POP __rhs
                     ASSIGN __pointer[__offset] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
               // Repeat
               JUMP __for__50
               // End of For
               __endfor__50:
            //------------------------------------------------------------
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__27____add__int__1__int__1__int__1__int:
   // End Function Declaration - __main__block__27____add__int__1__int__1__int__1__int
   //=====================================================================

   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Int Literal
               PUSH 0
            // Int Literal
               PUSH 1
            // Int Literal
               PUSH 2
            // Int Literal
               PUSH 3
            // Int Literal
               PUSH 4
            // Int Literal
               PUSH 5
            POP __elem5
            POP __elem4
            POP __elem3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 6
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            ASSIGN __list[3] __elem3
            ASSIGN __list[4] __elem4
            ASSIGN __list[5] __elem5
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__a 0
      POP __rhs
      ASSIGN __main__block__27__a __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Int Literal
               PUSH 5
            // Int Literal
               PUSH 4
            // Int Literal
               PUSH 3
            // Int Literal
               PUSH 2
            // Int Literal
               PUSH 1
            // Int Literal
               PUSH 0
            POP __elem5
            POP __elem4
            POP __elem3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 6
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            ASSIGN __list[3] __elem3
            ASSIGN __list[4] __elem4
            ASSIGN __list[5] __elem5
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__b 0
      POP __rhs
      ASSIGN __main__block__27__b __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Int Literal
               PUSH 0
            // Int Literal
               PUSH 0
            // Int Literal
               PUSH 0
            // Int Literal
               PUSH 0
            // Int Literal
               PUSH 0
            // Int Literal
               PUSH 0
            POP __elem5
            POP __elem4
            POP __elem3
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 6
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            ASSIGN __list[3] __elem3
            ASSIGN __list[4] __elem4
            ASSIGN __list[5] __elem5
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__27__c 0
      POP __rhs
      ASSIGN __main__block__27__c __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'a'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - a
            PUSH __main__block__27__a
         // Int Literal
            PUSH 6
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'b'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - b
            PUSH __main__block__27__b
         // Int Literal
            PUSH 6
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'c'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - c
            PUSH __main__block__27__c
         // Int Literal
            PUSH 6
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] 'c'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] 'a'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '+'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'b'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - add(int[], int[], int[], int) -> void
      // Arguments
         // Identifier - a
            PUSH __main__block__27__a
         // Identifier - b
            PUSH __main__block__27__b
         // Identifier - c
            PUSH __main__block__27__c
         // Int Literal
            PUSH 6
         POP __arg3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg3
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** add
      CALL __main__block__27____add__int__1__int__1__int__1__int
      // Remove args
      POP __void
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'c'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printArray<:int:>(int[], int) -> void
      // Arguments
         // Identifier - c
            PUSH __main__block__27__c
         // Int Literal
            PUSH 6
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      // *** printArray
      CALL __main__block__27____printArray__int____int__1__int
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 39
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'M'
         ASSIGN __str[13] 'u'
         ASSIGN __str[14] 'l'
         ASSIGN __str[15] 't'
         ASSIGN __str[16] 'i'
         ASSIGN __str[17] 'd'
         ASSIGN __str[18] 'i'
         ASSIGN __str[19] 'm'
         ASSIGN __str[20] 'e'
         ASSIGN __str[21] 'n'
         ASSIGN __str[22] 's'
         ASSIGN __str[23] 'i'
         ASSIGN __str[24] 'o'
         ASSIGN __str[25] 'n'
         ASSIGN __str[26] 'a'
         ASSIGN __str[27] 'l'
         ASSIGN __str[28] ' '
         ASSIGN __str[29] 'A'
         ASSIGN __str[30] 'r'
         ASSIGN __str[31] 'r'
         ASSIGN __str[32] 'a'
         ASSIGN __str[33] 'y'
         ASSIGN __str[34] 's'
         ASSIGN __str[35] ' '
         ASSIGN __str[36] '='
         ASSIGN __str[37] '='
         ASSIGN __str[38] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   //=====================================================================
   // Function Template - 
      // Instances:
         //===============================================================
         // Function Declaration - printMatrix<:int:>(int[][], int, int) -> void
         JUMP __end____main__block__51____printMatrix__int____int__2__int__int
         __main__block__51____printMatrix__int____int__2__int__int:
            // Parameters
               // Param: mat
               STACKGET __main__block__51__printMatrix__mat 0
               // Param: r
               STACKGET __main__block__51__printMatrix__r 1
               // Param: c
               STACKGET __main__block__51__printMatrix__c 2
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // For-Loop
                  // Init
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 0
                        // LHS
                           // Variable Declaration
                              ASSIGN __main__block__51__printMatrix__block__52__for__53__i 0
                        POP __rhs
                        ASSIGN __main__block__51__printMatrix__block__52__for__53__i __rhs
                        PUSH __rhs
                  JUMP __forcond__53
                  __for__53:
                     // Update
                        // Pre-Increment
                           // RHS
                              // Identifier - i
                                 PUSH __main__block__51__printMatrix__block__52__for__53__i
                           POP __rhs
                           ADD __main__block__51__printMatrix__block__52__for__53__i __main__block__51__printMatrix__block__52__for__53__i 1
                           ASSIGN __res __main__block__51__printMatrix__block__52__for__53__i
                           PUSH __res
                     __forcond__53:
                     // Condition
                        // Less Than
                           // LHS
                              // Identifier - i
                                 PUSH __main__block__51__printMatrix__block__52__for__53__i
                           // RHS
                              // Identifier - r
                                 PUSH __main__block__51__printMatrix__r
                           POP __rhs
                           POP __lhs
                           LT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endfor__53
                     // Body
                        //------------------------------------------------
                        // Code Block
                           //---------------------------------------------
                           // For-Loop
                           // Init
                              // Assignment - '='
                                 // RHS
                                    // Int Literal
                                       PUSH 0
                                 // LHS
                                    // Variable Declaration
                                       ASSIGN __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j 0
                                 POP __rhs
                                 ASSIGN __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j __rhs
                                 PUSH __rhs
                           JUMP __forcond__55
                           __for__55:
                              // Update
                                 // Pre-Increment
                                    // RHS
                                       // Identifier - j
                                          PUSH __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j
                                    POP __rhs
                                    ADD __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j 1
                                    ASSIGN __res __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j
                                    PUSH __res
                              __forcond__55:
                              // Condition
                                 // Less Than
                                    // LHS
                                       // Identifier - j
                                          PUSH __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j
                                    // RHS
                                       // Identifier - c
                                          PUSH __main__block__51__printMatrix__c
                                    POP __rhs
                                    POP __lhs
                                    LT __res __lhs __rhs
                                    PUSH __res
                                 POP __cond
                                 CMP __cond 0
                                 JEQ __endfor__55
                              // Body
                                 //---------------------------------------
                                 // Code Block
                                    // Function Call - print(int) -> void
                                       // Arguments
                                          // Subscript
                                             // LHS
                                                // Subscript
                                                   // LHS
                                                      // Identifier - mat
                                                         PUSH __main__block__51__printMatrix__mat
                                                   // OFFSET
                                                      // Identifier - i
                                                         PUSH __main__block__51__printMatrix__block__52__for__53__i
                                                   POP __offset
                                                   POP __pointer
                                                   PUSH __pointer[__offset]
                                             // OFFSET
                                                // Identifier - j
                                                   PUSH __main__block__51__printMatrix__block__52__for__53__block__54__for__55__j
                                             POP __offset
                                             POP __pointer
                                             PUSH __pointer[__offset]
                                          POP __arg0
                                       // Pushing args in reverse order
                                       PUSH __arg0
                                       // *** print
                                       CALL print__int
                                       // Remove args
                                       POP __void
                                       RESPONSE __retval
                                       PUSH __retval
                                    // Statement results can be ignored
                                    POP __void
                                    // Function Call - print(char) -> void
                                       // Arguments
                                          // Char Literal
                                             PUSH ' '
                                          POP __arg0
                                       // Pushing args in reverse order
                                       PUSH __arg0
                                       // *** print
                                       CALL print__char
                                       // Remove args
                                       POP __void
                                       RESPONSE __retval
                                       PUSH __retval
                                    // Statement results can be ignored
                                    POP __void
                                 //---------------------------------------
                              // Repeat
                              JUMP __for__55
                              // End of For
                              __endfor__55:
                           //---------------------------------------------
                           // Function Call - println() -> void
                              // Arguments
                              // Pushing args in reverse order
                              // *** println
                              CALL println
                              // Remove args
                              RESPONSE __retval
                              PUSH __retval
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     // Repeat
                     JUMP __for__53
                     // End of For
                     __endfor__53:
                  //------------------------------------------------------
               //---------------------------------------------------------
            RETURN 0
         __end____main__block__51____printMatrix__int____int__2__int__int:
         // End Function Declaration - __main__block__51____printMatrix__int____int__2__int__int
         //===============================================================

         //===============================================================
         // Function Declaration - printMatrix<:float:>(float[][], int, int) -> void
         JUMP __end____main__block__51____printMatrix__float____float__2__int__int
         __main__block__51____printMatrix__float____float__2__int__int:
            // Parameters
               // Param: mat
               STACKGET __main__block__51__printMatrix__mat 0
               // Param: r
               STACKGET __main__block__51__printMatrix__r 1
               // Param: c
               STACKGET __main__block__51__printMatrix__c 2
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // For-Loop
                  // Init
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 0
                        // LHS
                           // Variable Declaration
                              ASSIGN __main__block__51__printMatrix__block__57__for__58__i 0
                        POP __rhs
                        ASSIGN __main__block__51__printMatrix__block__57__for__58__i __rhs
                        PUSH __rhs
                  JUMP __forcond__58
                  __for__58:
                     // Update
                        // Pre-Increment
                           // RHS
                              // Identifier - i
                                 PUSH __main__block__51__printMatrix__block__57__for__58__i
                           POP __rhs
                           ADD __main__block__51__printMatrix__block__57__for__58__i __main__block__51__printMatrix__block__57__for__58__i 1
                           ASSIGN __res __main__block__51__printMatrix__block__57__for__58__i
                           PUSH __res
                     __forcond__58:
                     // Condition
                        // Less Than
                           // LHS
                              // Identifier - i
                                 PUSH __main__block__51__printMatrix__block__57__for__58__i
                           // RHS
                              // Identifier - r
                                 PUSH __main__block__51__printMatrix__r
                           POP __rhs
                           POP __lhs
                           LT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endfor__58
                     // Body
                        //------------------------------------------------
                        // Code Block
                           //---------------------------------------------
                           // For-Loop
                           // Init
                              // Assignment - '='
                                 // RHS
                                    // Int Literal
                                       PUSH 0
                                 // LHS
                                    // Variable Declaration
                                       ASSIGN __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j 0
                                 POP __rhs
                                 ASSIGN __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j __rhs
                                 PUSH __rhs
                           JUMP __forcond__60
                           __for__60:
                              // Update
                                 // Pre-Increment
                                    // RHS
                                       // Identifier - j
                                          PUSH __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j
                                    POP __rhs
                                    ADD __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j 1
                                    ASSIGN __res __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j
                                    PUSH __res
                              __forcond__60:
                              // Condition
                                 // Less Than
                                    // LHS
                                       // Identifier - j
                                          PUSH __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j
                                    // RHS
                                       // Identifier - c
                                          PUSH __main__block__51__printMatrix__c
                                    POP __rhs
                                    POP __lhs
                                    LT __res __lhs __rhs
                                    PUSH __res
                                 POP __cond
                                 CMP __cond 0
                                 JEQ __endfor__60
                              // Body
                                 //---------------------------------------
                                 // Code Block
                                    // Function Call - print(float) -> void
                                       // Arguments
                                          // Subscript
                                             // LHS
                                                // Subscript
                                                   // LHS
                                                      // Identifier - mat
                                                         PUSH __main__block__51__printMatrix__mat
                                                   // OFFSET
                                                      // Identifier - i
                                                         PUSH __main__block__51__printMatrix__block__57__for__58__i
                                                   POP __offset
                                                   POP __pointer
                                                   PUSH __pointer[__offset]
                                             // OFFSET
                                                // Identifier - j
                                                   PUSH __main__block__51__printMatrix__block__57__for__58__block__59__for__60__j
                                             POP __offset
                                             POP __pointer
                                             PUSH __pointer[__offset]
                                          POP __arg0
                                       // Pushing args in reverse order
                                       PUSH __arg0
                                       // *** print
                                       CALL print__float
                                       // Remove args
                                       POP __void
                                       RESPONSE __retval
                                       PUSH __retval
                                    // Statement results can be ignored
                                    POP __void
                                    // Function Call - print(char) -> void
                                       // Arguments
                                          // Char Literal
                                             PUSH ' '
                                          POP __arg0
                                       // Pushing args in reverse order
                                       PUSH __arg0
                                       // *** print
                                       CALL print__char
                                       // Remove args
                                       POP __void
                                       RESPONSE __retval
                                       PUSH __retval
                                    // Statement results can be ignored
                                    POP __void
                                 //---------------------------------------
                              // Repeat
                              JUMP __for__60
                              // End of For
                              __endfor__60:
                           //---------------------------------------------
                           // Function Call - println() -> void
                              // Arguments
                              // Pushing args in reverse order
                              // *** println
                              CALL println
                              // Remove args
                              RESPONSE __retval
                              PUSH __retval
                           // Statement results can be ignored
                           POP __void
                        //------------------------------------------------
                     // Repeat
                     JUMP __for__58
                     // End of For
                     __endfor__58:
                  //------------------------------------------------------
               //---------------------------------------------------------
            RETURN 0
         __end____main__block__51____printMatrix__float____float__2__int__int:
         // End Function Declaration - __main__block__51____printMatrix__float____float__2__int__int
         //===============================================================

   // End Function Template - 
   //=====================================================================

   //=====================================================================
   // Function Declaration - matmul_square(int[][], int[][], int[][], int) -> void
   JUMP __end____main__block__51____matmul_square__int__2__int__2__int__2__int
   __main__block__51____matmul_square__int__2__int__2__int__2__int:
      // Parameters
         // Param: A
         STACKGET __main__block__51__matmul_square__A 0
         // Param: B
         STACKGET __main__block__51__matmul_square__B 1
         // Param: C
         STACKGET __main__block__51__matmul_square__C 2
         // Param: n
         STACKGET __main__block__51__matmul_square__n 3
      // Body
         //---------------------------------------------------------------
         // Code Block
            //------------------------------------------------------------
            // For-Loop
            // Init
               // Assignment - '='
                  // RHS
                     // Int Literal
                        PUSH 0
                  // LHS
                     // Variable Declaration
                        ASSIGN __main__block__51__matmul_square__block__62__for__63__i 0
                  POP __rhs
                  ASSIGN __main__block__51__matmul_square__block__62__for__63__i __rhs
                  PUSH __rhs
            JUMP __forcond__63
            __for__63:
               // Update
                  // Pre-Increment
                     // RHS
                        // Identifier - i
                           PUSH __main__block__51__matmul_square__block__62__for__63__i
                     POP __rhs
                     ADD __main__block__51__matmul_square__block__62__for__63__i __main__block__51__matmul_square__block__62__for__63__i 1
                     ASSIGN __res __main__block__51__matmul_square__block__62__for__63__i
                     PUSH __res
               __forcond__63:
               // Condition
                  // Less Than
                     // LHS
                        // Identifier - i
                           PUSH __main__block__51__matmul_square__block__62__for__63__i
                     // RHS
                        // Identifier - n
                           PUSH __main__block__51__matmul_square__n
                     POP __rhs
                     POP __lhs
                     LT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endfor__63
               // Body
                  //------------------------------------------------------
                  // Code Block
                     //---------------------------------------------------
                     // For-Loop
                     // Init
                        // Assignment - '='
                           // RHS
                              // Int Literal
                                 PUSH 0
                           // LHS
                              // Variable Declaration
                                 ASSIGN __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j 0
                           POP __rhs
                           ASSIGN __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j __rhs
                           PUSH __rhs
                     JUMP __forcond__65
                     __for__65:
                        // Update
                           // Pre-Increment
                              // RHS
                                 // Identifier - j
                                    PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j
                              POP __rhs
                              ADD __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j 1
                              ASSIGN __res __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j
                              PUSH __res
                        __forcond__65:
                        // Condition
                           // Less Than
                              // LHS
                                 // Identifier - j
                                    PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j
                              // RHS
                                 // Identifier - n
                                    PUSH __main__block__51__matmul_square__n
                              POP __rhs
                              POP __lhs
                              LT __res __lhs __rhs
                              PUSH __res
                           POP __cond
                           CMP __cond 0
                           JEQ __endfor__65
                        // Body
                           //---------------------------------------------
                           // Code Block
                              //------------------------------------------
                              // For-Loop
                              // Init
                                 // Assignment - '='
                                    // RHS
                                       // Int Literal
                                          PUSH 0
                                    // LHS
                                       // Variable Declaration
                                          ASSIGN __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k 0
                                    POP __rhs
                                    ASSIGN __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k __rhs
                                    PUSH __rhs
                              JUMP __forcond__67
                              __for__67:
                                 // Update
                                    // Pre-Increment
                                       // RHS
                                          // Identifier - k
                                             PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k
                                       POP __rhs
                                       ADD __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k 1
                                       ASSIGN __res __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k
                                       PUSH __res
                                 __forcond__67:
                                 // Condition
                                    // Less Than
                                       // LHS
                                          // Identifier - k
                                             PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k
                                       // RHS
                                          // Identifier - n
                                             PUSH __main__block__51__matmul_square__n
                                       POP __rhs
                                       POP __lhs
                                       LT __res __lhs __rhs
                                       PUSH __res
                                    POP __cond
                                    CMP __cond 0
                                    JEQ __endfor__67
                                 // Body
                                    //------------------------------------
                                    // Code Block
                                       // Assignment - '+='
                                          // RHS
                                             // Multiplication
                                                // LHS
                                                   // Subscript
                                                      // LHS
                                                         // Subscript
                                                            // LHS
                                                               // Identifier - A
                                                                  PUSH __main__block__51__matmul_square__A
                                                            // OFFSET
                                                               // Identifier - i
                                                                  PUSH __main__block__51__matmul_square__block__62__for__63__i
                                                            POP __offset
                                                            POP __pointer
                                                            PUSH __pointer[__offset]
                                                      // OFFSET
                                                         // Identifier - k
                                                            PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k
                                                      POP __offset
                                                      POP __pointer
                                                      PUSH __pointer[__offset]
                                                // RHS
                                                   // Subscript
                                                      // LHS
                                                         // Subscript
                                                            // LHS
                                                               // Identifier - B
                                                                  PUSH __main__block__51__matmul_square__B
                                                            // OFFSET
                                                               // Identifier - k
                                                                  PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__block__66__for__67__k
                                                            POP __offset
                                                            POP __pointer
                                                            PUSH __pointer[__offset]
                                                      // OFFSET
                                                         // Identifier - j
                                                            PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j
                                                      POP __offset
                                                      POP __pointer
                                                      PUSH __pointer[__offset]
                                                POP __rhs
                                                POP __lhs
                                                MULTIPLY __res __lhs __rhs
                                                PUSH __res
                                          // LHS
                                             // Subscript assignment
                                                // LHS
                                                   // Subscript
                                                      // LHS
                                                         // Identifier - C
                                                            PUSH __main__block__51__matmul_square__C
                                                      // OFFSET
                                                         // Identifier - i
                                                            PUSH __main__block__51__matmul_square__block__62__for__63__i
                                                      POP __offset
                                                      POP __pointer
                                                      PUSH __pointer[__offset]
                                                // OFFSET
                                                   // Identifier - j
                                                      PUSH __main__block__51__matmul_square__block__62__for__63__block__64__for__65__j
                                                POP __offset
                                                POP __pointer
                                          POP __rhs
                                          ADD __pointer[__offset] __pointer[__offset] __rhs
                                          PUSH __pointer[__offset]
                                       // Statement results can be ignored
                                       POP __void
                                    //------------------------------------
                                 // Repeat
                                 JUMP __for__67
                                 // End of For
                                 __endfor__67:
                              //------------------------------------------
                           //---------------------------------------------
                        // Repeat
                        JUMP __for__65
                        // End of For
                        __endfor__65:
                     //---------------------------------------------------
                  //------------------------------------------------------
               // Repeat
               JUMP __for__63
               // End of For
               __endfor__63:
            //------------------------------------------------------------
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__51____matmul_square__int__2__int__2__int__2__int:
   // End Function Declaration - __main__block__51____matmul_square__int__2__int__2__int__2__int
   //=====================================================================

   //=====================================================================
   // Function Declaration - mat_add(int[][], int[][], int[][], int) -> void
   JUMP __end____main__block__51____mat_add__int__2__int__2__int__2__int
   __main__block__51____mat_add__int__2__int__2__int__2__int:
      // Parameters
         // Param: A
         STACKGET __main__block__51__mat_add__A 0
         // Param: B
         STACKGET __main__block__51__mat_add__B 1
         // Param: C
         STACKGET __main__block__51__mat_add__C 2
         // Param: n
         STACKGET __main__block__51__mat_add__n 3
      // Body
         //---------------------------------------------------------------
         // Code Block
            //------------------------------------------------------------
            // For-Loop
            // Init
               // Assignment - '='
                  // RHS
                     // Int Literal
                        PUSH 0
                  // LHS
                     // Variable Declaration
                        ASSIGN __main__block__51__mat_add__block__69__for__70__i 0
                  POP __rhs
                  ASSIGN __main__block__51__mat_add__block__69__for__70__i __rhs
                  PUSH __rhs
            JUMP __forcond__70
            __for__70:
               // Update
                  // Pre-Increment
                     // RHS
                        // Identifier - i
                           PUSH __main__block__51__mat_add__block__69__for__70__i
                     POP __rhs
                     ADD __main__block__51__mat_add__block__69__for__70__i __main__block__51__mat_add__block__69__for__70__i 1
                     ASSIGN __res __main__block__51__mat_add__block__69__for__70__i
                     PUSH __res
               __forcond__70:
               // Condition
                  // Less Than
                     // LHS
                        // Identifier - i
                           PUSH __main__block__51__mat_add__block__69__for__70__i
                     // RHS
                        // Identifier - n
                           PUSH __main__block__51__mat_add__n
                     POP __rhs
                     POP __lhs
                     LT __res __lhs __rhs
                     PUSH __res
                  POP __cond
                  CMP __cond 0
                  JEQ __endfor__70
               // Body
                  //------------------------------------------------------
                  // Code Block
                     //---------------------------------------------------
                     // For-Loop
                     // Init
                        // Assignment - '='
                           // RHS
                              // Int Literal
                                 PUSH 0
                           // LHS
                              // Variable Declaration
                                 ASSIGN __main__block__51__mat_add__block__69__for__70__block__71__for__72__j 0
                           POP __rhs
                           ASSIGN __main__block__51__mat_add__block__69__for__70__block__71__for__72__j __rhs
                           PUSH __rhs
                     JUMP __forcond__72
                     __for__72:
                        // Update
                           // Pre-Increment
                              // RHS
                                 // Identifier - j
                                    PUSH __main__block__51__mat_add__block__69__for__70__block__71__for__72__j
                              POP __rhs
                              ADD __main__block__51__mat_add__block__69__for__70__block__71__for__72__j __main__block__51__mat_add__block__69__for__70__block__71__for__72__j 1
                              ASSIGN __res __main__block__51__mat_add__block__69__for__70__block__71__for__72__j
                              PUSH __res
                        __forcond__72:
                        // Condition
                           // Less Than
                              // LHS
                                 // Identifier - j
                                    PUSH __main__block__51__mat_add__block__69__for__70__block__71__for__72__j
                              // RHS
                                 // Identifier - n
                                    PUSH __main__block__51__mat_add__n
                              POP __rhs
                              POP __lhs
                              LT __res __lhs __rhs
                              PUSH __res
                           POP __cond
                           CMP __cond 0
                           JEQ __endfor__72
                        // Body
                           //---------------------------------------------
                           // Code Block
                              // Assignment - '='
                                 // RHS
                                    // Addition
                                       // LHS
                                          // Subscript
                                             // LHS
                                                // Subscript
                                                   // LHS
                                                      // Identifier - A
                                                         PUSH __main__block__51__mat_add__A
                                                   // OFFSET
                                                      // Identifier - i
                                                         PUSH __main__block__51__mat_add__block__69__for__70__i
                                                   POP __offset
                                                   POP __pointer
                                                   PUSH __pointer[__offset]
                                             // OFFSET
                                                // Identifier - j
                                                   PUSH __main__block__51__mat_add__block__69__for__70__block__71__for__72__j
                                             POP __offset
                                             POP __pointer
                                             PUSH __pointer[__offset]
                                       // RHS
                                          // Subscript
                                             // LHS
                                                // Subscript
                                                   // LHS
                                                      // Identifier - B
                                                         PUSH __main__block__51__mat_add__B
                                                   // OFFSET
                                                      // Identifier - i
                                                         PUSH __main__block__51__mat_add__block__69__for__70__i
                                                   POP __offset
                                                   POP __pointer
                                                   PUSH __pointer[__offset]
                                             // OFFSET
                                                // Identifier - j
                                                   PUSH __main__block__51__mat_add__block__69__for__70__block__71__for__72__j
                                             POP __offset
                                             POP __pointer
                                             PUSH __pointer[__offset]
                                       POP __rhs
                                       POP __lhs
                                       ADD __res __lhs __rhs
                                       PUSH __res
                                 // LHS
                                    // Subscript assignment
                                       // LHS
                                          // Subscript
                                             // LHS
                                                // Identifier - C
                                                   PUSH __main__block__51__mat_add__C
                                             // OFFSET
                                                // Identifier - i
                                                   PUSH __main__block__51__mat_add__block__69__for__70__i
                                             POP __offset
                                             POP __pointer
                                             PUSH __pointer[__offset]
                                       // OFFSET
                                          // Identifier - j
                                             PUSH __main__block__51__mat_add__block__69__for__70__block__71__for__72__j
                                       POP __offset
                                       POP __pointer
                                 POP __rhs
                                 ASSIGN __pointer[__offset] __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                           //---------------------------------------------
                        // Repeat
                        JUMP __for__72
                        // End of For
                        __endfor__72:
                     //---------------------------------------------------
                  //------------------------------------------------------
               // Repeat
               JUMP __for__70
               // End of For
               __endfor__70:
            //------------------------------------------------------------
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__51____mat_add__int__2__int__2__int__2__int:
   // End Function Declaration - __main__block__51____mat_add__int__2__int__2__int__2__int
   //=====================================================================

   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 1
               // Int Literal
                  PUSH 2
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 3
               // Int Literal
                  PUSH 4
               // Int Literal
                  PUSH 5
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 6
               // Int Literal
                  PUSH 7
               // Int Literal
                  PUSH 8
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__51__A 0
      POP __rhs
      ASSIGN __main__block__51__A __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 8
               // Int Literal
                  PUSH 7
               // Int Literal
                  PUSH 6
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 5
               // Int Literal
                  PUSH 4
               // Int Literal
                  PUSH 3
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 2
               // Int Literal
                  PUSH 1
               // Int Literal
                  PUSH 0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__51__B 0
      POP __rhs
      ASSIGN __main__block__51__B __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 0
               // Int Literal
                  PUSH 0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__51__C 0
      POP __rhs
      ASSIGN __main__block__51__C __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'A'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printMatrix<:int:>(int[][], int, int) -> void
      // Arguments
         // Identifier - A
            PUSH __main__block__51__A
         // Int Literal
            PUSH 3
         // Int Literal
            PUSH 3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** printMatrix
      CALL __main__block__51____printMatrix__int____int__2__int__int
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'B'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printMatrix<:int:>(int[][], int, int) -> void
      // Arguments
         // Identifier - B
            PUSH __main__block__51__B
         // Int Literal
            PUSH 3
         // Int Literal
            PUSH 3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** printMatrix
      CALL __main__block__51____printMatrix__int____int__2__int__int
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'C'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printMatrix<:int:>(int[][], int, int) -> void
      // Arguments
         // Identifier - C
            PUSH __main__block__51__C
         // Int Literal
            PUSH 3
         // Int Literal
            PUSH 3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** printMatrix
      CALL __main__block__51____printMatrix__int____int__2__int__int
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 13
            ASSIGN __str[0] 'C'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] 'A'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '('
            ASSIGN __str[7] 'd'
            ASSIGN __str[8] 'o'
            ASSIGN __str[9] 't'
            ASSIGN __str[10] ')'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] 'B'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - matmul_square(int[][], int[][], int[][], int) -> void
      // Arguments
         // Identifier - A
            PUSH __main__block__51__A
         // Identifier - B
            PUSH __main__block__51__B
         // Identifier - C
            PUSH __main__block__51__C
         // Int Literal
            PUSH 3
         POP __arg3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg3
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** matmul_square
      CALL __main__block__51____matmul_square__int__2__int__2__int__2__int
      // Remove args
      POP __void
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'C'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printMatrix<:int:>(int[][], int, int) -> void
      // Arguments
         // Identifier - C
            PUSH __main__block__51__C
         // Int Literal
            PUSH 3
         // Int Literal
            PUSH 3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** printMatrix
      CALL __main__block__51____printMatrix__int____int__2__int__int
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Int Literal
               PUSH 3
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Variable Declaration
            ASSIGN __main__block__51__D 0
      POP __rhs
      ASSIGN __main__block__51__D __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Int Literal
               PUSH 3
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Subscript assignment
            // LHS
               // Identifier - D
                  PUSH __main__block__51__D
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
      POP __rhs
      ASSIGN __pointer[__offset] __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Int Literal
               PUSH 3
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Subscript assignment
            // LHS
               // Identifier - D
                  PUSH __main__block__51__D
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
      POP __rhs
      ASSIGN __pointer[__offset] __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Allocator
            // Int Literal
               PUSH 3
            POP __size
            MALLOC __ptr __size
            PUSH __ptr
      // LHS
         // Subscript assignment
            // LHS
               // Identifier - D
                  PUSH __main__block__51__D
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
      POP __rhs
      ASSIGN __pointer[__offset] __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] 'D'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            ASSIGN __str[4] 'A'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '+'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'B'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - mat_add(int[][], int[][], int[][], int) -> void
      // Arguments
         // Identifier - A
            PUSH __main__block__51__A
         // Identifier - B
            PUSH __main__block__51__B
         // Identifier - D
            PUSH __main__block__51__D
         // Int Literal
            PUSH 3
         POP __arg3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg3
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** mat_add
      CALL __main__block__51____mat_add__int__2__int__2__int__2__int
      // Remove args
      POP __void
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 4
            ASSIGN __str[0] 'D'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printMatrix<:int:>(int[][], int, int) -> void
      // Arguments
         // Identifier - D
            PUSH __main__block__51__D
         // Int Literal
            PUSH 3
         // Int Literal
            PUSH 3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** printMatrix
      CALL __main__block__51____printMatrix__int____int__2__int__int
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Array Constructor
            // Elements
            // Array Constructor
               // Elements
               // Float Literal
                  PUSH 1.0
               // Float Literal
                  PUSH 0.0
               // Float Literal
                  PUSH 0.0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Float Literal
                  PUSH 0.0
               // Float Literal
                  PUSH 1.0
               // Float Literal
                  PUSH 0.0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            // Array Constructor
               // Elements
               // Float Literal
                  PUSH 0.0
               // Float Literal
                  PUSH 0.0
               // Float Literal
                  PUSH 1.0
               POP __elem2
               POP __elem1
               POP __elem0
               MALLOC __list 3
               ASSIGN __list[0] __elem0
               ASSIGN __list[1] __elem1
               ASSIGN __list[2] __elem2
               PUSH __list
            POP __elem2
            POP __elem1
            POP __elem0
            MALLOC __list 3
            ASSIGN __list[0] __elem0
            ASSIGN __list[1] __elem1
            ASSIGN __list[2] __elem2
            PUSH __list
      // LHS
         // Variable Declaration
            ASSIGN __main__block__51__mat 0
      POP __rhs
      ASSIGN __main__block__51__mat __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Subscript
            // LHS
               // Subscript
                  // LHS
                     // Identifier - mat
                        PUSH __main__block__51__mat
                  // OFFSET
                     // Int Literal
                        PUSH 0
                  POP __offset
                  POP __pointer
                  PUSH __pointer[__offset]
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - printMatrix<:float:>(float[][], int, int) -> void
      // Arguments
         // Identifier - mat
            PUSH __main__block__51__mat
         // Int Literal
            PUSH 3
         // Int Literal
            PUSH 3
         POP __arg2
         POP __arg1
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      // *** printMatrix
      CALL __main__block__51____printMatrix__float____float__2__int__int
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Free Operator
      // RHS
         // Subscript
            // LHS
               // Identifier - mat
                  PUSH __main__block__51__mat
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
      // Free array
      POP __array
      FREE __array
      PUSH __array
   // Statement results can be ignored
   POP __void
   // Free Operator
      // RHS
         // Subscript
            // LHS
               // Identifier - mat
                  PUSH __main__block__51__mat
            // OFFSET
               // Int Literal
                  PUSH 1
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
      // Free array
      POP __array
      FREE __array
      PUSH __array
   // Statement results can be ignored
   POP __void
   // Free Operator
      // RHS
         // Subscript
            // LHS
               // Identifier - mat
                  PUSH __main__block__51__mat
            // OFFSET
               // Int Literal
                  PUSH 2
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
      // Free array
      POP __array
      FREE __array
      PUSH __array
   // Statement results can be ignored
   POP __void
   // Free Operator
      // RHS
         // Identifier - mat
            PUSH __main__block__51__mat
      // Free array
      POP __array
      FREE __array
      PUSH __array
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 23
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'C'
         ASSIGN __str[13] 'l'
         ASSIGN __str[14] 'a'
         ASSIGN __str[15] 's'
         ASSIGN __str[16] 's'
         ASSIGN __str[17] 'e'
         ASSIGN __str[18] 's'
         ASSIGN __str[19] ' '
         ASSIGN __str[20] '='
         ASSIGN __str[21] '='
         ASSIGN __str[22] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   //=====================================================================
   // Class Declaration - __main__block__74____Vector2D inherits __main__Object
      // Creating Dispatch Table
         MALLOC __dtable____main__block__74____Vector2D 3
         // Populate Dispatch Table
         ASSIGN __dtable____main__block__74____Vector2D[0] __method____main__block__74____Vector2D____set__float__float
         ASSIGN __dtable____main__block__74____Vector2D[1] __method____main__block__74____Vector2D____set__Vector2D
         ASSIGN __dtable____main__block__74____Vector2D[2] __method____main__block__74____Vector2D____add__Vector2D
      //------------------------------------------------------------------
      // Field - float Vector2D::x
      ASSIGN __field____main__block__74____Vector2D____x 1
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Field - float Vector2D::y
      ASSIGN __field____main__block__74____Vector2D____y 2
      //------------------------------------------------------------------
   // skip over class methods
   JUMP __endclass____main__block__74____Vector2D
      //------------------------------------------------------------------
      // Constructor Declaration - Vector2D::Vector2D(float, float) -> Vector2D
      JUMP __end__ctor____main__block__74____Vector2D____Vector2D__float__float
      __ctor____main__block__74____Vector2D____Vector2D__float__float:
         // Creating Class Instance
            MALLOC __this 3
            // Add Dispatch Table
            ASSIGN __this[0] __dtable____main__block__74____Vector2D
         // Parameters
            // Param: x
            STACKGET __main__block__74____Vector2D__Vector2D__x 0
            // Param: y
            STACKGET __main__block__74____Vector2D__Vector2D__y 1
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '='
                  // RHS
                     // Identifier - x
                        PUSH __main__block__74____Vector2D__Vector2D__x
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____x
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Identifier - y
                        PUSH __main__block__74____Vector2D__Vector2D__y
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____y
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN __this
      __end__ctor____main__block__74____Vector2D____Vector2D__float__float:
      // End Constructor Declaration - __ctor____main__block__74____Vector2D____Vector2D__float__float
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector2D::set(float, float) -> void
      JUMP __end__method____main__block__74____Vector2D____set__float__float
      __method____main__block__74____Vector2D____set__float__float:
         // Class Instance
            STACKGET __this 0
         // Parameters
            // Param: x
            STACKGET __main__block__74____Vector2D__set__x 1
            // Param: y
            STACKGET __main__block__74____Vector2D__set__y 2
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '='
                  // RHS
                     // Identifier - x
                        PUSH __main__block__74____Vector2D__set__x
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____x
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Identifier - y
                        PUSH __main__block__74____Vector2D__set__y
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____y
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN 0
      __end__method____main__block__74____Vector2D____set__float__float:
      // End Method Declaration - __method____main__block__74____Vector2D____set__float__float
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector2D::set(Vector2D) -> void
      JUMP __end__method____main__block__74____Vector2D____set__Vector2D
      __method____main__block__74____Vector2D____set__Vector2D:
         // Class Instance
            STACKGET __this 0
         // Parameters
            // Param: other
            STACKGET __main__block__74____Vector2D__set__other 1
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '='
                  // RHS
                     // Member Accessor
                        // LHS
                           // Identifier - other
                              PUSH __main__block__74____Vector2D__set__other
                        // RHS
                           PUSH __field____main__block__74____Vector2D____x
                        POP __child
                        POP __parent
                        PUSH __parent[__child]
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____x
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Member Accessor
                        // LHS
                           // Identifier - other
                              PUSH __main__block__74____Vector2D__set__other
                        // RHS
                           PUSH __field____main__block__74____Vector2D____y
                        POP __child
                        POP __parent
                        PUSH __parent[__child]
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____y
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN 0
      __end__method____main__block__74____Vector2D____set__Vector2D:
      // End Method Declaration - __method____main__block__74____Vector2D____set__Vector2D
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector2D::add(Vector2D) -> void
      JUMP __end__method____main__block__74____Vector2D____add__Vector2D
      __method____main__block__74____Vector2D____add__Vector2D:
         // Class Instance
            STACKGET __this 0
         // Parameters
            // Param: other
            STACKGET __main__block__74____Vector2D__add__other 1
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '+='
                  // RHS
                     // Member Accessor
                        // LHS
                           // Identifier - other
                              PUSH __main__block__74____Vector2D__add__other
                        // RHS
                           PUSH __field____main__block__74____Vector2D____x
                        POP __child
                        POP __parent
                        PUSH __parent[__child]
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____x
                        POP __child
                        POP __parent
                        POP __rhs
                  ADD __parent[__child] __parent[__child] __rhs
                  PUSH __parent[__child]
               // Statement results can be ignored
               POP __void
               // Assignment - '+='
                  // RHS
                     // Member Accessor
                        // LHS
                           // Identifier - other
                              PUSH __main__block__74____Vector2D__add__other
                        // RHS
                           PUSH __field____main__block__74____Vector2D____y
                        POP __child
                        POP __parent
                        PUSH __parent[__child]
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector2D____y
                        POP __child
                        POP __parent
                        POP __rhs
                  ADD __parent[__child] __parent[__child] __rhs
                  PUSH __parent[__child]
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN 0
      __end__method____main__block__74____Vector2D____add__Vector2D:
      // End Method Declaration - __method____main__block__74____Vector2D____add__Vector2D
      //------------------------------------------------------------------

   __endclass____main__block__74____Vector2D:
   // End Class Declaration - __main__block__74____Vector2D
   //=====================================================================

   // Assignment - '='
      // RHS
         // Constructor Call - Vector2D::Vector2D(float, float) -> Vector2D
            // Arguments
               // Float Literal
                  PUSH 0.5
               // Float Literal
                  PUSH 3.1415
               POP __arg1
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg1
            PUSH __arg0
            CALL __ctor____main__block__74____Vector2D____Vector2D__float__float
            // Remove args
            POP __void
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__74__v 0
      POP __rhs
      ASSIGN __main__block__74__v __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 6
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] 'x'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v
                  PUSH __main__block__74__v
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 6
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] 'y'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v
                  PUSH __main__block__74__v
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 21
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] 's'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 't'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '('
            ASSIGN __str[7] '4'
            ASSIGN __str[8] '2'
            ASSIGN __str[9] '.'
            ASSIGN __str[10] '0'
            ASSIGN __str[11] ','
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '0'
            ASSIGN __str[14] '.'
            ASSIGN __str[15] '0'
            ASSIGN __str[16] '0'
            ASSIGN __str[17] '4'
            ASSIGN __str[18] '3'
            ASSIGN __str[19] ')'
            ASSIGN __str[20] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector2D::set(float, float) -> void
      // LHS
         // Identifier - v
            PUSH __main__block__74__v
      // RHS
      // Arguments
         // Float Literal
            PUSH 42.0
         // Float Literal
            PUSH 0.0043
         POP __arg1
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg1
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector2D____set__float__float
      POP __void
      // Remove args
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 6
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] 'x'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v
                  PUSH __main__block__74__v
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 6
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '.'
            ASSIGN __str[2] 'y'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] '='
            ASSIGN __str[5] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v
                  PUSH __main__block__74__v
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Constructor Call - Vector2D::Vector2D(float, float) -> Vector2D
            // Arguments
               // Float Literal
                  PUSH 0.5
               // Float Literal
                  PUSH 3.1415
               POP __arg1
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg1
            PUSH __arg0
            CALL __ctor____main__block__74____Vector2D____Vector2D__float__float
            // Remove args
            POP __void
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__74__v2 0
      POP __rhs
      ASSIGN __main__block__74__v2 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'x'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'y'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] 'e'
            ASSIGN __str[5] 't'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] 'v'
            ASSIGN __str[9] ')'
            ASSIGN __str[10] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector2D::set(Vector2D) -> void
      // LHS
         // Identifier - v2
            PUSH __main__block__74__v2
      // RHS
      // Arguments
         // Identifier - v
            PUSH __main__block__74__v
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector2D____set__Vector2D
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'x'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'y'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 'd'
            ASSIGN __str[5] 'd'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] 'v'
            ASSIGN __str[9] ')'
            ASSIGN __str[10] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector2D::add(Vector2D) -> void
      // LHS
         // Identifier - v2
            PUSH __main__block__74__v2
      // RHS
      // Arguments
         // Identifier - v
            PUSH __main__block__74__v
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector2D____add__Vector2D
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'x'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'y'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 'd'
            ASSIGN __str[5] 'd'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] 'v'
            ASSIGN __str[9] ')'
            ASSIGN __str[10] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector2D::add(Vector2D) -> void
      // LHS
         // Identifier - v2
            PUSH __main__block__74__v2
      // RHS
      // Arguments
         // Identifier - v
            PUSH __main__block__74__v
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector2D____add__Vector2D
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'x'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'y'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 11
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'a'
            ASSIGN __str[4] 'd'
            ASSIGN __str[5] 'd'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] 'v'
            ASSIGN __str[9] ')'
            ASSIGN __str[10] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector2D::add(Vector2D) -> void
      // LHS
         // Identifier - v2
            PUSH __main__block__74__v2
      // RHS
      // Arguments
         // Identifier - v
            PUSH __main__block__74__v
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector2D____add__Vector2D
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'x'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____x
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 7
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '2'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 'y'
            ASSIGN __str[4] ' '
            ASSIGN __str[5] '='
            ASSIGN __str[6] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - v2
                  PUSH __main__block__74__v2
            // RHS
               PUSH __field____main__block__74____Vector2D____y
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //=====================================================================
   // Class Declaration - __main__block__74____Vector3D inherits __main__block__74____Vector2D
      // Creating Dispatch Table
         MALLOC __dtable____main__block__74____Vector3D 5
         // Populate Dispatch Table
         ASSIGN __dtable____main__block__74____Vector3D[0] __method____main__block__74____Vector2D____set__float__float
         ASSIGN __dtable____main__block__74____Vector3D[1] __method____main__block__74____Vector2D____set__Vector2D
         ASSIGN __dtable____main__block__74____Vector3D[2] __method____main__block__74____Vector2D____add__Vector2D
         ASSIGN __dtable____main__block__74____Vector3D[3] __method____main__block__74____Vector3D____set__Vector3D
         ASSIGN __dtable____main__block__74____Vector3D[4] __method____main__block__74____Vector3D____set__float__float__float
      //------------------------------------------------------------------
      // Field - float Vector3D::x
      // Inherited from Vector2D
      ASSIGN __field____main__block__74____Vector3D____x 1
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Field - float Vector3D::y
      // Inherited from Vector2D
      ASSIGN __field____main__block__74____Vector3D____y 2
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Field - float Vector3D::z
      ASSIGN __field____main__block__74____Vector3D____z 3
      //------------------------------------------------------------------
   // skip over class methods
   JUMP __endclass____main__block__74____Vector3D
      //------------------------------------------------------------------
      // Constructor Declaration - Vector3D::Vector3D(float, float, float) -> Vector3D
      JUMP __end__ctor____main__block__74____Vector3D____Vector3D__float__float__float
      __ctor____main__block__74____Vector3D____Vector3D__float__float__float:
         // Creating Class Instance
            MALLOC __this 4
            // Add Dispatch Table
            ASSIGN __this[0] __dtable____main__block__74____Vector3D
         // Parameters
            // Param: x
            STACKGET __main__block__74____Vector3D__Vector3D__x 0
            // Param: y
            STACKGET __main__block__74____Vector3D__Vector3D__y 1
            // Param: z
            STACKGET __main__block__74____Vector3D__Vector3D__z 2
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '='
                  // RHS
                     // Identifier - x
                        PUSH __main__block__74____Vector3D__Vector3D__x
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____x
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Identifier - y
                        PUSH __main__block__74____Vector3D__Vector3D__y
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____y
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Identifier - z
                        PUSH __main__block__74____Vector3D__Vector3D__z
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____z
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN __this
      __end__ctor____main__block__74____Vector3D____Vector3D__float__float__float:
      // End Constructor Declaration - __ctor____main__block__74____Vector3D____Vector3D__float__float__float
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector3D::set(float, float) -> void
      // Inherited from Vector2D
      JUMP __end__method____main__block__74____Vector3D____set__float__float
      __method____main__block__74____Vector3D____set__float__float:
         // Jump to Vector2D's version
         JUMP __method____main__block__74____Vector2D____set__float__float
      __end__method____main__block__74____Vector3D____set__float__float:
      // End Method Declaration - __method____main__block__74____Vector3D____set__float__float
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector3D::set(Vector2D) -> void
      // Inherited from Vector2D
      JUMP __end__method____main__block__74____Vector3D____set__Vector2D
      __method____main__block__74____Vector3D____set__Vector2D:
         // Jump to Vector2D's version
         JUMP __method____main__block__74____Vector2D____set__Vector2D
      __end__method____main__block__74____Vector3D____set__Vector2D:
      // End Method Declaration - __method____main__block__74____Vector3D____set__Vector2D
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector3D::add(Vector2D) -> void
      // Inherited from Vector2D
      JUMP __end__method____main__block__74____Vector3D____add__Vector2D
      __method____main__block__74____Vector3D____add__Vector2D:
         // Jump to Vector2D's version
         JUMP __method____main__block__74____Vector2D____add__Vector2D
      __end__method____main__block__74____Vector3D____add__Vector2D:
      // End Method Declaration - __method____main__block__74____Vector3D____add__Vector2D
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector3D::set(Vector3D) -> void
      JUMP __end__method____main__block__74____Vector3D____set__Vector3D
      __method____main__block__74____Vector3D____set__Vector3D:
         // Class Instance
            STACKGET __this 0
         // Parameters
            // Param: other
            STACKGET __main__block__74____Vector3D__set__other 1
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '='
                  // RHS
                     // Constructor Call - Vector2D::Vector2D(float, float) -> Vector2D
                        // Arguments
                           // Member Accessor
                              // LHS
                                 // Identifier - other
                                    PUSH __main__block__74____Vector3D__set__other
                              // RHS
                                 PUSH __field____main__block__74____Vector3D____x
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           // Member Accessor
                              // LHS
                                 // Identifier - other
                                    PUSH __main__block__74____Vector3D__set__other
                              // RHS
                                 PUSH __field____main__block__74____Vector3D____y
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __arg1
                           POP __arg0
                        // Pushing args in reverse order
                        PUSH __arg1
                        PUSH __arg0
                        CALL __ctor____main__block__74____Vector2D____Vector2D__float__float
                        // Remove args
                        POP __void
                        POP __void
                        RESPONSE __retval
                        PUSH __retval
                  // LHS
                     // Variable Declaration
                        ASSIGN __main__block__74____Vector3D__set__block__80__other2d 0
                  POP __rhs
                  ASSIGN __main__block__74____Vector3D__set__block__80__other2d __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Method Call - Vector3D::set(Vector2D) -> void
                  // LHS
                     // This keyword
                        PUSH __this
                  // RHS
                  // Arguments
                     // Identifier - other2d
                        PUSH __main__block__74____Vector3D__set__block__80__other2d
                     POP __arg0
                  POP __obj
                  // Pushing args in reverse order
                  PUSH __arg0
                  PUSH __obj
                  CALL __method____main__block__74____Vector3D____set__Vector2D
                  POP __void
                  // Remove args
                  POP __void
                  RESPONSE __retval
                  PUSH __retval
               // Statement results can be ignored
               POP __void
               // Free Operator
                  // RHS
                     // Identifier - other2d
                        PUSH __main__block__74____Vector3D__set__block__80__other2d
                  // Free array
                  POP __array
                  FREE __array
                  PUSH __array
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Member Accessor
                        // LHS
                           // Identifier - other
                              PUSH __main__block__74____Vector3D__set__other
                        // RHS
                           PUSH __field____main__block__74____Vector3D____z
                        POP __child
                        POP __parent
                        PUSH __parent[__child]
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____z
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN 0
      __end__method____main__block__74____Vector3D____set__Vector3D:
      // End Method Declaration - __method____main__block__74____Vector3D____set__Vector3D
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Vector3D::set(float, float, float) -> void
      JUMP __end__method____main__block__74____Vector3D____set__float__float__float
      __method____main__block__74____Vector3D____set__float__float__float:
         // Class Instance
            STACKGET __this 0
         // Parameters
            // Param: x
            STACKGET __main__block__74____Vector3D__set__x 1
            // Param: y
            STACKGET __main__block__74____Vector3D__set__y 2
            // Param: z
            STACKGET __main__block__74____Vector3D__set__z 3
         // Body
            //------------------------------------------------------------
            // Code Block
               // Assignment - '='
                  // RHS
                     // Identifier - x
                        PUSH __main__block__74____Vector3D__set__x
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____x
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Identifier - y
                        PUSH __main__block__74____Vector3D__set__y
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____y
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
               // Assignment - '='
                  // RHS
                     // Identifier - z
                        PUSH __main__block__74____Vector3D__set__z
                  // LHS
                     // Member Accessor Assignment
                        // LHS
                           // This keyword
                              PUSH __this
                        // RHS
                           PUSH __field____main__block__74____Vector3D____z
                        POP __child
                        POP __parent
                        POP __rhs
                  ASSIGN __parent[__child] __rhs
                  PUSH __rhs
               // Statement results can be ignored
               POP __void
            //------------------------------------------------------------
         RETURN 0
      __end__method____main__block__74____Vector3D____set__float__float__float:
      // End Method Declaration - __method____main__block__74____Vector3D____set__float__float__float
      //------------------------------------------------------------------

   __endclass____main__block__74____Vector3D:
   // End Class Declaration - __main__block__74____Vector3D
   //=====================================================================

   //=====================================================================
   // Function Declaration - print(Vector3D) -> void
   JUMP __end____main__block__74____print__Vector3D
   __main__block__74____print__Vector3D:
      // Parameters
         // Param: v
         STACKGET __main__block__74__print__v 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH '('
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(float) -> void
               // Arguments
                  // Member Accessor
                     // LHS
                        // Identifier - v
                           PUSH __main__block__74__print__v
                     // RHS
                        PUSH __field____main__block__74____Vector3D____x
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 2
                     ASSIGN __str[0] ','
                     ASSIGN __str[1] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(float) -> void
               // Arguments
                  // Member Accessor
                     // LHS
                        // Identifier - v
                           PUSH __main__block__74__print__v
                     // RHS
                        PUSH __field____main__block__74____Vector3D____y
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 2
                     ASSIGN __str[0] ','
                     ASSIGN __str[1] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(float) -> void
               // Arguments
                  // Member Accessor
                     // LHS
                        // Identifier - v
                           PUSH __main__block__74__print__v
                     // RHS
                        PUSH __field____main__block__74____Vector3D____z
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ')'
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__74____print__Vector3D:
   // End Function Declaration - __main__block__74____print__Vector3D
   //=====================================================================

   //=====================================================================
   // Function Declaration - println(Vector3D) -> void
   JUMP __end____main__block__74____println__Vector3D
   __main__block__74____println__Vector3D:
      // Parameters
         // Param: v
         STACKGET __main__block__74__println__v 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(char) -> void
               // Arguments
                  // Char Literal
                     PUSH '('
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(float) -> void
               // Arguments
                  // Member Accessor
                     // LHS
                        // Identifier - v
                           PUSH __main__block__74__println__v
                     // RHS
                        PUSH __field____main__block__74____Vector3D____x
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 2
                     ASSIGN __str[0] ','
                     ASSIGN __str[1] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(float) -> void
               // Arguments
                  // Member Accessor
                     // LHS
                        // Identifier - v
                           PUSH __main__block__74__println__v
                     // RHS
                        PUSH __field____main__block__74____Vector3D____y
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 2
                     ASSIGN __str[0] ','
                     ASSIGN __str[1] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(float) -> void
               // Arguments
                  // Member Accessor
                     // LHS
                        // Identifier - v
                           PUSH __main__block__74__println__v
                     // RHS
                        PUSH __field____main__block__74____Vector3D____z
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - println(char) -> void
               // Arguments
                  // Char Literal
                     PUSH ')'
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__74____println__Vector3D:
   // End Function Declaration - __main__block__74____println__Vector3D
   //=====================================================================

   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 43
            ASSIGN __str[0] 'V'
            ASSIGN __str[1] 'e'
            ASSIGN __str[2] 'c'
            ASSIGN __str[3] 't'
            ASSIGN __str[4] 'o'
            ASSIGN __str[5] 'r'
            ASSIGN __str[6] '3'
            ASSIGN __str[7] 'D'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] 'v'
            ASSIGN __str[10] '3'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] ' '
            ASSIGN __str[14] 'n'
            ASSIGN __str[15] 'e'
            ASSIGN __str[16] 'w'
            ASSIGN __str[17] ' '
            ASSIGN __str[18] 'V'
            ASSIGN __str[19] 'e'
            ASSIGN __str[20] 'c'
            ASSIGN __str[21] 't'
            ASSIGN __str[22] 'o'
            ASSIGN __str[23] 'r'
            ASSIGN __str[24] '3'
            ASSIGN __str[25] 'D'
            ASSIGN __str[26] ' '
            ASSIGN __str[27] '('
            ASSIGN __str[28] '1'
            ASSIGN __str[29] '.'
            ASSIGN __str[30] '0'
            ASSIGN __str[31] ','
            ASSIGN __str[32] ' '
            ASSIGN __str[33] '2'
            ASSIGN __str[34] '.'
            ASSIGN __str[35] '0'
            ASSIGN __str[36] ','
            ASSIGN __str[37] ' '
            ASSIGN __str[38] '3'
            ASSIGN __str[39] '.'
            ASSIGN __str[40] '0'
            ASSIGN __str[41] ')'
            ASSIGN __str[42] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Constructor Call - Vector3D::Vector3D(float, float, float) -> Vector3D
            // Arguments
               // Float Literal
                  PUSH 1.0
               // Float Literal
                  PUSH 2.0
               // Float Literal
                  PUSH 3.0
               POP __arg2
               POP __arg1
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg2
            PUSH __arg1
            PUSH __arg0
            CALL __ctor____main__block__74____Vector3D____Vector3D__float__float__float
            // Remove args
            POP __void
            POP __void
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__74__v3 0
      POP __rhs
      ASSIGN __main__block__74__v3 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(Vector3D) -> void
      // Arguments
         // Identifier - v3
            PUSH __main__block__74__v3
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL __main__block__74____println__Vector3D
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 45
            ASSIGN __str[0] 'V'
            ASSIGN __str[1] 'e'
            ASSIGN __str[2] 'c'
            ASSIGN __str[3] 't'
            ASSIGN __str[4] 'o'
            ASSIGN __str[5] 'r'
            ASSIGN __str[6] '3'
            ASSIGN __str[7] 'D'
            ASSIGN __str[8] ' '
            ASSIGN __str[9] 'v'
            ASSIGN __str[10] '4'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] ' '
            ASSIGN __str[14] 'n'
            ASSIGN __str[15] 'e'
            ASSIGN __str[16] 'w'
            ASSIGN __str[17] ' '
            ASSIGN __str[18] 'V'
            ASSIGN __str[19] 'e'
            ASSIGN __str[20] 'c'
            ASSIGN __str[21] 't'
            ASSIGN __str[22] 'o'
            ASSIGN __str[23] 'r'
            ASSIGN __str[24] '3'
            ASSIGN __str[25] 'D'
            ASSIGN __str[26] ' '
            ASSIGN __str[27] '('
            ASSIGN __str[28] '5'
            ASSIGN __str[29] '.'
            ASSIGN __str[30] '5'
            ASSIGN __str[31] ','
            ASSIGN __str[32] ' '
            ASSIGN __str[33] '6'
            ASSIGN __str[34] '.'
            ASSIGN __str[35] '2'
            ASSIGN __str[36] '5'
            ASSIGN __str[37] ','
            ASSIGN __str[38] ' '
            ASSIGN __str[39] '7'
            ASSIGN __str[40] '.'
            ASSIGN __str[41] '7'
            ASSIGN __str[42] '5'
            ASSIGN __str[43] ')'
            ASSIGN __str[44] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Constructor Call - Vector3D::Vector3D(float, float, float) -> Vector3D
            // Arguments
               // Float Literal
                  PUSH 5.5
               // Float Literal
                  PUSH 6.25
               // Float Literal
                  PUSH 7.75
               POP __arg2
               POP __arg1
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg2
            PUSH __arg1
            PUSH __arg0
            CALL __ctor____main__block__74____Vector3D____Vector3D__float__float__float
            // Remove args
            POP __void
            POP __void
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__74__v4 0
      POP __rhs
      ASSIGN __main__block__74__v4 __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - println(Vector3D) -> void
      // Arguments
         // Identifier - v4
            PUSH __main__block__74__v4
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL __main__block__74____println__Vector3D
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 39
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '3'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] 'e'
            ASSIGN __str[5] 't'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] 'v'
            ASSIGN __str[9] '2'
            ASSIGN __str[10] ')'
            ASSIGN __str[11] ';'
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '/'
            ASSIGN __str[14] '/'
            ASSIGN __str[15] ' '
            ASSIGN __str[16] 'i'
            ASSIGN __str[17] 'n'
            ASSIGN __str[18] 'h'
            ASSIGN __str[19] 'e'
            ASSIGN __str[20] 'r'
            ASSIGN __str[21] 'i'
            ASSIGN __str[22] 't'
            ASSIGN __str[23] 'e'
            ASSIGN __str[24] 'd'
            ASSIGN __str[25] ' '
            ASSIGN __str[26] 'f'
            ASSIGN __str[27] 'r'
            ASSIGN __str[28] 'o'
            ASSIGN __str[29] 'm'
            ASSIGN __str[30] ' '
            ASSIGN __str[31] 'V'
            ASSIGN __str[32] 'e'
            ASSIGN __str[33] 'c'
            ASSIGN __str[34] 't'
            ASSIGN __str[35] 'o'
            ASSIGN __str[36] 'r'
            ASSIGN __str[37] '2'
            ASSIGN __str[38] 'D'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector3D::set(Vector2D) -> void
      // LHS
         // Identifier - v3
            PUSH __main__block__74__v3
      // RHS
      // Arguments
         // Identifier - v2
            PUSH __main__block__74__v2
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector3D____set__Vector2D
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(Vector3D) -> void
      // Arguments
         // Identifier - v3
            PUSH __main__block__74__v3
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL __main__block__74____println__Vector3D
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 23
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '3'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] 'e'
            ASSIGN __str[5] 't'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] '0'
            ASSIGN __str[9] '.'
            ASSIGN __str[10] '0'
            ASSIGN __str[11] ','
            ASSIGN __str[12] ' '
            ASSIGN __str[13] '0'
            ASSIGN __str[14] '.'
            ASSIGN __str[15] '0'
            ASSIGN __str[16] ','
            ASSIGN __str[17] ' '
            ASSIGN __str[18] '0'
            ASSIGN __str[19] '.'
            ASSIGN __str[20] '0'
            ASSIGN __str[21] ')'
            ASSIGN __str[22] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector3D::set(float, float, float) -> void
      // LHS
         // Identifier - v3
            PUSH __main__block__74__v3
      // RHS
      // Arguments
         // Float Literal
            PUSH 0.0
         // Float Literal
            PUSH 0.0
         // Float Literal
            PUSH 0.0
         POP __arg2
         POP __arg1
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg2
      PUSH __arg1
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector3D____set__float__float__float
      POP __void
      // Remove args
      POP __void
      POP __void
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 12
            ASSIGN __str[0] 'v'
            ASSIGN __str[1] '3'
            ASSIGN __str[2] '.'
            ASSIGN __str[3] 's'
            ASSIGN __str[4] 'e'
            ASSIGN __str[5] 't'
            ASSIGN __str[6] ' '
            ASSIGN __str[7] '('
            ASSIGN __str[8] 'v'
            ASSIGN __str[9] '4'
            ASSIGN __str[10] ')'
            ASSIGN __str[11] ';'
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector3D::set(Vector3D) -> void
      // LHS
         // Identifier - v3
            PUSH __main__block__74__v3
      // RHS
      // Arguments
         // Identifier - v4
            PUSH __main__block__74__v4
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__74____Vector3D____set__Vector3D
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(Vector3D) -> void
      // Arguments
         // Identifier - v3
            PUSH __main__block__74__v3
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL __main__block__74____println__Vector3D
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - println(char[]) -> void
   // Arguments
      // String Literal
         MALLOC __str 25
         ASSIGN __str[0] '='
         ASSIGN __str[1] '='
         ASSIGN __str[2] '='
         ASSIGN __str[3] ' '
         ASSIGN __str[4] 'T'
         ASSIGN __str[5] 'e'
         ASSIGN __str[6] 's'
         ASSIGN __str[7] 't'
         ASSIGN __str[8] 'i'
         ASSIGN __str[9] 'n'
         ASSIGN __str[10] 'g'
         ASSIGN __str[11] ' '
         ASSIGN __str[12] 'A'
         ASSIGN __str[13] 'r'
         ASSIGN __str[14] 'r'
         ASSIGN __str[15] 'a'
         ASSIGN __str[16] 'y'
         ASSIGN __str[17] 'L'
         ASSIGN __str[18] 'i'
         ASSIGN __str[19] 's'
         ASSIGN __str[20] 't'
         ASSIGN __str[21] ' '
         ASSIGN __str[22] '='
         ASSIGN __str[23] '='
         ASSIGN __str[24] '='
         PUSH __str
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   //=====================================================================
   // Class Declaration - __main__block__84____Printable inherits __main__Object
      // Creating Dispatch Table
         MALLOC __dtable____main__block__84____Printable 1
         // Populate Dispatch Table
         ASSIGN __dtable____main__block__84____Printable[0] __method____main__block__84____Printable____toString
   // skip over class methods
   JUMP __endclass____main__block__84____Printable
      //------------------------------------------------------------------
      // Constructor Declaration - Printable::Printable() -> Printable
      JUMP __end__ctor____main__block__84____Printable____Printable
      __ctor____main__block__84____Printable____Printable:
         // Creating Class Instance
            MALLOC __this 1
            // Add Dispatch Table
            ASSIGN __this[0] __dtable____main__block__84____Printable
         // Parameters
         // Body
            //------------------------------------------------------------
            // Code Block
            //------------------------------------------------------------
         RETURN __this
      __end__ctor____main__block__84____Printable____Printable:
      // End Constructor Declaration - __ctor____main__block__84____Printable____Printable
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Method Declaration - Printable::toString() -> char[]
      JUMP __end__method____main__block__84____Printable____toString
      __method____main__block__84____Printable____toString:
         // Class Instance
            STACKGET __this 0
         // Parameters
         // Body
            //------------------------------------------------------------
            // Code Block
               // Return
                  // String Literal
                     MALLOC __str 8
                     ASSIGN __str[0] '<'
                     ASSIGN __str[1] 'O'
                     ASSIGN __str[2] 'b'
                     ASSIGN __str[3] 'j'
                     ASSIGN __str[4] 'e'
                     ASSIGN __str[5] 'c'
                     ASSIGN __str[6] 't'
                     ASSIGN __str[7] '>'
                     PUSH __str
                  POP __rVal
                  RETURN __rVal
            //------------------------------------------------------------
         RETURN 0
      __end__method____main__block__84____Printable____toString:
      // End Method Declaration - __method____main__block__84____Printable____toString
      //------------------------------------------------------------------

   __endclass____main__block__84____Printable:
   // End Class Declaration - __main__block__84____Printable
   //=====================================================================

   //=====================================================================
   // Function Declaration - string(Printable) -> char[]
   JUMP __end____main__block__84____string__Printable
   __main__block__84____string__Printable:
      // Parameters
         // Param: p
         STACKGET __main__block__84__string__p 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Return
               // Virtual Method Call - toString() -> char[]
                  // LHS
                     // Identifier - p
                        PUSH __main__block__84__string__p
                  // RHS
                  // Arguments
                  POP __obj
                  // Pushing args in reverse order
                  PUSH __obj
                  // Virtual Function Dispatch
                  ASSIGN __dtable __obj[0]
                  CALL __dtable[0]
                  POP __void
                  // Remove args
                  RESPONSE __retval
                  PUSH __retval
               POP __rVal
               RETURN __rVal
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__84____string__Printable:
   // End Function Declaration - __main__block__84____string__Printable
   //=====================================================================

   //=====================================================================
   // Class Template - 
      // Instances:
         //===============================================================
         // Class Declaration - __main__block__84____Vector__int inherits __main__block__84____Printable
            // Creating Dispatch Table
               MALLOC __dtable____main__block__84____Vector__int 4
               // Populate Dispatch Table
               ASSIGN __dtable____main__block__84____Vector__int[0] __method____main__block__84____Vector__int____toString
               ASSIGN __dtable____main__block__84____Vector__int[1] __method____main__block__84____Vector__int____pushBack__int
               ASSIGN __dtable____main__block__84____Vector__int[2] __method____main__block__84____Vector__int____popBack
               ASSIGN __dtable____main__block__84____Vector__int[3] __method____main__block__84____Vector__int____get__int
            //------------------------------------------------------------
            // Field - int[] Vector<:int:>::data
            ASSIGN __field____main__block__84____Vector__int____data 1
            //------------------------------------------------------------
            //------------------------------------------------------------
            // Field - int Vector<:int:>::size
            ASSIGN __field____main__block__84____Vector__int____size 2
            //------------------------------------------------------------
            //------------------------------------------------------------
            // Field - int Vector<:int:>::capacity
            ASSIGN __field____main__block__84____Vector__int____capacity 3
            //------------------------------------------------------------
         // skip over class methods
         JUMP __endclass____main__block__84____Vector__int
            //------------------------------------------------------------
            // Constructor Declaration - Vector<:int:>::Vector() -> Vector<:int:>
            JUMP __end__ctor____main__block__84____Vector__int____Vector
            __ctor____main__block__84____Vector__int____Vector:
               // Creating Class Instance
                  MALLOC __this 4
                  // Add Dispatch Table
                  ASSIGN __this[0] __dtable____main__block__84____Vector__int
               // Parameters
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 10
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__int____capacity
                              POP __child
                              POP __parent
                              POP __rhs
                        ASSIGN __parent[__child] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                     // Assignment - '='
                        // RHS
                           // Array Allocator
                              // Member Accessor
                                 // LHS
                                    // This keyword
                                       PUSH __this
                                 // RHS
                                    PUSH __field____main__block__84____Vector__int____capacity
                                 POP __child
                                 POP __parent
                                 PUSH __parent[__child]
                              POP __size
                              MALLOC __ptr __size
                              PUSH __ptr
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__int____data
                              POP __child
                              POP __parent
                              POP __rhs
                        ASSIGN __parent[__child] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 0
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__int____size
                              POP __child
                              POP __parent
                              POP __rhs
                        ASSIGN __parent[__child] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                  //------------------------------------------------------
               RETURN __this
            __end__ctor____main__block__84____Vector__int____Vector:
            // End Constructor Declaration - __ctor____main__block__84____Vector__int____Vector
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:int:>::pushBack(int) -> void
            JUMP __end__method____main__block__84____Vector__int____pushBack__int
            __method____main__block__84____Vector__int____pushBack__int:
               // Class Instance
                  STACKGET __this 0
               // Parameters
                  // Param: val
                  STACKGET __main__block__84____Vector__int__pushBack__val 1
               // Body
                  //------------------------------------------------------
                  // Code Block
                     //---------------------------------------------------
                     // If-Statement
                        // Condition
                           // Greater Than or Equal to
                              // LHS
                                 // Addition
                                    // LHS
                                       // Member Accessor
                                          // LHS
                                             // This keyword
                                                PUSH __this
                                          // RHS
                                             PUSH __field____main__block__84____Vector__int____size
                                          POP __child
                                          POP __parent
                                          PUSH __parent[__child]
                                    // RHS
                                       // Int Literal
                                          PUSH 1
                                    POP __rhs
                                    POP __lhs
                                    ADD __res __lhs __rhs
                                    PUSH __res
                              // RHS
                                 // Member Accessor
                                    // LHS
                                       // This keyword
                                          PUSH __this
                                    // RHS
                                       PUSH __field____main__block__84____Vector__int____capacity
                                    POP __child
                                    POP __parent
                                    PUSH __parent[__child]
                              POP __rhs
                              POP __lhs
                              GE __res __lhs __rhs
                              PUSH __res
                           POP __cond
                           CMP __cond 0
                           JEQ __endif__90
                        // Body
                           //---------------------------------------------
                           // Code Block
                              // Assignment - '='
                                 // RHS
                                    // Multiplication
                                       // LHS
                                          // Member Accessor
                                             // LHS
                                                // This keyword
                                                   PUSH __this
                                             // RHS
                                                PUSH __field____main__block__84____Vector__int____capacity
                                             POP __child
                                             POP __parent
                                             PUSH __parent[__child]
                                       // RHS
                                          // Int Literal
                                             PUSH 2
                                       POP __rhs
                                       POP __lhs
                                       MULTIPLY __res __lhs __rhs
                                       PUSH __res
                                 // LHS
                                    // Member Accessor Assignment
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__int____capacity
                                       POP __child
                                       POP __parent
                                       POP __rhs
                                 ASSIGN __parent[__child] __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                              // Assignment - '='
                                 // RHS
                                    // Array Allocator
                                       // Member Accessor
                                          // LHS
                                             // This keyword
                                                PUSH __this
                                          // RHS
                                             PUSH __field____main__block__84____Vector__int____capacity
                                          POP __child
                                          POP __parent
                                          PUSH __parent[__child]
                                       POP __size
                                       MALLOC __ptr __size
                                       PUSH __ptr
                                 // LHS
                                    // Variable Declaration
                                       ASSIGN __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__nData 0
                                 POP __rhs
                                 ASSIGN __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__nData __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                              //------------------------------------------
                              // For-Loop
                              // Init
                                 // Assignment - '='
                                    // RHS
                                       // Int Literal
                                          PUSH 0
                                    // LHS
                                       // Variable Declaration
                                          ASSIGN __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i 0
                                    POP __rhs
                                    ASSIGN __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i __rhs
                                    PUSH __rhs
                              JUMP __forcond__92
                              __for__92:
                                 // Update
                                    // Pre-Increment
                                       // RHS
                                          // Identifier - i
                                             PUSH __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i
                                       POP __rhs
                                       ADD __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i 1
                                       ASSIGN __res __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i
                                       PUSH __res
                                 __forcond__92:
                                 // Condition
                                    // Less Than
                                       // LHS
                                          // Identifier - i
                                             PUSH __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i
                                       // RHS
                                          // Member Accessor
                                             // LHS
                                                // This keyword
                                                   PUSH __this
                                             // RHS
                                                PUSH __field____main__block__84____Vector__int____size
                                             POP __child
                                             POP __parent
                                             PUSH __parent[__child]
                                       POP __rhs
                                       POP __lhs
                                       LT __res __lhs __rhs
                                       PUSH __res
                                    POP __cond
                                    CMP __cond 0
                                    JEQ __endfor__92
                                 // Body
                                    //------------------------------------
                                    // Code Block
                                       // Assignment - '='
                                          // RHS
                                             // Subscript
                                                // LHS
                                                   // Member Accessor
                                                      // LHS
                                                         // This keyword
                                                            PUSH __this
                                                      // RHS
                                                         PUSH __field____main__block__84____Vector__int____data
                                                      POP __child
                                                      POP __parent
                                                      PUSH __parent[__child]
                                                // OFFSET
                                                   // Identifier - i
                                                      PUSH __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i
                                                POP __offset
                                                POP __pointer
                                                PUSH __pointer[__offset]
                                          // LHS
                                             // Subscript assignment
                                                // LHS
                                                   // Identifier - nData
                                                      PUSH __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__nData
                                                // OFFSET
                                                   // Identifier - i
                                                      PUSH __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__for__92__i
                                                POP __offset
                                                POP __pointer
                                          POP __rhs
                                          ASSIGN __pointer[__offset] __rhs
                                          PUSH __rhs
                                       // Statement results can be ignored
                                       POP __void
                                    //------------------------------------
                                 // Repeat
                                 JUMP __for__92
                                 // End of For
                                 __endfor__92:
                              //------------------------------------------
                              // Free Operator
                                 // RHS
                                    // Member Accessor
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__int____data
                                       POP __child
                                       POP __parent
                                       PUSH __parent[__child]
                                 // Free array
                                 POP __array
                                 FREE __array
                                 PUSH __array
                              // Statement results can be ignored
                              POP __void
                              // Assignment - '='
                                 // RHS
                                    // Identifier - nData
                                       PUSH __main__block__84____Vector__int__pushBack__block__89__if__90__block__91__nData
                                 // LHS
                                    // Member Accessor Assignment
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__int____data
                                       POP __child
                                       POP __parent
                                       POP __rhs
                                 ASSIGN __parent[__child] __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                           //---------------------------------------------
                        JUMP __endif__90
                        // End of if
                        __endif__90:
                     //---------------------------------------------------
                     // Assignment - '='
                        // RHS
                           // Identifier - val
                              PUSH __main__block__84____Vector__int__pushBack__val
                        // LHS
                           // Subscript assignment
                              // LHS
                                 // Member Accessor
                                    // LHS
                                       // This keyword
                                          PUSH __this
                                    // RHS
                                       PUSH __field____main__block__84____Vector__int____data
                                    POP __child
                                    POP __parent
                                    PUSH __parent[__child]
                              // OFFSET
                                 // Member Accessor
                                    // LHS
                                       // This keyword
                                          PUSH __this
                                    // RHS
                                       PUSH __field____main__block__84____Vector__int____size
                                    POP __child
                                    POP __parent
                                    PUSH __parent[__child]
                              POP __offset
                              POP __pointer
                        POP __rhs
                        ASSIGN __pointer[__offset] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                     // Pre-Increment
                        // RHS
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__int____size
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                        POP __rhs
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__int____size
                              POP __child
                              POP __parent
                              ADD __parent[__child] __parent[__child] 1
                              ASSIGN __res __parent[__child]
                        PUSH __res
                     // Statement results can be ignored
                     POP __void
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__int____pushBack__int:
            // End Method Declaration - __method____main__block__84____Vector__int____pushBack__int
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:int:>::popBack() -> int
            JUMP __end__method____main__block__84____Vector__int____popBack
            __method____main__block__84____Vector__int____popBack:
               // Class Instance
                  STACKGET __this 0
               // Parameters
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Return
                        // Subscript
                           // LHS
                              // Member Accessor
                                 // LHS
                                    // This keyword
                                       PUSH __this
                                 // RHS
                                    PUSH __field____main__block__84____Vector__int____data
                                 POP __child
                                 POP __parent
                                 PUSH __parent[__child]
                           // OFFSET
                              // Pre-Decrement
                                 // RHS
                                    // Member Accessor
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__int____size
                                       POP __child
                                       POP __parent
                                       PUSH __parent[__child]
                                 POP __rhs
                                 // LHS
                                    // Member Accessor Assignment
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__int____size
                                       POP __child
                                       POP __parent
                                       SUBTRACT __parent[__child] __parent[__child] 1
                                       ASSIGN __res __parent[__child]
                                 PUSH __res
                           POP __offset
                           POP __pointer
                           PUSH __pointer[__offset]
                        POP __rVal
                        RETURN __rVal
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__int____popBack:
            // End Method Declaration - __method____main__block__84____Vector__int____popBack
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:int:>::get(int) -> int
            JUMP __end__method____main__block__84____Vector__int____get__int
            __method____main__block__84____Vector__int____get__int:
               // Class Instance
                  STACKGET __this 0
               // Parameters
                  // Param: index
                  STACKGET __main__block__84____Vector__int__get__index 1
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Return
                        // Subscript
                           // LHS
                              // Member Accessor
                                 // LHS
                                    // This keyword
                                       PUSH __this
                                 // RHS
                                    PUSH __field____main__block__84____Vector__int____data
                                 POP __child
                                 POP __parent
                                 PUSH __parent[__child]
                           // OFFSET
                              // Identifier - index
                                 PUSH __main__block__84____Vector__int__get__index
                           POP __offset
                           POP __pointer
                           PUSH __pointer[__offset]
                        POP __rVal
                        RETURN __rVal
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__int____get__int:
            // End Method Declaration - __method____main__block__84____Vector__int____get__int
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:int:>::toString() -> char[]
            JUMP __end__method____main__block__84____Vector__int____toString
            __method____main__block__84____Vector__int____toString:
               // Class Instance
                  STACKGET __this 0
               // Parameters
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Return
                        // String Literal
                           MALLOC __str 8
                           ASSIGN __str[0] '<'
                           ASSIGN __str[1] 'V'
                           ASSIGN __str[2] 'e'
                           ASSIGN __str[3] 'c'
                           ASSIGN __str[4] 't'
                           ASSIGN __str[5] 'o'
                           ASSIGN __str[6] 'r'
                           ASSIGN __str[7] '>'
                           PUSH __str
                        POP __rVal
                        RETURN __rVal
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__int____toString:
            // End Method Declaration - __method____main__block__84____Vector__int____toString
            //------------------------------------------------------------

         __endclass____main__block__84____Vector__int:
         // End Class Declaration - __main__block__84____Vector__int
         //===============================================================

         //===============================================================
         // Class Declaration - __main__block__84____Vector__float inherits __main__block__84____Printable
            // Creating Dispatch Table
               MALLOC __dtable____main__block__84____Vector__float 4
               // Populate Dispatch Table
               ASSIGN __dtable____main__block__84____Vector__float[0] __method____main__block__84____Vector__float____toString
               ASSIGN __dtable____main__block__84____Vector__float[1] __method____main__block__84____Vector__float____pushBack__float
               ASSIGN __dtable____main__block__84____Vector__float[2] __method____main__block__84____Vector__float____popBack
               ASSIGN __dtable____main__block__84____Vector__float[3] __method____main__block__84____Vector__float____get__int
            //------------------------------------------------------------
            // Field - float[] Vector<:float:>::data
            ASSIGN __field____main__block__84____Vector__float____data 1
            //------------------------------------------------------------
            //------------------------------------------------------------
            // Field - int Vector<:float:>::size
            ASSIGN __field____main__block__84____Vector__float____size 2
            //------------------------------------------------------------
            //------------------------------------------------------------
            // Field - int Vector<:float:>::capacity
            ASSIGN __field____main__block__84____Vector__float____capacity 3
            //------------------------------------------------------------
         // skip over class methods
         JUMP __endclass____main__block__84____Vector__float
            //------------------------------------------------------------
            // Constructor Declaration - Vector<:float:>::Vector() -> Vector<:float:>
            JUMP __end__ctor____main__block__84____Vector__float____Vector
            __ctor____main__block__84____Vector__float____Vector:
               // Creating Class Instance
                  MALLOC __this 4
                  // Add Dispatch Table
                  ASSIGN __this[0] __dtable____main__block__84____Vector__float
               // Parameters
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 10
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__float____capacity
                              POP __child
                              POP __parent
                              POP __rhs
                        ASSIGN __parent[__child] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                     // Assignment - '='
                        // RHS
                           // Array Allocator
                              // Member Accessor
                                 // LHS
                                    // This keyword
                                       PUSH __this
                                 // RHS
                                    PUSH __field____main__block__84____Vector__float____capacity
                                 POP __child
                                 POP __parent
                                 PUSH __parent[__child]
                              POP __size
                              MALLOC __ptr __size
                              PUSH __ptr
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__float____data
                              POP __child
                              POP __parent
                              POP __rhs
                        ASSIGN __parent[__child] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                     // Assignment - '='
                        // RHS
                           // Int Literal
                              PUSH 0
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__float____size
                              POP __child
                              POP __parent
                              POP __rhs
                        ASSIGN __parent[__child] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                  //------------------------------------------------------
               RETURN __this
            __end__ctor____main__block__84____Vector__float____Vector:
            // End Constructor Declaration - __ctor____main__block__84____Vector__float____Vector
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:float:>::pushBack(float) -> void
            JUMP __end__method____main__block__84____Vector__float____pushBack__float
            __method____main__block__84____Vector__float____pushBack__float:
               // Class Instance
                  STACKGET __this 0
               // Parameters
                  // Param: val
                  STACKGET __main__block__84____Vector__float__pushBack__val 1
               // Body
                  //------------------------------------------------------
                  // Code Block
                     //---------------------------------------------------
                     // If-Statement
                        // Condition
                           // Greater Than or Equal to
                              // LHS
                                 // Addition
                                    // LHS
                                       // Member Accessor
                                          // LHS
                                             // This keyword
                                                PUSH __this
                                          // RHS
                                             PUSH __field____main__block__84____Vector__float____size
                                          POP __child
                                          POP __parent
                                          PUSH __parent[__child]
                                    // RHS
                                       // Int Literal
                                          PUSH 1
                                    POP __rhs
                                    POP __lhs
                                    ADD __res __lhs __rhs
                                    PUSH __res
                              // RHS
                                 // Member Accessor
                                    // LHS
                                       // This keyword
                                          PUSH __this
                                    // RHS
                                       PUSH __field____main__block__84____Vector__float____capacity
                                    POP __child
                                    POP __parent
                                    PUSH __parent[__child]
                              POP __rhs
                              POP __lhs
                              GE __res __lhs __rhs
                              PUSH __res
                           POP __cond
                           CMP __cond 0
                           JEQ __endif__99
                        // Body
                           //---------------------------------------------
                           // Code Block
                              // Assignment - '='
                                 // RHS
                                    // Multiplication
                                       // LHS
                                          // Member Accessor
                                             // LHS
                                                // This keyword
                                                   PUSH __this
                                             // RHS
                                                PUSH __field____main__block__84____Vector__float____capacity
                                             POP __child
                                             POP __parent
                                             PUSH __parent[__child]
                                       // RHS
                                          // Int Literal
                                             PUSH 2
                                       POP __rhs
                                       POP __lhs
                                       MULTIPLY __res __lhs __rhs
                                       PUSH __res
                                 // LHS
                                    // Member Accessor Assignment
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__float____capacity
                                       POP __child
                                       POP __parent
                                       POP __rhs
                                 ASSIGN __parent[__child] __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                              // Assignment - '='
                                 // RHS
                                    // Array Allocator
                                       // Member Accessor
                                          // LHS
                                             // This keyword
                                                PUSH __this
                                          // RHS
                                             PUSH __field____main__block__84____Vector__float____capacity
                                          POP __child
                                          POP __parent
                                          PUSH __parent[__child]
                                       POP __size
                                       MALLOC __ptr __size
                                       PUSH __ptr
                                 // LHS
                                    // Variable Declaration
                                       ASSIGN __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__nData 0
                                 POP __rhs
                                 ASSIGN __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__nData __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                              //------------------------------------------
                              // For-Loop
                              // Init
                                 // Assignment - '='
                                    // RHS
                                       // Int Literal
                                          PUSH 0
                                    // LHS
                                       // Variable Declaration
                                          ASSIGN __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i 0
                                    POP __rhs
                                    ASSIGN __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i __rhs
                                    PUSH __rhs
                              JUMP __forcond__101
                              __for__101:
                                 // Update
                                    // Pre-Increment
                                       // RHS
                                          // Identifier - i
                                             PUSH __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i
                                       POP __rhs
                                       ADD __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i 1
                                       ASSIGN __res __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i
                                       PUSH __res
                                 __forcond__101:
                                 // Condition
                                    // Less Than
                                       // LHS
                                          // Identifier - i
                                             PUSH __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i
                                       // RHS
                                          // Member Accessor
                                             // LHS
                                                // This keyword
                                                   PUSH __this
                                             // RHS
                                                PUSH __field____main__block__84____Vector__float____size
                                             POP __child
                                             POP __parent
                                             PUSH __parent[__child]
                                       POP __rhs
                                       POP __lhs
                                       LT __res __lhs __rhs
                                       PUSH __res
                                    POP __cond
                                    CMP __cond 0
                                    JEQ __endfor__101
                                 // Body
                                    //------------------------------------
                                    // Code Block
                                       // Assignment - '='
                                          // RHS
                                             // Subscript
                                                // LHS
                                                   // Member Accessor
                                                      // LHS
                                                         // This keyword
                                                            PUSH __this
                                                      // RHS
                                                         PUSH __field____main__block__84____Vector__float____data
                                                      POP __child
                                                      POP __parent
                                                      PUSH __parent[__child]
                                                // OFFSET
                                                   // Identifier - i
                                                      PUSH __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i
                                                POP __offset
                                                POP __pointer
                                                PUSH __pointer[__offset]
                                          // LHS
                                             // Subscript assignment
                                                // LHS
                                                   // Identifier - nData
                                                      PUSH __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__nData
                                                // OFFSET
                                                   // Identifier - i
                                                      PUSH __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__for__101__i
                                                POP __offset
                                                POP __pointer
                                          POP __rhs
                                          ASSIGN __pointer[__offset] __rhs
                                          PUSH __rhs
                                       // Statement results can be ignored
                                       POP __void
                                    //------------------------------------
                                 // Repeat
                                 JUMP __for__101
                                 // End of For
                                 __endfor__101:
                              //------------------------------------------
                              // Free Operator
                                 // RHS
                                    // Member Accessor
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__float____data
                                       POP __child
                                       POP __parent
                                       PUSH __parent[__child]
                                 // Free array
                                 POP __array
                                 FREE __array
                                 PUSH __array
                              // Statement results can be ignored
                              POP __void
                              // Assignment - '='
                                 // RHS
                                    // Identifier - nData
                                       PUSH __main__block__84____Vector__float__pushBack__block__98__if__99__block__100__nData
                                 // LHS
                                    // Member Accessor Assignment
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__float____data
                                       POP __child
                                       POP __parent
                                       POP __rhs
                                 ASSIGN __parent[__child] __rhs
                                 PUSH __rhs
                              // Statement results can be ignored
                              POP __void
                           //---------------------------------------------
                        JUMP __endif__99
                        // End of if
                        __endif__99:
                     //---------------------------------------------------
                     // Assignment - '='
                        // RHS
                           // Identifier - val
                              PUSH __main__block__84____Vector__float__pushBack__val
                        // LHS
                           // Subscript assignment
                              // LHS
                                 // Member Accessor
                                    // LHS
                                       // This keyword
                                          PUSH __this
                                    // RHS
                                       PUSH __field____main__block__84____Vector__float____data
                                    POP __child
                                    POP __parent
                                    PUSH __parent[__child]
                              // OFFSET
                                 // Member Accessor
                                    // LHS
                                       // This keyword
                                          PUSH __this
                                    // RHS
                                       PUSH __field____main__block__84____Vector__float____size
                                    POP __child
                                    POP __parent
                                    PUSH __parent[__child]
                              POP __offset
                              POP __pointer
                        POP __rhs
                        ASSIGN __pointer[__offset] __rhs
                        PUSH __rhs
                     // Statement results can be ignored
                     POP __void
                     // Pre-Increment
                        // RHS
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__float____size
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                        POP __rhs
                        // LHS
                           // Member Accessor Assignment
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main__block__84____Vector__float____size
                              POP __child
                              POP __parent
                              ADD __parent[__child] __parent[__child] 1
                              ASSIGN __res __parent[__child]
                        PUSH __res
                     // Statement results can be ignored
                     POP __void
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__float____pushBack__float:
            // End Method Declaration - __method____main__block__84____Vector__float____pushBack__float
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:float:>::popBack() -> float
            JUMP __end__method____main__block__84____Vector__float____popBack
            __method____main__block__84____Vector__float____popBack:
               // Class Instance
                  STACKGET __this 0
               // Parameters
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Return
                        // Subscript
                           // LHS
                              // Member Accessor
                                 // LHS
                                    // This keyword
                                       PUSH __this
                                 // RHS
                                    PUSH __field____main__block__84____Vector__float____data
                                 POP __child
                                 POP __parent
                                 PUSH __parent[__child]
                           // OFFSET
                              // Pre-Decrement
                                 // RHS
                                    // Member Accessor
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__float____size
                                       POP __child
                                       POP __parent
                                       PUSH __parent[__child]
                                 POP __rhs
                                 // LHS
                                    // Member Accessor Assignment
                                       // LHS
                                          // This keyword
                                             PUSH __this
                                       // RHS
                                          PUSH __field____main__block__84____Vector__float____size
                                       POP __child
                                       POP __parent
                                       SUBTRACT __parent[__child] __parent[__child] 1
                                       ASSIGN __res __parent[__child]
                                 PUSH __res
                           POP __offset
                           POP __pointer
                           PUSH __pointer[__offset]
                        POP __rVal
                        RETURN __rVal
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__float____popBack:
            // End Method Declaration - __method____main__block__84____Vector__float____popBack
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:float:>::get(int) -> float
            JUMP __end__method____main__block__84____Vector__float____get__int
            __method____main__block__84____Vector__float____get__int:
               // Class Instance
                  STACKGET __this 0
               // Parameters
                  // Param: index
                  STACKGET __main__block__84____Vector__float__get__index 1
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Return
                        // Subscript
                           // LHS
                              // Member Accessor
                                 // LHS
                                    // This keyword
                                       PUSH __this
                                 // RHS
                                    PUSH __field____main__block__84____Vector__float____data
                                 POP __child
                                 POP __parent
                                 PUSH __parent[__child]
                           // OFFSET
                              // Identifier - index
                                 PUSH __main__block__84____Vector__float__get__index
                           POP __offset
                           POP __pointer
                           PUSH __pointer[__offset]
                        POP __rVal
                        RETURN __rVal
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__float____get__int:
            // End Method Declaration - __method____main__block__84____Vector__float____get__int
            //------------------------------------------------------------

            //------------------------------------------------------------
            // Method Declaration - Vector<:float:>::toString() -> char[]
            JUMP __end__method____main__block__84____Vector__float____toString
            __method____main__block__84____Vector__float____toString:
               // Class Instance
                  STACKGET __this 0
               // Parameters
               // Body
                  //------------------------------------------------------
                  // Code Block
                     // Return
                        // String Literal
                           MALLOC __str 8
                           ASSIGN __str[0] '<'
                           ASSIGN __str[1] 'V'
                           ASSIGN __str[2] 'e'
                           ASSIGN __str[3] 'c'
                           ASSIGN __str[4] 't'
                           ASSIGN __str[5] 'o'
                           ASSIGN __str[6] 'r'
                           ASSIGN __str[7] '>'
                           PUSH __str
                        POP __rVal
                        RETURN __rVal
                  //------------------------------------------------------
               RETURN 0
            __end__method____main__block__84____Vector__float____toString:
            // End Method Declaration - __method____main__block__84____Vector__float____toString
            //------------------------------------------------------------

         __endclass____main__block__84____Vector__float:
         // End Class Declaration - __main__block__84____Vector__float
         //===============================================================

   // End Class Template - 
   //=====================================================================

   //=====================================================================
   // Function Declaration - print(Printable) -> void
   JUMP __end____main__block__84____print__Printable
   __main__block__84____print__Printable:
      // Parameters
         // Param: o
         STACKGET __main__block__84__print__o 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(char[]) -> void
               // Arguments
                  // Virtual Method Call - toString() -> char[]
                     // LHS
                        // Identifier - o
                           PUSH __main__block__84__print__o
                     // RHS
                     // Arguments
                     POP __obj
                     // Pushing args in reverse order
                     PUSH __obj
                     // Virtual Function Dispatch
                     ASSIGN __dtable __obj[0]
                     CALL __dtable[0]
                     POP __void
                     // Remove args
                     RESPONSE __retval
                     PUSH __retval
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__84____print__Printable:
   // End Function Declaration - __main__block__84____print__Printable
   //=====================================================================

   //=====================================================================
   // Function Declaration - println(Printable) -> void
   JUMP __end____main__block__84____println__Printable
   __main__block__84____println__Printable:
      // Parameters
         // Param: o
         STACKGET __main__block__84__println__o 0
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - println(char[]) -> void
               // Arguments
                  // Virtual Method Call - toString() -> char[]
                     // LHS
                        // Identifier - o
                           PUSH __main__block__84__println__o
                     // RHS
                     // Arguments
                     POP __obj
                     // Pushing args in reverse order
                     PUSH __obj
                     // Virtual Function Dispatch
                     ASSIGN __dtable __obj[0]
                     CALL __dtable[0]
                     POP __void
                     // Remove args
                     RESPONSE __retval
                     PUSH __retval
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** println
               CALL println__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN 0
   __end____main__block__84____println__Printable:
   // End Function Declaration - __main__block__84____println__Printable
   //=====================================================================

   // Assignment - '='
      // RHS
         // Constructor Call - Vector<:int:>::Vector() -> Vector<:int:>
            // Arguments
            // Pushing args in reverse order
            CALL __ctor____main__block__84____Vector__int____Vector
            // Remove args
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__84__myArray 0
      POP __rhs
      ASSIGN __main__block__84__myArray __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:int:>::pushBack(int) -> void
      // LHS
         // Identifier - myArray
            PUSH __main__block__84__myArray
      // RHS
      // Arguments
         // Int Literal
            PUSH 42
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__84____Vector__int____pushBack__int
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:int:>::pushBack(int) -> void
      // LHS
         // Identifier - myArray
            PUSH __main__block__84__myArray
      // RHS
      // Arguments
         // Int Literal
            PUSH 7
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__84____Vector__int____pushBack__int
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:int:>::popBack() -> int
      // LHS
         // Identifier - myArray
            PUSH __main__block__84__myArray
      // RHS
      // Arguments
      POP __obj
      // Pushing args in reverse order
      PUSH __obj
      CALL __method____main__block__84____Vector__int____popBack
      POP __void
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:int:>::pushBack(int) -> void
      // LHS
         // Identifier - myArray
            PUSH __main__block__84__myArray
      // RHS
      // Arguments
         // Int Literal
            PUSH 19
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__84____Vector__int____pushBack__int
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:int:>::pushBack(int) -> void
      // LHS
         // Identifier - myArray
            PUSH __main__block__84__myArray
      // RHS
      // Arguments
         // Int Literal
            PUSH 25
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__84____Vector__int____pushBack__int
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:int:>::popBack() -> int
      // LHS
         // Identifier - myArray
            PUSH __main__block__84__myArray
      // RHS
      // Arguments
      POP __obj
      // Pushing args in reverse order
      PUSH __obj
      CALL __method____main__block__84____Vector__int____popBack
      POP __void
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__84__for__108__i 0
         POP __rhs
         ASSIGN __main__block__84__for__108__i __rhs
         PUSH __rhs
   JUMP __forcond__108
   __for__108:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__84__for__108__i
            POP __rhs
            ADD __main__block__84__for__108__i __main__block__84__for__108__i 1
            ASSIGN __res __main__block__84__for__108__i
            PUSH __res
      __forcond__108:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__84__for__108__i
            // RHS
               // Member Accessor
                  // LHS
                     // Identifier - myArray
                        PUSH __main__block__84__myArray
                  // RHS
                     PUSH __field____main__block__84____Vector__int____size
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__108
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(int) -> void
               // Arguments
                  // Method Call - Vector<:int:>::get(int) -> int
                     // LHS
                        // Identifier - myArray
                           PUSH __main__block__84__myArray
                     // RHS
                     // Arguments
                        // Identifier - i
                           PUSH __main__block__84__for__108__i
                        POP __arg0
                     POP __obj
                     // Pushing args in reverse order
                     PUSH __arg0
                     PUSH __obj
                     CALL __method____main__block__84____Vector__int____get__int
                     POP __void
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__int
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 1
                     ASSIGN __str[0] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__108
      // End of For
      __endfor__108:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Post-Decrement
            // RHS
               // Subscript assignment
                  // LHS
                     // Member Accessor
                        // LHS
                           // Identifier - myArray
                              PUSH __main__block__84__myArray
                        // RHS
                           PUSH __field____main__block__84____Vector__int____data
                        POP __child
                        POP __parent
                        PUSH __parent[__child]
                  // OFFSET
                     // Int Literal
                        PUSH 0
                  POP __offset
                  POP __pointer
            ASSIGN __res __pointer[__offset]
            SUBTRACT __pointer[__offset] __pointer[__offset] 1
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Subscript
            // LHS
               // Member Accessor
                  // LHS
                     // Identifier - myArray
                        PUSH __main__block__84__myArray
                  // RHS
                     PUSH __field____main__block__84____Vector__int____data
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
            // OFFSET
               // Int Literal
                  PUSH 0
            POP __offset
            POP __pointer
            PUSH __pointer[__offset]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Post-Increment
            // LHS
               // Member Accessor Assignment
                  // LHS
                     // Identifier - myArray
                        PUSH __main__block__84__myArray
                  // RHS
                     PUSH __field____main__block__84____Vector__int____size
                  POP __child
                  POP __parent
                  ASSIGN __res __parent[__child]
                  ADD __parent[__child] __parent[__child] 1
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Member Accessor
            // LHS
               // Identifier - myArray
                  PUSH __main__block__84__myArray
            // RHS
               PUSH __field____main__block__84____Vector__int____size
            POP __child
            POP __parent
            PUSH __parent[__child]
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(Printable) -> void
      // Arguments
         // Identifier - myArray
            PUSH __main__block__84__myArray
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL __main__block__84____println__Printable
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Constructor Call - Vector<:float:>::Vector() -> Vector<:float:>
            // Arguments
            // Pushing args in reverse order
            CALL __ctor____main__block__84____Vector__float____Vector
            // Remove args
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__84__vals 0
      POP __rhs
      ASSIGN __main__block__84__vals __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:float:>::pushBack(float) -> void
      // LHS
         // Identifier - vals
            PUSH __main__block__84__vals
      // RHS
      // Arguments
         // Float Literal
            PUSH 42.0
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__84____Vector__float____pushBack__float
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Method Call - Vector<:float:>::pushBack(float) -> void
      // LHS
         // Identifier - vals
            PUSH __main__block__84__vals
      // RHS
      // Arguments
         // Float Literal
            PUSH 12345.6789
         POP __arg0
      POP __obj
      // Pushing args in reverse order
      PUSH __arg0
      PUSH __obj
      CALL __method____main__block__84____Vector__float____pushBack__float
      POP __void
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   //---------------------------------------------------------------------
   // For-Loop
   // Init
      // Assignment - '='
         // RHS
            // Int Literal
               PUSH 0
         // LHS
            // Variable Declaration
               ASSIGN __main__block__84__for__110__i 0
         POP __rhs
         ASSIGN __main__block__84__for__110__i __rhs
         PUSH __rhs
   JUMP __forcond__110
   __for__110:
      // Update
         // Pre-Increment
            // RHS
               // Identifier - i
                  PUSH __main__block__84__for__110__i
            POP __rhs
            ADD __main__block__84__for__110__i __main__block__84__for__110__i 1
            ASSIGN __res __main__block__84__for__110__i
            PUSH __res
      __forcond__110:
      // Condition
         // Less Than
            // LHS
               // Identifier - i
                  PUSH __main__block__84__for__110__i
            // RHS
               // Member Accessor
                  // LHS
                     // Identifier - vals
                        PUSH __main__block__84__vals
                  // RHS
                     PUSH __field____main__block__84____Vector__float____size
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
            POP __rhs
            POP __lhs
            LT __res __lhs __rhs
            PUSH __res
         POP __cond
         CMP __cond 0
         JEQ __endfor__110
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Function Call - print(float) -> void
               // Arguments
                  // Method Call - Vector<:float:>::get(int) -> float
                     // LHS
                        // Identifier - vals
                           PUSH __main__block__84__vals
                     // RHS
                     // Arguments
                        // Identifier - i
                           PUSH __main__block__84__for__110__i
                        POP __arg0
                     POP __obj
                     // Pushing args in reverse order
                     PUSH __arg0
                     PUSH __obj
                     CALL __method____main__block__84____Vector__float____get__int
                     POP __void
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__float
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
            // Function Call - print(char[]) -> void
               // Arguments
                  // String Literal
                     MALLOC __str 1
                     ASSIGN __str[0] ' '
                     PUSH __str
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg0
               // *** print
               CALL print__char__1
               // Remove args
               POP __void
               RESPONSE __retval
               PUSH __retval
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      // Repeat
      JUMP __for__110
      // End of For
      __endfor__110:
   //---------------------------------------------------------------------
   // Function Call - println() -> void
      // Arguments
      // Pushing args in reverse order
      // *** println
      CALL println
      // Remove args
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - exit(int) -> void
   // Arguments
      // Int Literal
         PUSH 0
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** exit
   CALL exit__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//------------------------------------------------------------------------
// Code Block
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'E'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'r'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'a'
            ASSIGN __str[7] ' '
            ASSIGN __str[8] 'p'
            ASSIGN __str[9] 'h'
            ASSIGN __str[10] 'r'
            ASSIGN __str[11] 'a'
            ASSIGN __str[12] 's'
            ASSIGN __str[13] 'e'
            ASSIGN __str[14] ' '
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - input() -> char[]
            // Arguments
            // Pushing args in reverse order
            // *** input
            CALL input
            // Remove args
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__112__line 0
      POP __rhs
      ASSIGN __main__block__112__line __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // Identifier - line
            PUSH __main__block__112__line
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 18
            ASSIGN __str[0] 'E'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'r'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'i'
            ASSIGN __str[7] 'n'
            ASSIGN __str[8] 't'
            ASSIGN __str[9] 'e'
            ASSIGN __str[10] 'g'
            ASSIGN __str[11] 'e'
            ASSIGN __str[12] 'r'
            ASSIGN __str[13] ' '
            ASSIGN __str[14] '='
            ASSIGN __str[15] '='
            ASSIGN __str[16] '>'
            ASSIGN __str[17] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - input() -> char[]
            // Arguments
            // Pushing args in reverse order
            // *** input
            CALL input
            // Remove args
            RESPONSE __retval
            PUSH __retval
      POP __rhs
      ASSIGN __main__block__112__line __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - stringToInt(char[]) -> int
            // Arguments
               // Identifier - line
                  PUSH __main__block__112__line
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** stringToInt
            CALL stringToInt__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__112__x 0
      POP __rhs
      ASSIGN __main__block__112__x __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 9
            ASSIGN __str[0] 'x'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '*'
            ASSIGN __str[3] ' '
            ASSIGN __str[4] 'x'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] '='
            ASSIGN __str[7] '>'
            ASSIGN __str[8] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(int) -> void
      // Arguments
         // Multiplication
            // LHS
               // Identifier - x
                  PUSH __main__block__112__x
            // RHS
               // Identifier - x
                  PUSH __main__block__112__x
            POP __rhs
            POP __lhs
            MULTIPLY __res __lhs __rhs
            PUSH __res
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__int
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 16
            ASSIGN __str[0] 'E'
            ASSIGN __str[1] 'n'
            ASSIGN __str[2] 't'
            ASSIGN __str[3] 'e'
            ASSIGN __str[4] 'r'
            ASSIGN __str[5] ' '
            ASSIGN __str[6] 'f'
            ASSIGN __str[7] 'l'
            ASSIGN __str[8] 'o'
            ASSIGN __str[9] 'a'
            ASSIGN __str[10] 't'
            ASSIGN __str[11] ' '
            ASSIGN __str[12] '='
            ASSIGN __str[13] '='
            ASSIGN __str[14] '>'
            ASSIGN __str[15] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - input() -> char[]
            // Arguments
            // Pushing args in reverse order
            // *** input
            CALL input
            // Remove args
            RESPONSE __retval
            PUSH __retval
      POP __rhs
      ASSIGN __main__block__112__line __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Assignment - '='
      // RHS
         // Function Call - stringToFloat(char[]) -> float
            // Arguments
               // Identifier - line
                  PUSH __main__block__112__line
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** stringToFloat
            CALL stringToFloat__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
      // LHS
         // Variable Declaration
            ASSIGN __main__block__112__y 0
      POP __rhs
      ASSIGN __main__block__112__y __rhs
      PUSH __rhs
   // Statement results can be ignored
   POP __void
   // Function Call - print(char[]) -> void
      // Arguments
         // String Literal
            MALLOC __str 5
            ASSIGN __str[0] 'y'
            ASSIGN __str[1] ' '
            ASSIGN __str[2] '='
            ASSIGN __str[3] '>'
            ASSIGN __str[4] ' '
            PUSH __str
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** print
      CALL print__char__1
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
   // Function Call - println(float) -> void
      // Arguments
         // Identifier - y
            PUSH __main__block__112__y
         POP __arg0
      // Pushing args in reverse order
      PUSH __arg0
      // *** println
      CALL println__float
      // Remove args
      POP __void
      RESPONSE __retval
      PUSH __retval
   // Statement results can be ignored
   POP __void
//------------------------------------------------------------------------
// Function Call - exit(int) -> void
   // Arguments
      // Int Literal
         PUSH 0
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** exit
   CALL exit__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

