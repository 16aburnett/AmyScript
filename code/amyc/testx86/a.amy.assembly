// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// dont execute library functions 

jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================
// returns default float value
// float float ();
float:
    return 0.0

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int value
// int int ();
int:
    return 0

//========================================================================
// returns default char value
// char char ();
char:
    return '0'

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int from a given char
// int charToInt (char);
charToInt__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
null:
    return __null

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

// Assignment - '='
   // RHS
      // Mod
         // LHS
            // Multiplication
               // LHS
                  // Addition
                     // LHS
                        // Addition
                           // LHS
                              // Negative
                                 // RHS
                                    // Int Literal
                                       PUSH 17
                                 POP __rhs
                                 SUBTRACT __res 0 __rhs
                                 PUSH __res
                           // RHS
                              // Multiplication
                                 // LHS
                                    // Int Literal
                                       PUSH 42
                                 // RHS
                                    // Addition
                                       // LHS
                                          // Int Literal
                                             PUSH 2
                                       // RHS
                                          // Int Literal
                                             PUSH 2
                                       POP __rhs
                                       POP __lhs
                                       ADD __res __lhs __rhs
                                       PUSH __res
                                 POP __rhs
                                 POP __lhs
                                 MULTIPLY __res __lhs __rhs
                                 PUSH __res
                           POP __rhs
                           POP __lhs
                           ADD __res __lhs __rhs
                           PUSH __res
                     // RHS
                        // Int Literal
                           PUSH 1
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
               // RHS
                  // Negative
                     // RHS
                        // Int Literal
                           PUSH 1
                     POP __rhs
                     SUBTRACT __res 0 __rhs
                     PUSH __res
               POP __rhs
               POP __lhs
               MULTIPLY __res __lhs __rhs
               PUSH __res
         // RHS
            // Int Literal
               PUSH 3
         POP __rhs
         POP __lhs
         MOD __res __lhs __rhs
         PUSH __res
   // LHS
      // Variable Declaration
         ASSIGN __main__x 0
   POP __rhs
   ASSIGN __main__x __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Multiplication
         // LHS
            // Identifier - x
               PUSH __main__x
         // RHS
            // Int Literal
               PUSH 21
         POP __rhs
         POP __lhs
         MULTIPLY __res __lhs __rhs
         PUSH __res
   // LHS
      // Variable Declaration
         ASSIGN __main__y 0
   POP __rhs
   ASSIGN __main__y __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Division
         // LHS
            // Identifier - y
               PUSH __main__y
         // RHS
            // Identifier - x
               PUSH __main__x
         POP __rhs
         POP __lhs
         DIVIDE __res __lhs __rhs
         PUSH __res
   // LHS
      // Variable Declaration
         ASSIGN __main__z 0
   POP __rhs
   ASSIGN __main__z __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - println(int) -> void
   // Arguments
      // Identifier - z
         PUSH __main__z
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'A'
   // LHS
      // Variable Declaration
         ASSIGN __main__c0 0
   POP __rhs
   ASSIGN __main__c0 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'm'
   // LHS
      // Variable Declaration
         ASSIGN __main__c1 0
   POP __rhs
   ASSIGN __main__c1 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH 'y'
   // LHS
      // Variable Declaration
         ASSIGN __main__c2 0
   POP __rhs
   ASSIGN __main__c2 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Char Literal
         PUSH '\n'
   // LHS
      // Variable Declaration
         ASSIGN __main__c3 0
   POP __rhs
   ASSIGN __main__c3 __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Identifier - c0
         PUSH __main__c0
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Identifier - c1
         PUSH __main__c1
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Identifier - c2
         PUSH __main__c2
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Identifier - c3
         PUSH __main__c3
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // String Literal
         MALLOC __str 13
         ASSIGN __str[0] 'H'
         ASSIGN __str[1] 'e'
         ASSIGN __str[2] 'l'
         ASSIGN __str[3] 'l'
         ASSIGN __str[4] 'o'
         ASSIGN __str[5] ','
         ASSIGN __str[6] ' '
         ASSIGN __str[7] 'W'
         ASSIGN __str[8] 'o'
         ASSIGN __str[9] 'r'
         ASSIGN __str[10] 'l'
         ASSIGN __str[11] 'd'
         ASSIGN __str[12] '!'
         PUSH __str
   // LHS
      // Variable Declaration
         ASSIGN __main__string 0
   POP __rhs
   ASSIGN __main__string __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - println(char[]) -> void
   // Arguments
      // Identifier - string
         PUSH __main__string
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

