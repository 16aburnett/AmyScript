
template <:T:>
class Vector
{
    public field T[]   data;
    public field int   size;
    public field int   capacity;  

    constructor ()
    {
        this.capacity = 10;
        this.size = 0; 
        this.data = new T[this.capacity];
    }

    public method void pushBack (T val)
    {
        // ensure there is space 
        if (this.size + 1 >= this.capacity)
        {
            this.capacity = this.capacity * 2; 
            T[] nData = new T[this.capacity];
            // move old data over
            for (int i = 0; i < this.size; ++i)
            {
                nData[i] = this.data[i];
            }
            free (this.data);
            this.data = nData; 
        }

        // add new num
        this.data[this.size] = val; 
        ++this.size; 
    }

    public method T popBack ()
    {
        this.size -= 1;
        return this.data[this.size];
    }

    public method T get (int index)
    {
        return this.data[index];
    }

    public method void set (int index, T value)
    {
        this.data[index] = value;
    }

}

template <:T:>
function void print (Vector<:T:> v)
{
    print ('[');
    if (v.size != 0)
        print (v.data[0]);
    for (int i = 1; i < v.size; ++i)
    {
        print (',');
        print (' ');
        print (v.data[i]);
    }
    print (']');
}

template <:T:>
function void println (Vector<:T:> v)
{
    print<:T:> (v);
    println ();
}
            Vector<:float:> v = new Vector<:float:> ();v.pushBack (3.14); v.pushBack (-2.145e2); v.pushBack (1.0e-4); println<:float:> (v);
