// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// dont execute library functions 

jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================
// returns default float value
// float float ();
float:
    return 0.0

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int value
// int int ();
int:
    return 0

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
null:
    return __null

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Class Declaration - __main____Point inherits __main__Object
   // Creating Dispatch Table
      MALLOC __dtable____main____Point 0
      // Populate Dispatch Table
   //---------------------------------------------------------------------
   // Field - int Point::x
   ASSIGN __field____main____Point____x 1
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Field - int Point::y
   ASSIGN __field____main____Point____y 2
   //---------------------------------------------------------------------
// skip over class methods
JUMP __endclass____main____Point
   //---------------------------------------------------------------------
   // Constructor Declaration - Point::Point(int, int) -> Point
   JUMP __end__ctor____main____Point____Point__int__int
   __ctor____main____Point____Point__int__int:
      // Creating Class Instance
         MALLOC __this 3
         // Add Dispatch Table
         ASSIGN __this[0] __dtable____main____Point
      // Parameters
         // Param: x
         STACKGET __main____Point__Point__x 0
         // Param: y
         STACKGET __main____Point__Point__y 1
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment - '='
               // RHS
                  // Identifier - x
                     PUSH __main____Point__Point__x
               // LHS
                  // Member Accessor Assignment
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main____Point____x
                     POP __child
                     POP __parent
                     POP __rhs
               ASSIGN __parent[__child] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
            // Assignment - '='
               // RHS
                  // Identifier - y
                     PUSH __main____Point__Point__y
               // LHS
                  // Member Accessor Assignment
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main____Point____y
                     POP __child
                     POP __parent
                     POP __rhs
               ASSIGN __parent[__child] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN __this
   __end__ctor____main____Point____Point__int__int:
   // End Constructor Declaration - __ctor____main____Point____Point__int__int
   //---------------------------------------------------------------------

__endclass____main____Point:
// End Class Declaration - __main____Point
//========================================================================

//========================================================================
// Function Declaration - print(Point) -> void
JUMP __end____main____print__Point
__main____print__Point:
   // Parameters
      // Param: p
      STACKGET __main__print__p 0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Assignment - '='
            // RHS
               // String Literal
                  MALLOC __str 5
                  ASSIGN __str[0] 'P'
                  ASSIGN __str[1] 'o'
                  ASSIGN __str[2] 'i'
                  ASSIGN __str[3] 'n'
                  ASSIGN __str[4] 't'
                  PUSH __str
            // LHS
               // Variable Declaration
                  ASSIGN __main__print__block__1__temp 0
            POP __rhs
            ASSIGN __main__print__block__1__temp __rhs
            PUSH __rhs
         // Statement results can be ignored
         POP __void
         // Function Call - print(char[]) -> void
            // Arguments
               // Identifier - temp
                  PUSH __main__print__block__1__temp
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char__1
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Free Operator
            // RHS
               // Identifier - temp
                  PUSH __main__print__block__1__temp
            // Free array
            POP __array
            FREE __array
            PUSH __array
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH '('
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(int) -> void
            // Arguments
               // Member Accessor
                  // LHS
                     // Identifier - p
                        PUSH __main__print__p
                  // RHS
                     PUSH __field____main____Point____x
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH ','
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH ' '
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(int) -> void
            // Arguments
               // Member Accessor
                  // LHS
                     // Identifier - p
                        PUSH __main__print__p
                  // RHS
                     PUSH __field____main____Point____y
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH ')'
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
      //------------------------------------------------------------------
   RETURN 0
__end____main____print__Point:
// End Function Declaration - __main____print__Point
//========================================================================

//========================================================================
// Function Declaration - println(Point) -> void
JUMP __end____main____println__Point
__main____println__Point:
   // Parameters
      // Param: p
      STACKGET __main__println__p 0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - print(Point) -> void
            // Arguments
               // Identifier - p
                  PUSH __main__println__p
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL __main____print__Point
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - println() -> void
            // Arguments
            // Pushing args in reverse order
            // *** println
            CALL println
            // Remove args
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
      //------------------------------------------------------------------
   RETURN 0
__end____main____println__Point:
// End Function Declaration - __main____println__Point
//========================================================================

//========================================================================
// Function Declaration - __sub__(Point, Point) -> Point
JUMP __end____main______sub____Point__Point
__main______sub____Point__Point:
   // Parameters
      // Param: lhs
      STACKGET __main____sub____lhs 0
      // Param: rhs
      STACKGET __main____sub____rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Subtraction
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____sub____lhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____sub____rhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     SUBTRACT __res __lhs __rhs
                     PUSH __res
                  // Subtraction
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____sub____lhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____sub____rhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     SUBTRACT __res __lhs __rhs
                     PUSH __res
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main______sub____Point__Point:
// End Function Declaration - __main______sub____Point__Point
//========================================================================

//========================================================================
// Function Declaration - __mult__(Point, Point) -> Point
JUMP __end____main______mult____Point__Point
__main______mult____Point__Point:
   // Parameters
      // Param: lhs
      STACKGET __main____mult____lhs 0
      // Param: rhs
      STACKGET __main____mult____rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Multiplication
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____mult____lhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____mult____rhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     MULTIPLY __res __lhs __rhs
                     PUSH __res
                  // Multiplication
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____mult____lhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____mult____rhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     MULTIPLY __res __lhs __rhs
                     PUSH __res
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main______mult____Point__Point:
// End Function Declaration - __main______mult____Point__Point
//========================================================================

//========================================================================
// Function Declaration - __div__(Point, Point) -> Point
JUMP __end____main______div____Point__Point
__main______div____Point__Point:
   // Parameters
      // Param: lhs
      STACKGET __main____div____lhs 0
      // Param: rhs
      STACKGET __main____div____rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Division
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____div____lhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____div____rhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     DIVIDE __res __lhs __rhs
                     PUSH __res
                  // Division
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____div____lhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____div____rhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     DIVIDE __res __lhs __rhs
                     PUSH __res
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main______div____Point__Point:
// End Function Declaration - __main______div____Point__Point
//========================================================================

//========================================================================
// Function Declaration - __mod__(Point, Point) -> Point
JUMP __end____main______mod____Point__Point
__main______mod____Point__Point:
   // Parameters
      // Param: lhs
      STACKGET __main____mod____lhs 0
      // Param: rhs
      STACKGET __main____mod____rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Mod
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____mod____lhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____mod____rhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     MOD __res __lhs __rhs
                     PUSH __res
                  // Mod
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____mod____lhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____mod____rhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     MOD __res __lhs __rhs
                     PUSH __res
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main______mod____Point__Point:
// End Function Declaration - __main______mod____Point__Point
//========================================================================

//========================================================================
// Function Declaration - __subscript__(Point, int) -> int
JUMP __end____main______subscript____Point__int
__main______subscript____Point__int:
   // Parameters
      // Param: lhs
      STACKGET __main____subscript____lhs 0
      // Param: offset
      STACKGET __main____subscript____offset 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Equal
                  // LHS
                     // Identifier - offset
                        PUSH __main____subscript____offset
                  // RHS
                     // Int Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __elif__8x0
            // Body
               // Return
                  // Member Accessor
                     // LHS
                        // Identifier - lhs
                           PUSH __main____subscript____lhs
                     // RHS
                        PUSH __field____main____Point____x
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __rVal
                  RETURN __rVal
            JUMP __endif__8
            //------------------------------------------------------------
            // Elif-Statement
            __elif__8x0:
               // Condition
               // Equal
                  // LHS
                     // Identifier - offset
                        PUSH __main____subscript____offset
                  // RHS
                     // Int Literal
                        PUSH 1
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__8
               // Body
               // Return
                  // Member Accessor
                     // LHS
                        // Identifier - lhs
                           PUSH __main____subscript____lhs
                     // RHS
                        PUSH __field____main____Point____y
                     POP __child
                     POP __parent
                     PUSH __parent[__child]
                  POP __rVal
                  RETURN __rVal
               JUMP __endif__8
            //------------------------------------------------------------
            // End of if
            __endif__8:
         //---------------------------------------------------------------
      //------------------------------------------------------------------
   RETURN 0
__end____main______subscript____Point__int:
// End Function Declaration - __main______subscript____Point__int
//========================================================================

//========================================================================
// Function Declaration - __add__(Point, Point) -> Point
JUMP __end____main______add____Point__Point
__main______add____Point__Point:
   // Parameters
      // Param: lhs
      STACKGET __main____add____lhs 0
      // Param: rhs
      STACKGET __main____add____rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Addition
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____add____lhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____add____rhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
                  // Addition
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____add____lhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____add____rhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main______add____Point__Point:
// End Function Declaration - __main______add____Point__Point
//========================================================================

// Assignment - '='
   // RHS
      // Constructor Call - Point::Point(int, int) -> Point
         // Arguments
            // Int Literal
               PUSH 7
            // Int Literal
               PUSH 3
            POP __arg1
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg1
         PUSH __arg0
         CALL __ctor____main____Point____Point__int__int
         // Remove args
         POP __void
         POP __void
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Variable Declaration
         ASSIGN __main__a 0
   POP __rhs
   ASSIGN __main__a __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Constructor Call - Point::Point(int, int) -> Point
         // Arguments
            // Int Literal
               PUSH 4
            // Int Literal
               PUSH 2
            POP __arg1
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg1
         PUSH __arg0
         CALL __ctor____main____Point____Point__int__int
         // Remove args
         POP __void
         POP __void
         RESPONSE __retval
         PUSH __retval
   // LHS
      // Variable Declaration
         ASSIGN __main__b 0
   POP __rhs
   ASSIGN __main__b __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '+'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - b
         PUSH __main__b
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(Point) -> void
   // Arguments
      // Addition
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         // Using Overloaded Version - __add__
         PUSH __rhs
         PUSH __lhs
         CALL __main______add____Point__Point
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL __main____println__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Subtraction
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         // Using Overloaded Version - __sub__
         PUSH __rhs
         PUSH __lhs
         CALL __main______sub____Point__Point
         RESPONSE __res
         PUSH __res
   // LHS
      // Variable Declaration
         ASSIGN __main__c 0
   POP __rhs
   ASSIGN __main__c __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '-'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - b
         PUSH __main__b
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(Point) -> void
   // Arguments
      // Identifier - c
         PUSH __main__c
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL __main____println__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '*'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - b
         PUSH __main__b
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(Point) -> void
   // Arguments
      // Multiplication
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         // Using Overloaded Version - __mult__
         PUSH __rhs
         PUSH __lhs
         CALL __main______mult____Point__Point
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL __main____println__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '/'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - b
         PUSH __main__b
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(Point) -> void
   // Arguments
      // Division
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         // Using Overloaded Version - __div__
         PUSH __rhs
         PUSH __lhs
         CALL __main______div____Point__Point
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL __main____println__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '%'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - b
         PUSH __main__b
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(Point) -> void
   // Arguments
      // Mod
         // LHS
            // Identifier - a
               PUSH __main__a
         // RHS
            // Identifier - b
               PUSH __main__b
         POP __rhs
         POP __lhs
         // Using Overloaded Version - __mod__
         PUSH __rhs
         PUSH __lhs
         CALL __main______mod____Point__Point
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL __main____println__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '['
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(int) -> void
   // Arguments
      // Int Literal
         PUSH 0
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH ']'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(int) -> void
   // Arguments
      // Subscript
         // LHS
            // Identifier - a
               PUSH __main__a
         // OFFSET
            // Int Literal
               PUSH 0
         POP __offset
         POP __pointer
         // Using Overloaded Version - __subscript__
         PUSH __offset
         PUSH __pointer
         CALL __main______subscript____Point__int
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Assignment - '='
   // RHS
      // Int Literal
         PUSH 42
   // LHS
      // Subscript assignment
         // LHS
            // Identifier - a
               PUSH __main__a
         // OFFSET
            // Int Literal
               PUSH 1
         POP __offset
         POP __pointer
   POP __rhs
   ASSIGN __pointer[__offset] __rhs
   PUSH __rhs
// Statement results can be ignored
POP __void
// Function Call - print(Point) -> void
   // Arguments
      // Identifier - a
         PUSH __main__a
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL __main____print__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '['
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(int) -> void
   // Arguments
      // Int Literal
         PUSH 1
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH ']'
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - print(char) -> void
   // Arguments
      // Char Literal
         PUSH '='
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** print
   CALL print__char
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(int) -> void
   // Arguments
      // Subscript
         // LHS
            // Identifier - a
               PUSH __main__a
         // OFFSET
            // Int Literal
               PUSH 1
         POP __offset
         POP __pointer
         // Using Overloaded Version - __subscript__
         PUSH __offset
         PUSH __pointer
         CALL __main______subscript____Point__int
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
// Class Template - 
   // Instances:
      //==================================================================
      // Class Declaration - __main____Point3D__int inherits __main__Object
         // Creating Dispatch Table
            MALLOC __dtable____main____Point3D__int 1
            // Populate Dispatch Table
            ASSIGN __dtable____main____Point3D__int[0] __method____main____Point3D__int______subscript____int
         //---------------------------------------------------------------
         // Field - int Point3D<:int:>::x
         ASSIGN __field____main____Point3D__int____x 1
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // Field - int Point3D<:int:>::y
         ASSIGN __field____main____Point3D__int____y 2
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // Field - int Point3D<:int:>::z
         ASSIGN __field____main____Point3D__int____z 3
         //---------------------------------------------------------------
      // skip over class methods
      JUMP __endclass____main____Point3D__int
         //---------------------------------------------------------------
         // Constructor Declaration - Point3D<:int:>::Point3D(int, int, int) -> Point3D<:int:>
         JUMP __end__ctor____main____Point3D__int____Point3D__int__int__int
         __ctor____main____Point3D__int____Point3D__int__int__int:
            // Creating Class Instance
               MALLOC __this 4
               // Add Dispatch Table
               ASSIGN __this[0] __dtable____main____Point3D__int
            // Parameters
               // Param: x
               STACKGET __main____Point3D__int__Point3D__x 0
               // Param: y
               STACKGET __main____Point3D__int__Point3D__y 1
               // Param: z
               STACKGET __main____Point3D__int__Point3D__z 2
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Assignment - '='
                     // RHS
                        // Identifier - x
                           PUSH __main____Point3D__int__Point3D__x
                     // LHS
                        // Member Accessor Assignment
                           // LHS
                              // This keyword
                                 PUSH __this
                           // RHS
                              PUSH __field____main____Point3D__int____x
                           POP __child
                           POP __parent
                           POP __rhs
                     ASSIGN __parent[__child] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
                  // Assignment - '='
                     // RHS
                        // Identifier - y
                           PUSH __main____Point3D__int__Point3D__y
                     // LHS
                        // Member Accessor Assignment
                           // LHS
                              // This keyword
                                 PUSH __this
                           // RHS
                              PUSH __field____main____Point3D__int____y
                           POP __child
                           POP __parent
                           POP __rhs
                     ASSIGN __parent[__child] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
                  // Assignment - '='
                     // RHS
                        // Identifier - z
                           PUSH __main____Point3D__int__Point3D__z
                     // LHS
                        // Member Accessor Assignment
                           // LHS
                              // This keyword
                                 PUSH __this
                           // RHS
                              PUSH __field____main____Point3D__int____z
                           POP __child
                           POP __parent
                           POP __rhs
                     ASSIGN __parent[__child] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
            RETURN __this
         __end__ctor____main____Point3D__int____Point3D__int__int__int:
         // End Constructor Declaration - __ctor____main____Point3D__int____Point3D__int__int__int
         //---------------------------------------------------------------

         //---------------------------------------------------------------
         // Method Declaration - Point3D<:int:>::__subscript__(int) -> int
         JUMP __end__method____main____Point3D__int______subscript____int
         __method____main____Point3D__int______subscript____int:
            // Class Instance
               STACKGET __this 0
            // Parameters
               // Param: offset
               STACKGET __main____Point3D__int____subscript____offset 1
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Equal
                           // LHS
                              // Identifier - offset
                                 PUSH __main____Point3D__int____subscript____offset
                           // RHS
                              // Int Literal
                                 PUSH 0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__12x0
                     // Body
                        // Return
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main____Point3D__int____x
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __rVal
                           RETURN __rVal
                     JUMP __endif__12
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__12x0:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - offset
                                 PUSH __main____Point3D__int____subscript____offset
                           // RHS
                              // Int Literal
                                 PUSH 1
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__12x1
                        // Body
                        // Return
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main____Point3D__int____y
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __rVal
                           RETURN __rVal
                        JUMP __endif__12
                     //---------------------------------------------------
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__12x1:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - offset
                                 PUSH __main____Point3D__int____subscript____offset
                           // RHS
                              // Int Literal
                                 PUSH 2
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__12
                        // Body
                        // Return
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main____Point3D__int____z
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __rVal
                           RETURN __rVal
                        JUMP __endif__12
                     //---------------------------------------------------
                     // End of if
                     __endif__12:
                  //------------------------------------------------------
               //---------------------------------------------------------
            RETURN 0
         __end__method____main____Point3D__int______subscript____int:
         // End Method Declaration - __method____main____Point3D__int______subscript____int
         //---------------------------------------------------------------

      __endclass____main____Point3D__int:
      // End Class Declaration - __main____Point3D__int
      //==================================================================

      //==================================================================
      // Class Declaration - __main____Point3D__float inherits __main__Object
         // Creating Dispatch Table
            MALLOC __dtable____main____Point3D__float 1
            // Populate Dispatch Table
            ASSIGN __dtable____main____Point3D__float[0] __method____main____Point3D__float______subscript____int
         //---------------------------------------------------------------
         // Field - float Point3D<:float:>::x
         ASSIGN __field____main____Point3D__float____x 1
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // Field - float Point3D<:float:>::y
         ASSIGN __field____main____Point3D__float____y 2
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // Field - float Point3D<:float:>::z
         ASSIGN __field____main____Point3D__float____z 3
         //---------------------------------------------------------------
      // skip over class methods
      JUMP __endclass____main____Point3D__float
         //---------------------------------------------------------------
         // Constructor Declaration - Point3D<:float:>::Point3D(float, float, float) -> Point3D<:float:>
         JUMP __end__ctor____main____Point3D__float____Point3D__float__float__float
         __ctor____main____Point3D__float____Point3D__float__float__float:
            // Creating Class Instance
               MALLOC __this 4
               // Add Dispatch Table
               ASSIGN __this[0] __dtable____main____Point3D__float
            // Parameters
               // Param: x
               STACKGET __main____Point3D__float__Point3D__x 0
               // Param: y
               STACKGET __main____Point3D__float__Point3D__y 1
               // Param: z
               STACKGET __main____Point3D__float__Point3D__z 2
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Assignment - '='
                     // RHS
                        // Identifier - x
                           PUSH __main____Point3D__float__Point3D__x
                     // LHS
                        // Member Accessor Assignment
                           // LHS
                              // This keyword
                                 PUSH __this
                           // RHS
                              PUSH __field____main____Point3D__float____x
                           POP __child
                           POP __parent
                           POP __rhs
                     ASSIGN __parent[__child] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
                  // Assignment - '='
                     // RHS
                        // Identifier - y
                           PUSH __main____Point3D__float__Point3D__y
                     // LHS
                        // Member Accessor Assignment
                           // LHS
                              // This keyword
                                 PUSH __this
                           // RHS
                              PUSH __field____main____Point3D__float____y
                           POP __child
                           POP __parent
                           POP __rhs
                     ASSIGN __parent[__child] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
                  // Assignment - '='
                     // RHS
                        // Identifier - z
                           PUSH __main____Point3D__float__Point3D__z
                     // LHS
                        // Member Accessor Assignment
                           // LHS
                              // This keyword
                                 PUSH __this
                           // RHS
                              PUSH __field____main____Point3D__float____z
                           POP __child
                           POP __parent
                           POP __rhs
                     ASSIGN __parent[__child] __rhs
                     PUSH __rhs
                  // Statement results can be ignored
                  POP __void
               //---------------------------------------------------------
            RETURN __this
         __end__ctor____main____Point3D__float____Point3D__float__float__float:
         // End Constructor Declaration - __ctor____main____Point3D__float____Point3D__float__float__float
         //---------------------------------------------------------------

         //---------------------------------------------------------------
         // Method Declaration - Point3D<:float:>::__subscript__(int) -> float
         JUMP __end__method____main____Point3D__float______subscript____int
         __method____main____Point3D__float______subscript____int:
            // Class Instance
               STACKGET __this 0
            // Parameters
               // Param: offset
               STACKGET __main____Point3D__float____subscript____offset 1
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Equal
                           // LHS
                              // Identifier - offset
                                 PUSH __main____Point3D__float____subscript____offset
                           // RHS
                              // Int Literal
                                 PUSH 0
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__15x0
                     // Body
                        // Return
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main____Point3D__float____x
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __rVal
                           RETURN __rVal
                     JUMP __endif__15
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__15x0:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - offset
                                 PUSH __main____Point3D__float____subscript____offset
                           // RHS
                              // Int Literal
                                 PUSH 1
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __elif__15x1
                        // Body
                        // Return
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main____Point3D__float____y
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __rVal
                           RETURN __rVal
                        JUMP __endif__15
                     //---------------------------------------------------
                     //---------------------------------------------------
                     // Elif-Statement
                     __elif__15x1:
                        // Condition
                        // Equal
                           // LHS
                              // Identifier - offset
                                 PUSH __main____Point3D__float____subscript____offset
                           // RHS
                              // Int Literal
                                 PUSH 2
                           POP __rhs
                           POP __lhs
                           EQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__15
                        // Body
                        // Return
                           // Member Accessor
                              // LHS
                                 // This keyword
                                    PUSH __this
                              // RHS
                                 PUSH __field____main____Point3D__float____z
                              POP __child
                              POP __parent
                              PUSH __parent[__child]
                           POP __rVal
                           RETURN __rVal
                        JUMP __endif__15
                     //---------------------------------------------------
                     // End of if
                     __endif__15:
                  //------------------------------------------------------
               //---------------------------------------------------------
            RETURN 0
         __end__method____main____Point3D__float______subscript____int:
         // End Method Declaration - __method____main____Point3D__float______subscript____int
         //---------------------------------------------------------------

      __endclass____main____Point3D__float:
      // End Class Declaration - __main____Point3D__float
      //==================================================================

// End Class Template - 
//========================================================================

// Function Call - println(int) -> void
   // Arguments
      // Subscript
         // LHS
            // Constructor Call - Point3D<:int:>::Point3D(int, int, int) -> Point3D<:int:>
               // Arguments
                  // Int Literal
                     PUSH 1
                  // Int Literal
                     PUSH 2
                  // Int Literal
                     PUSH 3
                  POP __arg2
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg2
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point3D__int____Point3D__int__int__int
               // Remove args
               POP __void
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
         // OFFSET
            // Int Literal
               PUSH 1
         POP __offset
         POP __pointer
         // Using Overloaded Version - Point3D<:int:>::__subscript__
         PUSH __offset
         PUSH __pointer
         CALL __method____main____Point3D__int______subscript____int
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__int
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
// Function Call - println(float) -> void
   // Arguments
      // Subscript
         // LHS
            // Constructor Call - Point3D<:float:>::Point3D(float, float, float) -> Point3D<:float:>
               // Arguments
                  // Float Literal
                     PUSH 3.14
                  // Float Literal
                     PUSH 0.5
                  // Float Literal
                     PUSH 52.123
                  POP __arg2
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg2
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point3D__float____Point3D__float__float__float
               // Remove args
               POP __void
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
         // OFFSET
            // Int Literal
               PUSH 2
         POP __offset
         POP __pointer
         // Using Overloaded Version - Point3D<:float:>::__subscript__
         PUSH __offset
         PUSH __pointer
         CALL __method____main____Point3D__float______subscript____int
         RESPONSE __res
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__float
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

