// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// dont execute library functions 

jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================
// returns default float value
// float float ();
float:
    return 0.0

//========================================================================
// converts int to float
// float intToFloat (int);
intToFloat__int:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float from a given char[]
// float stringToFloat (char[]);
stringToFloat__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int value
// int int ();
int:
    return 0

//========================================================================
// converts float to int
// int floatToInt (float);
floatToInt__float:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int from a given char[]
// int stringToInt (char[]);
stringToInt__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
null:
    return __null

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Class Declaration - __main____Point inherits __main__Object
   // Creating Dispatch Table
      MALLOC __dtable____main____Point 0
      // Populate Dispatch Table
   //---------------------------------------------------------------------
   // Field - int Point::x
   ASSIGN __field____main____Point____x 1
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
   // Field - int Point::y
   ASSIGN __field____main____Point____y 2
   //---------------------------------------------------------------------
// skip over class methods
JUMP __endclass____main____Point
   //---------------------------------------------------------------------
   // Constructor Declaration - Point::Point(int, int) -> Point
   JUMP __end__ctor____main____Point____Point__int__int
   __ctor____main____Point____Point__int__int:
      // Creating Class Instance
         MALLOC __this 3
         // Add Dispatch Table
         ASSIGN __this[0] __dtable____main____Point
      // Parameters
         // Param: x
         STACKGET __main____Point__Point__x 0
         // Param: y
         STACKGET __main____Point__Point__y 1
      // Body
         //---------------------------------------------------------------
         // Code Block
            // Assignment
               // RHS
                  // Identifier - x
                     PUSH __main____Point__Point__x
               // LHS
                  // Member Accessor Assignment
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main____Point____x
                     POP __child
                     POP __parent
                     POP __rhs
                     ASSIGN __parent[__child] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
            // Assignment
               // RHS
                  // Identifier - y
                     PUSH __main____Point__Point__y
               // LHS
                  // Member Accessor Assignment
                     // LHS
                        // This keyword
                           PUSH __this
                     // RHS
                        PUSH __field____main____Point____y
                     POP __child
                     POP __parent
                     POP __rhs
                     ASSIGN __parent[__child] __rhs
               PUSH __rhs
            // Statement results can be ignored
            POP __void
         //---------------------------------------------------------------
      RETURN __this
   __end__ctor____main____Point____Point__int__int:
   // End Constructor Declaration - __ctor____main____Point____Point__int__int
   //---------------------------------------------------------------------

__endclass____main____Point:
// End Class Declaration - __main____Point
//========================================================================

//========================================================================
// Function Declaration - print(Point) -> void
JUMP __end____main____print__Point
__main____print__Point:
   // Parameters
      // Param: p
      STACKGET __main__print__p 0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH '('
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(int) -> void
            // Arguments
               // Member Accessor
                  // LHS
                     // Identifier - p
                        PUSH __main__print__p
                  // RHS
                     PUSH __field____main____Point____x
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH ','
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH ' '
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(int) -> void
            // Arguments
               // Member Accessor
                  // LHS
                     // Identifier - p
                        PUSH __main__print__p
                  // RHS
                     PUSH __field____main____Point____y
                  POP __child
                  POP __parent
                  PUSH __parent[__child]
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__int
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - print(char) -> void
            // Arguments
               // Char Literal
                  PUSH ')'
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL print__char
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
      //------------------------------------------------------------------
   RETURN 0
__end____main____print__Point:
// End Function Declaration - __main____print__Point
//========================================================================

//========================================================================
// Function Declaration - println(Point) -> void
JUMP __end____main____println__Point
__main____println__Point:
   // Parameters
      // Param: p
      STACKGET __main__println__p 0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Function Call - print(Point) -> void
            // Arguments
               // Identifier - p
                  PUSH __main__println__p
               POP __arg0
            // Pushing args in reverse order
            PUSH __arg0
            // *** print
            CALL __main____print__Point
            // Remove args
            POP __void
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
         // Function Call - println() -> void
            // Arguments
            // Pushing args in reverse order
            // *** println
            CALL println
            // Remove args
            RESPONSE __retval
            PUSH __retval
         // Statement results can be ignored
         POP __void
      //------------------------------------------------------------------
   RETURN 0
__end____main____println__Point:
// End Function Declaration - __main____println__Point
//========================================================================

//========================================================================
// Function Declaration - __add__(Point, Point) -> Point
JUMP __end____main______add____Point__Point
__main______add____Point__Point:
   // Parameters
      // Param: lhs
      STACKGET __main____add____lhs 0
      // Param: rhs
      STACKGET __main____add____rhs 1
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Return
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Addition
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____add____lhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____add____rhs
                           // RHS
                              PUSH __field____main____Point____x
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
                  // Addition
                     // LHS
                        // Member Accessor
                           // LHS
                              // Identifier - lhs
                                 PUSH __main____add____lhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     // RHS
                        // Member Accessor
                           // LHS
                              // Identifier - rhs
                                 PUSH __main____add____rhs
                           // RHS
                              PUSH __field____main____Point____y
                           POP __child
                           POP __parent
                           PUSH __parent[__child]
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main______add____Point__Point:
// End Function Declaration - __main______add____Point__Point
//========================================================================

// Function Call - println(Point) -> void
   // Arguments
      // Addition
         // LHS
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Int Literal
                     PUSH 7
                  // Int Literal
                     PUSH 3
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
         // RHS
            // Constructor Call - Point::Point(int, int) -> Point
               // Arguments
                  // Int Literal
                     PUSH 4
                  // Int Literal
                     PUSH 2
                  POP __arg1
                  POP __arg0
               // Pushing args in reverse order
               PUSH __arg1
               PUSH __arg0
               CALL __ctor____main____Point____Point__int__int
               // Remove args
               POP __void
               POP __void
               RESPONSE __retval
               PUSH __retval
         POP __rhs
         POP __lhs
         ADD __res __lhs __rhs
         PUSH __res
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL __main____println__Point
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
// Statement results can be ignored
POP __void
//========================================================================
//### END OF CODE ########################################################
//========================================================================

