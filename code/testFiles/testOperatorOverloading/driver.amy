// Simple operator overloading test file
// Author: Amy Burnett
//========================================================================

//#include "utils/vector.amy"

//========================================================================

class Point 
{
    public field int x;
    public field int y; 
    constructor (int x, int y) {this.x = x; this.y = y;}
}

function void print (Point p)
{
    char[] temp = "Point";
    print (temp);
    free (temp);
    print ('(');
    print (p.x);
    print (',');
    print (' ');
    print (p.y);
    print (')');
}

function void println (Point p)
{
    print (p);
    println ();
}

//========================================================================

// operator overloading function for "Point - Point"
function Point __sub__ (Point lhs, Point rhs)
{
    return new Point (lhs.x - rhs.x, lhs.y - rhs.y);
}

// operator overloading function for "Point * Point"
function Point __mult__ (Point lhs, Point rhs)
{
    return new Point (lhs.x * rhs.x, lhs.y * rhs.y);
}

// operator overloading function for "Point / Point"
function Point __div__ (Point lhs, Point rhs)
{
    return new Point (lhs.x / rhs.x, lhs.y / rhs.y);
}

// operator overloading function for "Point % Point"
function Point __mod__ (Point lhs, Point rhs)
{
    return new Point (lhs.x % rhs.x, lhs.y % rhs.y);
}

// operator overloading function for "Point[int]"
function int __subscript__ (Point lhs, int offset)
{
    if (offset == 0)
        return lhs.x;
    elif (offset == 1)
        return lhs.y;
}

// operator overloading function for "Point + Point"
function Point __add__ (Point lhs, Point rhs)
{
    return new Point (lhs.x + rhs.x, lhs.y + rhs.y);
}

//========================================================================


Point a = new Point (7, 3);
Point b = new Point (4, 2);

print (a);
print ('+');
print (b);
print ('=');
println (a + b);

Point c = a - b;
print (a);
print ('-');
print (b);
print ('=');
println (c);

print (a);
print ('*');
print (b);
print ('=');
println (a * b);

print (a);
print ('/');
print (b);
print ('=');
println (a / b);

print (a);
print ('%');
print (b);
print ('=');
println (a % b);

print (a);
print ('[');
print (0);
print (']');
print ('=');
println (a[0]);

// this should probably evaluate LHS to a pointer
// and then set pointer[0] to 42.............
a[1] = 42;


print (a);
print ('[');
print (1);
print (']');
print ('=');
println (a[1]);

//========================================================================

template <:T:>
class Point3D
{
    public field T x;
    public field T y; 
    public field T z;
    constructor (T x, T y, T z)
    {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public method T __subscript__ (int offset)
    {
        if (offset == 0)
            return this.x;
        elif (offset == 1)
            return this.y; 
        elif (offset == 2)
            return this.z; 
    }

}

// this would generate ambiguity errors because Point3D<:int:>::__subscript__ exists
//function int __subscript__ (Point3D<:int:> p, int offset)
//{
//    if (offset == 0)
//        return p.x;
//    elif (offset == 1)
//        return p.y; 
//    elif (offset == 2)
//        return p.z; 
//}

println (new Point3D<:int:>(1,2,3)[1]);
println (new Point3D<:float:>(3.14, 0.5, 52.123)[2]);