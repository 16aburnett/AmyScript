// Testing Virtual Methods
// Author: Amy Burnett
//========================================================================

class A { public virtual void X() { println ("A::X()"); } }
class B inherits A { }
class D inherits B { virtual void X() { println ("D::X()"); } }
class E inherits D { virtual void Y() { println ("E::Y()"); } }
class C inherits B { virtual void X() { println ("C::X()"); } }
class F inherits D { virtual void Z() { println ("F::Z()"); } }
class G inherits A { virtual void X() { println ("G::X()"); } virtual void Y() { println ("G::Y()"); } }
class H inherits G { virtual void Y() { println ("H::Y()"); } }
class I inherits A { virtual void Y() { println ("I::Y()"); } virtual void Z() { println ("I::Z()"); } }

//========================================================================

function void fun1 (A a)
{
    println ("fun1");
    // virtual method call 
    a.X ();
}

function void fun2 (G g)
{
    println ("fun2");
    // virtual method call 
    g.X ();
    g.Y ();
}

B b = new B();
D d = new D();
H h = new H();
I i = new I();

fun1 (i);
fun1 (b);

fun2 (h);

//========================================================================

function A[] fun3 (G[] g)
{
    return g; 
}

H[] hs = new H[3];

for (int i = 0; i < sizeof (hs); ++i)
    hs[i] = new H();

for (int i = 0; i < sizeof (hs); ++i)
    // fun3 converts hs from H[] to A[]
    // and the subscript operator works correctly
    // and fun1 accepts an A
    fun1 (fun3 (hs)[i]);


class Pizza
{
    constructor ()
    {
        int x = 0;
        return;
    }
}

Pizza pizza = new Pizza();


for (int i = 0; i < 5; ++i)
{
    function void print ()
    {
        for (int i = 0; i < 20; ++i)
        {
            println(i);
            break; 
        }
    } 
    print();
    class Apple 
    {
        public method void print ()
        {
            println (i);
            // break; // causes an error because break has a class inbetween the outer loop 
        }
    }
    Apple apple = new Apple();
    apple.print ();
}