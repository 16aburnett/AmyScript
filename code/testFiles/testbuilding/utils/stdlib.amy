// AmyScript standard library 
// Author: Amy Burnett
//========================================================================

#ifndef STDLIB
    #define STDLIB

    #include "max.amy"

//========================================================================

    template <:T:>
    function T sum (T[] vals, int begin, int end)
    {
        T sum = T();
        for (int i = begin; i < end; ++i)
            sum = sum + vals[i]; 
        return sum; 
    }

//========================================================================

    template <:T:>
    function T min (T a, T b)
    {
        if (a <= b) return a;
        return b; 
    }

//========================================================================

    template <:T:>
    function void merge (T[] array, int left, int mid, int right)
    {
        int leftArraySize = mid - left + 1;
        int rightArraySize = right - mid; 

        // Create temp arrays 
        T[] leftArray = new T[leftArraySize];
        T[] rightArray = new T[rightArraySize];

        // Copy data to temp arrays 
        for (int i = 0; i < leftArraySize; ++i)
            leftArray[i] = array[left + i];
        for (int j = 0; j < rightArraySize; ++j)
            rightArray[j] = array[mid + 1 + j];

        int i = 0;
        int j = 0;
        int k = left; 

        while (i < leftArraySize && j < rightArraySize)
        {
            if (leftArray[i] <= rightArray[j])
            {
                array[k++] = leftArray[i++];
            }
            else
            {
                array[k++] = rightArray[j++];
            }
        }

        // Copy over remaining of leftArray
        while (i < leftArraySize)
        {   
            array[k++] = leftArray[i++];
        }
        // Copy over remaining of rightArray
        while (j < rightArraySize)
        {   
            array[k++] = rightArray[j++];
        }

        // clean up temp arrays
        free (leftArray);
        free (rightArray);
    }

//========================================================================

    template <:T:>
    function void mergeSort (T[] array, int begin, int end)
    {
        if (begin >= end) return;

        int mid = begin + (end - begin) / 2;
        mergeSort<:T:> (array, begin, mid);
        mergeSort<:T:> (array, mid + 1, end);
        merge<:T:> (array, begin, mid, end);
    }

//========================================================================

    // generic object printing function 
    function void print (Object obj)
    {
        print ("<Object>");
    }

    // generic object printing function 
    function void println (Object obj)
    {
        print (obj);
        println ();
    }

//========================================================================

#endif

//========================================================================
