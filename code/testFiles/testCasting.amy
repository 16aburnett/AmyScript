

class Person
{
    public field char[] name; 
    public field int age; 
    constructor (char[] name, int age)
    {
        this.name = name;
        this.age = age; 
    }
}


function char[] substring (char[] str, int begin, int end)
{
    char[] result = new char[end-begin];
    for (int i = begin; i < end; ++i)
    {
        result[i-begin] = str[i];
    }
    return result; 
}


function char[][] split (char[] str, char delim)
{   
    // buffer initially set to sizeof str 
    // extra space will be removed later 
    // this prevents the need to reallocate more space 
    char[][] buffer = new char[sizeof (str)][];

    int i = 0; 
    int j = 0; 
    while (i < sizeof (str))
    {
        // at the start of a new split 
        if (str[i] != delim)
        {
            // determine split size 
            int count = 0;
            int k = i;
            while (k < sizeof (str)) 
                if (str[k++] != delim)
                    ++count; 
                else 
                    break;

            // allocate space for the split
            buffer[j] = new char[count];

            // add characters until delim is reached 
            for (int k = 0; k < sizeof (buffer[j]); ++k)
            {
                buffer[j][k] = str[i++];
            }
            
            // move to next split buffer
            ++j; 
        }
        // skip over delimiters

        ++i; 
    }

    // remove extra buffer space
    char[][] result = new char[j][];
    for (int i = 0; i < j; ++i)
    {
        result[i] = buffer[i];
    }

    // free buffer
    free (buffer);

    return result; 

}


println ("Enter a list of numbers separated by spaces");
char[][] elems = split (input (), ' ');
int[] nums = new int[sizeof(elems)];

for (int i = 0; i < sizeof (elems); ++i)
{
    nums[i] = stringToInt (elems[i]) * 2;
}

free (elems);

for (int i = 0; i < sizeof (nums); ++i)
{
    println (nums[i]);
}


println ("==============================");
println (intToFloat (47));
println (floatToInt (3.14));

println (string (floatToInt (intToFloat (13) * 3.5))[0]);


println ("==============================");
Person person = new Person ("Amy", 22);

println (person.name);
println (person.age);

free (person);

println (person.name);

Person person2 = new Person ("Cameron", 21);

// if the free works, person2 should replace the block of person
// but person still has that address so you can access person2 with person
println (person.name);