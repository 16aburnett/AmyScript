// Testing Class templates 
// Author: Amy Burnett
//========================================================================

template <:T:>
class vector
{
    public field T[] data;
    public field int size;
    constructor () 
    {
        this.data = new T[10];
        this.size = 0;
    }
    public method void pushBack (T val)
    {
        if (this.size >= 10)
            return;
        this.data[this.size++] = val; 
    }
    public method void popBack ()
    {
        if (this.size <= 0)
            return;
        this.size--; 
    }
    public method int size()
    {
        return this.size;
    }

}

//========================================================================

vector<:int:> nums = new vector<:int:>();
nums.pushBack (7);
nums.pushBack (42);
nums.pushBack (18);
nums.pushBack (176);
nums.popBack ();

for (int i = 0; i < nums.size; ++i)
{
    print (nums.data[i]);
    print (' ');
}
println ();

//========================================================================

vector<:float:> nums2 = new vector<:float:>();
nums2.pushBack (3.14);
nums2.pushBack (1.0);
nums2.pushBack (47.123432);
nums2.pushBack (20.3);
nums2.popBack ();

for (int i = 0; i < nums2.size; ++i)
{
    print (nums2.data[i]);
    print (' ');
}
println ();

//========================================================================

function int strcmp (char[] a, char[] b)
{
    if (sizeof(a) != sizeof(b))
    {
        return 0;
    }
    for (int i = 0; i < sizeof(a); ++i)
        if (a[i] != b[i])
        {
            return 0;
        }
    return 1;
}

template <:key_t, value_t:>
class map
{
    public field key_t[] keys;
    public field value_t[] values;
    public field int size; 
    constructor ()
    {
        this.keys = new key_t[10];
        this.values = new value_t[10];
        this.size = 0; 
    }
    public method void insert (key_t key, value_t value)
    {
        if (this.size+1 > 10)
            return; 
        this.keys[this.size] = key;
        this.values[this.size] = value; 
        this.size++;
    }
    public method value_t get (key_t key)
    {
        for (int i = 0; i < this.size; ++i)
            if (strcmp(this.keys[i], key))
                return this.values[i];
    }
    public method void set (key_t key, value_t value)
    {
        for (int i = 0; i < this.size; ++i)
            if (strcmp(this.keys[i], key))
                this.values[i] = value;
    }
    public method int contains (key_t key)
    {
        for (int i = 0; i < this.size; ++i)
            if (strcmp(this.keys[i], key))
                return 1;
        return 0; 
    }
}

map<:char[], int:> occ = new map<:char[], int:>();

char[][] words = ["pizza", "watermelon", "pizza", "toast", "bread", "apple", "toast", "pizza"];

for (int i = 0; i < sizeof(words); ++i)
{
    // DNE
    if (!occ.contains(words[i]))
    {
        occ.insert (words[i], 1);
    }
    else
        occ.set (words[i], occ.get(words[i])+1);
}   

for (int i = 0; i < occ.size; ++i)
{
    print (occ.keys[i]);
    print (' ');
    println (occ.values[i]);
}



