// AmyAssembly compiled from AmyScript
//========================================================================

//========================================================================
//### LIBRARY CODE #######################################################
//========================================================================

// AmyScript Built-in library
// Author: Amy Burnett
//========================================================================

jump __endOfLibrary

//========================================================================
// Global Variables

    assign __null 0

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
print__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __i __size
    jge __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int intToPrint);
print__int:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float floatToPrint);
print__float:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
print__char:
    // grab string
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
println__char__1:
    // grab string
    stackget __str 0
    sizeof __size __str
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __i __size
    jge __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void print (int intToPrint);
println__int:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float floatToPrint);
println__float:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
exit:
    halt

//========================================================================

__endOfLibrary:
    //push prompt
    //call print

    //call input
    //response name

    //push name
    //call println

//========================================================================
//### COMPILED CODE ######################################################
//========================================================================

//========================================================================
// Function Declaration - stringToInt(char[]) -> int
JUMP __end____main____stringToInt__char__1
__main____stringToInt__char__1:
   // Parameters
      // Param: str
      STACKGET __main__stringToInt__str 0
   // Body
      //------------------------------------------------------------------
      // Code Block
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__stringToInt__block__0__val 0
            POP __rhs
            ASSIGN __main__stringToInt__block__0__val __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__stringToInt__block__0__isNegative 0
            POP __rhs
            ASSIGN __main__stringToInt__block__0__isNegative __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__stringToInt__block__0__i 0
            POP __rhs
            ASSIGN __main__stringToInt__block__0__i __rhs
            PUSH __rhs
         //---------------------------------------------------------------
         // For-Loop
         // Init
            // Identifier - i
               PUSH __main__stringToInt__block__0__i
         JUMP __forcond__1
         __for__1:
            // Update
               // Pre-Increment
                  // RHS
                     // Identifier - i
                        PUSH __main__stringToInt__block__0__i
                  POP __rhs
                  ADD __main__stringToInt__block__0__i __main__stringToInt__block__0__i 1
                  ASSIGN __res __main__stringToInt__block__0__i
                  PUSH __res
            __forcond__1:
            // Condition
               // Less Than
                  // LHS
                     // Identifier - i
                        PUSH __main__stringToInt__block__0__i
                  // RHS
                     // Sizeof Operator
                        // RHS
                           // Identifier - str
                              PUSH __main__stringToInt__str
                        // Calculate array size
                        POP __array
                        SIZEOF __size __array
                        PUSH __size
                  POP __rhs
                  POP __lhs
                  LT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endfor__1
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // If-Statement
                     // Condition
                        // Not Equal
                           // LHS
                              // Subscript
                                 // LHS
                                    // Identifier - str
                                       PUSH __main__stringToInt__str
                                 // OFFSET
                                    // Identifier - i
                                       PUSH __main__stringToInt__block__0__i
                                 POP __offset
                                 POP __pointer
                                 PUSH __pointer[__offset]
                           // RHS
                              // Literal
                                 PUSH ' '
                           POP __rhs
                           POP __lhs
                           NEQUAL __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __endif__3
                     // Body
                        //------------------------------------------------
                        // Code Block
                           // Break out of __for__1
                           JUMP __endfor__1
                        //------------------------------------------------
                     JUMP __endif__3
                     // End of if
                     __endif__3:
                  //------------------------------------------------------
               //---------------------------------------------------------
            // Repeat
            JUMP __for__1
            // End of For
            __endfor__1:
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Equal
                  // LHS
                     // Subscript
                        // LHS
                           // Identifier - str
                              PUSH __main__stringToInt__str
                        // OFFSET
                           // Identifier - i
                              PUSH __main__stringToInt__block__0__i
                        POP __offset
                        POP __pointer
                        PUSH __pointer[__offset]
                  // RHS
                     // Literal
                        PUSH '-'
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__5
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Assignment
                     // RHS
                        // Literal
                           PUSH 1
                     POP __rhs
                     ASSIGN __main__stringToInt__block__0__isNegative __rhs
                     PUSH __rhs
                  // Post-Increment
                     ASSIGN __res __main__stringToInt__block__0__i
                     ADD __main__stringToInt__block__0__i __main__stringToInt__block__0__i 1
                     PUSH __res
               //---------------------------------------------------------
            JUMP __endif__5
            // End of if
            __endif__5:
         //---------------------------------------------------------------
         // Assignment
            // RHS
               // Literal
                  MALLOC __str 10
                  ASSIGN __str[0] '0'
                  ASSIGN __str[1] '1'
                  ASSIGN __str[2] '2'
                  ASSIGN __str[3] '3'
                  ASSIGN __str[4] '4'
                  ASSIGN __str[5] '5'
                  ASSIGN __str[6] '6'
                  ASSIGN __str[7] '7'
                  ASSIGN __str[8] '8'
                  ASSIGN __str[9] '9'
                  PUSH __str
            // LHS
               // Variable Declaration
                  ASSIGN __main__stringToInt__block__0__digits 0
            POP __rhs
            ASSIGN __main__stringToInt__block__0__digits __rhs
            PUSH __rhs
         //---------------------------------------------------------------
         // For-Loop
         // Init
            // Identifier - i
               PUSH __main__stringToInt__block__0__i
         JUMP __forcond__7
         __for__7:
            // Update
               // Pre-Increment
                  // RHS
                     // Identifier - i
                        PUSH __main__stringToInt__block__0__i
                  POP __rhs
                  ADD __main__stringToInt__block__0__i __main__stringToInt__block__0__i 1
                  ASSIGN __res __main__stringToInt__block__0__i
                  PUSH __res
            __forcond__7:
            // Condition
               // Less Than
                  // LHS
                     // Identifier - i
                        PUSH __main__stringToInt__block__0__i
                  // RHS
                     // Sizeof Operator
                        // RHS
                           // Identifier - str
                              PUSH __main__stringToInt__str
                        // Calculate array size
                        POP __array
                        SIZEOF __size __array
                        PUSH __size
                  POP __rhs
                  POP __lhs
                  LT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endfor__7
            // Body
               //---------------------------------------------------------
               // Code Block
                  //------------------------------------------------------
                  // For-Loop
                  // Init
                     // Assignment
                        // RHS
                           // Literal
                              PUSH 0
                        // LHS
                           // Variable Declaration
                              ASSIGN __main__stringToInt__block__0__for__7__block__8__for__9__j 0
                        POP __rhs
                        ASSIGN __main__stringToInt__block__0__for__7__block__8__for__9__j __rhs
                        PUSH __rhs
                  JUMP __forcond__9
                  __for__9:
                     // Update
                        // Pre-Increment
                           // RHS
                              // Identifier - j
                                 PUSH __main__stringToInt__block__0__for__7__block__8__for__9__j
                           POP __rhs
                           ADD __main__stringToInt__block__0__for__7__block__8__for__9__j __main__stringToInt__block__0__for__7__block__8__for__9__j 1
                           ASSIGN __res __main__stringToInt__block__0__for__7__block__8__for__9__j
                           PUSH __res
                     __forcond__9:
                     // Condition
                        // Less Than
                           // LHS
                              // Identifier - j
                                 PUSH __main__stringToInt__block__0__for__7__block__8__for__9__j
                           // RHS
                              // Sizeof Operator
                                 // RHS
                                    // Identifier - digits
                                       PUSH __main__stringToInt__block__0__digits
                                 // Calculate array size
                                 POP __array
                                 SIZEOF __size __array
                                 PUSH __size
                           POP __rhs
                           POP __lhs
                           LT __res __lhs __rhs
                           PUSH __res
                        POP __cond
                        CMP __cond 0
                        JEQ __forelse__9
                     // Body
                        //------------------------------------------------
                        // Code Block
                           //---------------------------------------------
                           // If-Statement
                              // Condition
                                 // Equal
                                    // LHS
                                       // Subscript
                                          // LHS
                                             // Identifier - str
                                                PUSH __main__stringToInt__str
                                          // OFFSET
                                             // Identifier - i
                                                PUSH __main__stringToInt__block__0__i
                                          POP __offset
                                          POP __pointer
                                          PUSH __pointer[__offset]
                                    // RHS
                                       // Literal
                                          PUSH ' '
                                    POP __rhs
                                    POP __lhs
                                    EQUAL __res __lhs __rhs
                                    PUSH __res
                                 POP __cond
                                 CMP __cond 0
                                 JEQ __endif__11
                              // Body
                                 //---------------------------------------
                                 // Code Block
                                    // Assignment
                                       // RHS
                                          // Sizeof Operator
                                             // RHS
                                                // Identifier - str
                                                   PUSH __main__stringToInt__str
                                             // Calculate array size
                                             POP __array
                                             SIZEOF __size __array
                                             PUSH __size
                                       POP __rhs
                                       ASSIGN __main__stringToInt__block__0__i __rhs
                                       PUSH __rhs
                                    // Break out of __for__9
                                    JUMP __endfor__9
                                 //---------------------------------------
                              JUMP __endif__11
                              // End of if
                              __endif__11:
                           //---------------------------------------------
                           //---------------------------------------------
                           // If-Statement
                              // Condition
                                 // Equal
                                    // LHS
                                       // Subscript
                                          // LHS
                                             // Identifier - str
                                                PUSH __main__stringToInt__str
                                          // OFFSET
                                             // Identifier - i
                                                PUSH __main__stringToInt__block__0__i
                                          POP __offset
                                          POP __pointer
                                          PUSH __pointer[__offset]
                                    // RHS
                                       // Subscript
                                          // LHS
                                             // Identifier - digits
                                                PUSH __main__stringToInt__block__0__digits
                                          // OFFSET
                                             // Identifier - j
                                                PUSH __main__stringToInt__block__0__for__7__block__8__for__9__j
                                          POP __offset
                                          POP __pointer
                                          PUSH __pointer[__offset]
                                    POP __rhs
                                    POP __lhs
                                    EQUAL __res __lhs __rhs
                                    PUSH __res
                                 POP __cond
                                 CMP __cond 0
                                 JEQ __endif__13
                              // Body
                                 //---------------------------------------
                                 // Code Block
                                    // Assignment
                                       // RHS
                                          // Addition
                                             // LHS
                                                // Multiplication
                                                   // LHS
                                                      // Identifier - val
                                                         PUSH __main__stringToInt__block__0__val
                                                   // RHS
                                                      // Literal
                                                         PUSH 10
                                                   POP __rhs
                                                   POP __lhs
                                                   MULTIPLY __res __lhs __rhs
                                                   PUSH __res
                                             // RHS
                                                // Identifier - j
                                                   PUSH __main__stringToInt__block__0__for__7__block__8__for__9__j
                                             POP __rhs
                                             POP __lhs
                                             ADD __res __lhs __rhs
                                             PUSH __res
                                       POP __rhs
                                       ASSIGN __main__stringToInt__block__0__val __rhs
                                       PUSH __rhs
                                    // Break out of __for__9
                                    JUMP __endfor__9
                                 //---------------------------------------
                              JUMP __endif__13
                              // End of if
                              __endif__13:
                           //---------------------------------------------
                        //------------------------------------------------
                     // Repeat
                     JUMP __for__9
                     //---------------------------------------------------
                     // For-Else-Statement
                     __forelse__9:
                     //---------------------------------------------------
                     // Code Block
                        // Function Call - println(char[]) -> void
                           // Arguments
                              // Literal
                                 MALLOC __str 20
                                 ASSIGN __str[0] 'C'
                                 ASSIGN __str[1] 'a'
                                 ASSIGN __str[2] 'n'
                                 ASSIGN __str[3] 'n'
                                 ASSIGN __str[4] 'o'
                                 ASSIGN __str[5] 't'
                                 ASSIGN __str[6] ' '
                                 ASSIGN __str[7] 'P'
                                 ASSIGN __str[8] 'a'
                                 ASSIGN __str[9] 'r'
                                 ASSIGN __str[10] 's'
                                 ASSIGN __str[11] 'e'
                                 ASSIGN __str[12] ' '
                                 ASSIGN __str[13] 'i'
                                 ASSIGN __str[14] 'n'
                                 ASSIGN __str[15] 't'
                                 ASSIGN __str[16] 'e'
                                 ASSIGN __str[17] 'g'
                                 ASSIGN __str[18] 'e'
                                 ASSIGN __str[19] 'r'
                                 PUSH __str
                              POP __arg0
                           // Pushing args in reverse order
                           PUSH __arg0
                           // *** println
                           CALL println__char__1
                           // Remove args
                           POP __void
                           RESPONSE __retval
                           PUSH __retval
                        // Function Call - exit() -> void
                           // Arguments
                           // Pushing args in reverse order
                           // *** exit
                           CALL exit
                           // Remove args
                           RESPONSE __retval
                           PUSH __retval
                     //---------------------------------------------------
                     //---------------------------------------------------
                     // End of For
                     __endfor__9:
                  //------------------------------------------------------
               //---------------------------------------------------------
            // Repeat
            JUMP __for__7
            // End of For
            __endfor__7:
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Identifier - isNegative
                  PUSH __main__stringToInt__block__0__isNegative
               POP __cond
               CMP __cond 0
               JEQ __endif__16
            // Body
               // Return
                  // Negative
                     // RHS
                        // Identifier - val
                           PUSH __main__stringToInt__block__0__val
                     POP __rhs
                     SUBTRACT __res 0 __rhs
                     PUSH __res
                  POP __rVal
                  RETURN __rVal
            JUMP __endif__16
            // End of if
            __endif__16:
         //---------------------------------------------------------------
         // Return
            // Identifier - val
               PUSH __main__stringToInt__block__0__val
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main____stringToInt__char__1:
// End Function Declaration - __main____stringToInt__char__1
//========================================================================

//========================================================================
// Function Declaration - intToString(int) -> char[]
JUMP __end____main____intToString__int
__main____intToString__int:
   // Parameters
      // Param: num
      STACKGET __main__intToString__num 0
   // Body
      //------------------------------------------------------------------
      // Code Block
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Equal
                  // LHS
                     // Identifier - num
                        PUSH __main__intToString__num
                  // RHS
                     // Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  EQUAL __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__18
            // Body
               // Return
                  // Literal
                     MALLOC __str 1
                     ASSIGN __str[0] '0'
                     PUSH __str
                  POP __rVal
                  RETURN __rVal
            JUMP __endif__18
            // End of if
            __endif__18:
         //---------------------------------------------------------------
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__isNegative 0
            POP __rhs
            ASSIGN __main__intToString__block__17__isNegative __rhs
            PUSH __rhs
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Less Than
                  // LHS
                     // Identifier - num
                        PUSH __main__intToString__num
                  // RHS
                     // Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  LT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endif__19
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Assignment
                     // RHS
                        // Literal
                           PUSH 1
                     POP __rhs
                     ASSIGN __main__intToString__block__17__isNegative __rhs
                     PUSH __rhs
                  // Assignment
                     // RHS
                        // Negative
                           // RHS
                              // Identifier - num
                                 PUSH __main__intToString__num
                           POP __rhs
                           SUBTRACT __res 0 __rhs
                           PUSH __res
                     POP __rhs
                     ASSIGN __main__intToString__num __rhs
                     PUSH __rhs
               //---------------------------------------------------------
            JUMP __endif__19
            // End of if
            __endif__19:
         //---------------------------------------------------------------
         // Assignment
            // RHS
               // Literal
                  MALLOC __str 10
                  ASSIGN __str[0] '0'
                  ASSIGN __str[1] '1'
                  ASSIGN __str[2] '2'
                  ASSIGN __str[3] '3'
                  ASSIGN __str[4] '4'
                  ASSIGN __str[5] '5'
                  ASSIGN __str[6] '6'
                  ASSIGN __str[7] '7'
                  ASSIGN __str[8] '8'
                  ASSIGN __str[9] '9'
                  PUSH __str
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__digits 0
            POP __rhs
            ASSIGN __main__intToString__block__17__digits __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__nDigits 0
            POP __rhs
            ASSIGN __main__intToString__block__17__nDigits __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Identifier - num
                  PUSH __main__intToString__num
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__temp 0
            POP __rhs
            ASSIGN __main__intToString__block__17__temp __rhs
            PUSH __rhs
         //---------------------------------------------------------------
         // While-Loop
         __while__21:
            // Condition
               // Greater Than
                  // LHS
                     // Identifier - temp
                        PUSH __main__intToString__block__17__temp
                  // RHS
                     // Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  GT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endwhile__21
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Post-Increment
                     ASSIGN __res __main__intToString__block__17__nDigits
                     ADD __main__intToString__block__17__nDigits __main__intToString__block__17__nDigits 1
                     PUSH __res
                  // Assignment
                     // RHS
                        // Division
                           // LHS
                              // Identifier - temp
                                 PUSH __main__intToString__block__17__temp
                           // RHS
                              // Literal
                                 PUSH 10
                           POP __rhs
                           POP __lhs
                           DIVIDE __res __lhs __rhs
                           PUSH __res
                     POP __rhs
                     ASSIGN __main__intToString__block__17__temp __rhs
                     PUSH __rhs
               //---------------------------------------------------------
            JUMP __while__21
            // End of While
            __endwhile__21:
         //---------------------------------------------------------------
         // Assignment
            // RHS
               // Array Allocator
                  // Addition
                     // LHS
                        // Identifier - nDigits
                           PUSH __main__intToString__block__17__nDigits
                     // RHS
                        // Identifier - isNegative
                           PUSH __main__intToString__block__17__isNegative
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
                  POP __size
                  MALLOC __ptr __size
                  PUSH __ptr
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__result 0
            POP __rhs
            ASSIGN __main__intToString__block__17__result __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Array Allocator
                  // Addition
                     // LHS
                        // Identifier - nDigits
                           PUSH __main__intToString__block__17__nDigits
                     // RHS
                        // Identifier - isNegative
                           PUSH __main__intToString__block__17__isNegative
                     POP __rhs
                     POP __lhs
                     ADD __res __lhs __rhs
                     PUSH __res
                  POP __size
                  MALLOC __ptr __size
                  PUSH __ptr
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__reversed 0
            POP __rhs
            ASSIGN __main__intToString__block__17__reversed __rhs
            PUSH __rhs
         // Assignment
            // RHS
               // Literal
                  PUSH 0
            // LHS
               // Variable Declaration
                  ASSIGN __main__intToString__block__17__i 0
            POP __rhs
            ASSIGN __main__intToString__block__17__i __rhs
            PUSH __rhs
         //---------------------------------------------------------------
         // While-Loop
         __while__23:
            // Condition
               // Greater Than
                  // LHS
                     // Identifier - num
                        PUSH __main__intToString__num
                  // RHS
                     // Literal
                        PUSH 0
                  POP __rhs
                  POP __lhs
                  GT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endwhile__23
            // Body
               //---------------------------------------------------------
               // Code Block
                  // Assignment
                     // RHS
                        // Subscript
                           // LHS
                              // Identifier - digits
                                 PUSH __main__intToString__block__17__digits
                           // OFFSET
                              // Mod
                                 // LHS
                                    // Identifier - num
                                       PUSH __main__intToString__num
                                 // RHS
                                    // Literal
                                       PUSH 10
                                 POP __rhs
                                 POP __lhs
                                 MOD __res __lhs __rhs
                                 PUSH __res
                           POP __offset
                           POP __pointer
                           PUSH __pointer[__offset]
                     // LHS
                        // Subscript assignment
                           // LHS
                              // Identifier - result
                                 PUSH __main__intToString__block__17__result
                           // OFFSET
                              // Identifier - i
                                 PUSH __main__intToString__block__17__i
                           POP __offset
                           POP __pointer
                     POP __rhs
                     ASSIGN __pointer[__offset] __rhs
                     PUSH __rhs
                  // Post-Increment
                     ASSIGN __res __main__intToString__block__17__i
                     ADD __main__intToString__block__17__i __main__intToString__block__17__i 1
                     PUSH __res
                  // Assignment
                     // RHS
                        // Division
                           // LHS
                              // Identifier - num
                                 PUSH __main__intToString__num
                           // RHS
                              // Literal
                                 PUSH 10
                           POP __rhs
                           POP __lhs
                           DIVIDE __res __lhs __rhs
                           PUSH __res
                     POP __rhs
                     ASSIGN __main__intToString__num __rhs
                     PUSH __rhs
               //---------------------------------------------------------
            JUMP __while__23
            // End of While
            __endwhile__23:
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // If-Statement
            // Condition
               // Identifier - isNegative
                  PUSH __main__intToString__block__17__isNegative
               POP __cond
               CMP __cond 0
               JEQ __endif__25
            // Body
               // Assignment
                  // RHS
                     // Literal
                        PUSH '-'
                  // LHS
                     // Subscript assignment
                        // LHS
                           // Identifier - result
                              PUSH __main__intToString__block__17__result
                        // OFFSET
                           // Identifier - nDigits
                              PUSH __main__intToString__block__17__nDigits
                        POP __offset
                        POP __pointer
                  POP __rhs
                  ASSIGN __pointer[__offset] __rhs
                  PUSH __rhs
            JUMP __endif__25
            // End of if
            __endif__25:
         //---------------------------------------------------------------
         //---------------------------------------------------------------
         // For-Loop
         // Init
            // Assignment
               // RHS
                  // Literal
                     PUSH 0
               POP __rhs
               ASSIGN __main__intToString__block__17__i __rhs
               PUSH __rhs
         JUMP __forcond__26
         __for__26:
            // Update
               // Pre-Increment
                  // RHS
                     // Identifier - i
                        PUSH __main__intToString__block__17__i
                  POP __rhs
                  ADD __main__intToString__block__17__i __main__intToString__block__17__i 1
                  ASSIGN __res __main__intToString__block__17__i
                  PUSH __res
            __forcond__26:
            // Condition
               // Less Than
                  // LHS
                     // Identifier - i
                        PUSH __main__intToString__block__17__i
                  // RHS
                     // Sizeof Operator
                        // RHS
                           // Identifier - result
                              PUSH __main__intToString__block__17__result
                        // Calculate array size
                        POP __array
                        SIZEOF __size __array
                        PUSH __size
                  POP __rhs
                  POP __lhs
                  LT __res __lhs __rhs
                  PUSH __res
               POP __cond
               CMP __cond 0
               JEQ __endfor__26
            // Body
               // Assignment
                  // RHS
                     // Subscript
                        // LHS
                           // Identifier - result
                              PUSH __main__intToString__block__17__result
                        // OFFSET
                           // Subtraction
                              // LHS
                                 // Subtraction
                                    // LHS
                                       // Sizeof Operator
                                          // RHS
                                             // Identifier - result
                                                PUSH __main__intToString__block__17__result
                                          // Calculate array size
                                          POP __array
                                          SIZEOF __size __array
                                          PUSH __size
                                    // RHS
                                       // Literal
                                          PUSH 1
                                    POP __rhs
                                    POP __lhs
                                    SUBTRACT __res __lhs __rhs
                                    PUSH __res
                              // RHS
                                 // Identifier - i
                                    PUSH __main__intToString__block__17__i
                              POP __rhs
                              POP __lhs
                              SUBTRACT __res __lhs __rhs
                              PUSH __res
                        POP __offset
                        POP __pointer
                        PUSH __pointer[__offset]
                  // LHS
                     // Subscript assignment
                        // LHS
                           // Identifier - reversed
                              PUSH __main__intToString__block__17__reversed
                        // OFFSET
                           // Identifier - i
                              PUSH __main__intToString__block__17__i
                        POP __offset
                        POP __pointer
                  POP __rhs
                  ASSIGN __pointer[__offset] __rhs
                  PUSH __rhs
            // Repeat
            JUMP __for__26
            // End of For
            __endfor__26:
         //---------------------------------------------------------------
         // Return
            // Identifier - reversed
               PUSH __main__intToString__block__17__reversed
            POP __rVal
            RETURN __rVal
      //------------------------------------------------------------------
   RETURN 0
__end____main____intToString__int:
// End Function Declaration - __main____intToString__int
//========================================================================

// Function Call - println(char[]) -> void
   // Arguments
      // Function Call - intToString(int) -> char[]
         // Arguments
            // Multiplication
               // LHS
                  // Function Call - stringToInt(char[]) -> int
                     // Arguments
                        // Function Call - input() -> char[]
                           // Arguments
                           // Pushing args in reverse order
                           // *** input
                           CALL input
                           // Remove args
                           RESPONSE __retval
                           PUSH __retval
                        POP __arg0
                     // Pushing args in reverse order
                     PUSH __arg0
                     // *** stringToInt
                     CALL __main____stringToInt__char__1
                     // Remove args
                     POP __void
                     RESPONSE __retval
                     PUSH __retval
               // RHS
                  // Literal
                     PUSH 2
               POP __rhs
               POP __lhs
               MULTIPLY __res __lhs __rhs
               PUSH __res
            POP __arg0
         // Pushing args in reverse order
         PUSH __arg0
         // *** intToString
         CALL __main____intToString__int
         // Remove args
         POP __void
         RESPONSE __retval
         PUSH __retval
      POP __arg0
   // Pushing args in reverse order
   PUSH __arg0
   // *** println
   CALL println__char__1
   // Remove args
   POP __void
   RESPONSE __retval
   PUSH __retval
//========================================================================
//### END OF CODE ########################################################
//========================================================================

